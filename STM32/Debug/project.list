
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08007b18  08007b18  00008b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008028  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001d4  080081fc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080081fc  0000a4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e105  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002349  00000000  00000000  00018302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0001a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b50  00000000  00000000  0001b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001940f  00000000  00000000  0001c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be3  00000000  00000000  0003542f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091327  00000000  00000000  00046012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  000d737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dc200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007afc 	.word	0x08007afc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007afc 	.word	0x08007afc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <send>:
_LED_0F[25] = 0x92; //S
_LED_0F[26] = 0xC1; //U
_LED_0F[27] = 0x91; //Y
_LED_0F[28] = 0xFE; //hight -
}
void send(uint8_t X){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	for (int i = 8; i >= 1; i--)
 8000c1e:	2308      	movs	r3, #8
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e022      	b.n	8000c6a <send+0x56>
	{
	  if (X & 0x80)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da06      	bge.n	8000c3a <send+0x26>
	  {
	    HAL_GPIO_WritePin(FND_DIO_GPIO_Port,FND_DIO_Pin ,HIGH);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c32:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <send+0x68>)
 8000c34:	f002 f90f 	bl	8002e56 <HAL_GPIO_WritePin>
 8000c38:	e005      	b.n	8000c46 <send+0x32>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(FND_DIO_GPIO_Port,FND_DIO_Pin ,LOW);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c40:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <send+0x68>)
 8000c42:	f002 f908 	bl	8002e56 <HAL_GPIO_WritePin>
	  }
	  X <<= 1;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(FND_SCLK_GPIO_Port,FND_SCLK_Pin ,LOW);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c52:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <send+0x68>)
 8000c54:	f002 f8ff 	bl	8002e56 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(FND_SCLK_GPIO_Port,FND_SCLK_Pin ,HIGH);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5e:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <send+0x68>)
 8000c60:	f002 f8f9 	bl	8002e56 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dcd9      	bgt.n	8000c24 <send+0x10>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <send_port>:
void send_port(uint8_t X, uint8_t port)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
  send(X);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffbe 	bl	8000c14 <send>
  send(port);
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffba 	bl	8000c14 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port,FND_RCLK_Pin ,LOW);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <send_port+0x40>)
 8000ca8:	f002 f8d5 	bl	8002e56 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port,FND_RCLK_Pin ,HIGH);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb2:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <send_port+0x40>)
 8000cb4:	f002 f8cf 	bl	8002e56 <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <microDelay+0x2c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000cd6:	bf00      	nop
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <microDelay+0x2c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3f9      	bcc.n	8000cd8 <microDelay+0x14>
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000220 	.word	0x20000220

08000cf4 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482c      	ldr	r0, [pc, #176]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d22:	f001 fefd 	bl	8002b20 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2c:	4829      	ldr	r0, [pc, #164]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d2e:	f002 f892 	bl	8002e56 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000d32:	2014      	movs	r0, #20
 8000d34:	f001 f8e4 	bl	8001f00 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3e:	4825      	ldr	r0, [pc, #148]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d40:	f002 f889 	bl	8002e56 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000d44:	201e      	movs	r0, #30
 8000d46:	f7ff ffbd 	bl	8000cc4 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	481f      	ldr	r0, [pc, #124]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d58:	f001 fee2 	bl	8002b20 <HAL_GPIO_Init>
  microDelay (40);
 8000d5c:	2028      	movs	r0, #40	@ 0x28
 8000d5e:	f7ff ffb1 	bl	8000cc4 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d66:	481b      	ldr	r0, [pc, #108]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d68:	f002 f85e 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <DHT11_Start+0x98>
  {
    microDelay (80);
 8000d72:	2050      	movs	r0, #80	@ 0x50
 8000d74:	f7ff ffa6 	bl	8000cc4 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d7c:	4815      	ldr	r0, [pc, #84]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000d7e:	f002 f853 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <DHT11_Start+0x98>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000d8c:	f001 f8ae 	bl	8001eec <HAL_GetTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <DHT11_Start+0xe4>)
 8000d94:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000d96:	f001 f8a9 	bl	8001eec <HAL_GetTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <DHT11_Start+0xe8>)
 8000d9e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000da0:	e004      	b.n	8000dac <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000da2:	f001 f8a3 	bl	8001eec <HAL_GetTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <DHT11_Start+0xe8>)
 8000daa:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <DHT11_Start+0xe0>)
 8000db2:	f002 f839 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <DHT11_Start+0xd6>
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <DHT11_Start+0xe4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1c9a      	adds	r2, r3, #2
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <DHT11_Start+0xe8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d8eb      	bhi.n	8000da2 <DHT11_Start+0xae>
  }
  return Response;
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	20000350 	.word	0x20000350
 8000ddc:	20000368 	.word	0x20000368

08000de0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e066      	b.n	8000eba <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000dec:	f001 f87e 	bl	8001eec <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a36      	ldr	r2, [pc, #216]	@ (8000ecc <DHT11_Read+0xec>)
 8000df4:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000df6:	f001 f879 	bl	8001eec <HAL_GetTick>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a34      	ldr	r2, [pc, #208]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000dfe:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e00:	e004      	b.n	8000e0c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e02:	f001 f873 	bl	8001eec <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a31      	ldr	r2, [pc, #196]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000e0a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e10:	4830      	ldr	r0, [pc, #192]	@ (8000ed4 <DHT11_Read+0xf4>)
 8000e12:	f002 f809 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d106      	bne.n	8000e2a <DHT11_Read+0x4a>
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <DHT11_Read+0xec>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c9a      	adds	r2, r3, #2
 8000e22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d8eb      	bhi.n	8000e02 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000e2a:	2028      	movs	r0, #40	@ 0x28
 8000e2c:	f7ff ff4a 	bl	8000cc4 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e34:	4827      	ldr	r0, [pc, #156]	@ (8000ed4 <DHT11_Read+0xf4>)
 8000e36:	f001 fff7 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10e      	bne.n	8000e5e <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2201      	movs	r2, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e56:	4013      	ands	r3, r2
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	71bb      	strb	r3, [r7, #6]
 8000e5c:	e00b      	b.n	8000e76 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f1c3 0307 	rsb	r3, r3, #7
 8000e64:	2201      	movs	r2, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000e76:	f001 f839 	bl	8001eec <HAL_GetTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <DHT11_Read+0xec>)
 8000e7e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e80:	f001 f834 	bl	8001eec <HAL_GetTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000e88:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e8a:	e004      	b.n	8000e96 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000e8c:	f001 f82e 	bl	8001eec <HAL_GetTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000e94:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <DHT11_Read+0xf4>)
 8000e9c:	f001 ffc4 	bl	8002e28 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <DHT11_Read+0xd4>
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <DHT11_Read+0xec>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1c9a      	adds	r2, r3, #2
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <DHT11_Read+0xf0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8eb      	bhi.n	8000e8c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d995      	bls.n	8000dec <DHT11_Read+0xc>
    }
  }
  return b;
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000350 	.word	0x20000350
 8000ed0:	20000368 	.word	0x20000368
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <connectWifi>:
void connectWifi() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	@ 0x38
 8000edc:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	491b      	ldr	r1, [pc, #108]	@ (8000f54 <connectWifi+0x7c>)
 8000ee6:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <connectWifi+0x80>)
 8000ee8:	f003 f9e2 	bl	80042b0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef0:	f001 f806 	bl	8001f00 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+RST\r\n", strlen("AT+RST\r\n"), HAL_MAX_DELAY);
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4918      	ldr	r1, [pc, #96]	@ (8000f5c <connectWifi+0x84>)
 8000efc:	4816      	ldr	r0, [pc, #88]	@ (8000f58 <connectWifi+0x80>)
 8000efe:	f003 f9d7 	bl	80042b0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f06:	f000 fffb 	bl	8001f00 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), HAL_MAX_DELAY);
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	220d      	movs	r2, #13
 8000f10:	4913      	ldr	r1, [pc, #76]	@ (8000f60 <connectWifi+0x88>)
 8000f12:	4811      	ldr	r0, [pc, #68]	@ (8000f58 <connectWifi+0x80>)
 8000f14:	f003 f9cc 	bl	80042b0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000f18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1c:	f000 fff0 	bl	8001f00 <HAL_Delay>

	char wifiCommand[50];
	sprintf(wifiCommand, "AT+CWJAP=\"%s\",\"%s\"\r\n", "s20", "32813315");
 8000f20:	1d38      	adds	r0, r7, #4
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <connectWifi+0x8c>)
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <connectWifi+0x90>)
 8000f26:	4911      	ldr	r1, [pc, #68]	@ (8000f6c <connectWifi+0x94>)
 8000f28:	f004 fcb4 	bl	8005894 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)wifiCommand, strlen(wifiCommand), HAL_MAX_DELAY);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f90e 	bl	8000150 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	1d39      	adds	r1, r7, #4
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <connectWifi+0x80>)
 8000f40:	f003 f9b6 	bl	80042b0 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000f44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f48:	f000 ffda 	bl	8001f00 <HAL_Delay>

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08007b18 	.word	0x08007b18
 8000f58:	200002f8 	.word	0x200002f8
 8000f5c:	08007b20 	.word	0x08007b20
 8000f60:	08007b2c 	.word	0x08007b2c
 8000f64:	08007b3c 	.word	0x08007b3c
 8000f68:	08007b48 	.word	0x08007b48
 8000f6c:	08007b4c 	.word	0x08007b4c

08000f70 <sendHTTPRequest>:
void sendHTTPRequest() {
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 8000f76:	af04      	add	r7, sp, #16
    char tcpCommand[50];
    sprintf(tcpCommand, "AT+CIPSTART=\"TCP\",\"%s\",3002\r\n", "3.38.231.37");
 8000f78:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 8000f7c:	4a37      	ldr	r2, [pc, #220]	@ (800105c <sendHTTPRequest+0xec>)
 8000f7e:	4938      	ldr	r1, [pc, #224]	@ (8001060 <sendHTTPRequest+0xf0>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fc87 	bl	8005894 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)tcpCommand, strlen(tcpCommand), HAL_MAX_DELAY);
 8000f86:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f8e0 	bl	8000150 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f507 7121 	add.w	r1, r7, #644	@ 0x284
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	4831      	ldr	r0, [pc, #196]	@ (8001064 <sendHTTPRequest+0xf4>)
 8000f9e:	f003 f987 	bl	80042b0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa6:	f000 ffab 	bl	8001f00 <HAL_Delay>

    char httpCommand[40];
    char postData[400];
    char data[200];
    sprintf(data, "{\"location\":\"Home\",\"isOpen\":\"%c\",\"brightness\":%d,\"checkDate\":\"none\",\"temp\":%d.%d,\"humidity\":%d.%d}",isOpen,portval,TCI,TCD,RHI,RHD);
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <sendHTTPRequest+0xf8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461e      	mov	r6, r3
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <sendHTTPRequest+0xfc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8001070 <sendHTTPRequest+0x100>)
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4a2e      	ldr	r2, [pc, #184]	@ (8001074 <sendHTTPRequest+0x104>)
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001078 <sendHTTPRequest+0x108>)
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800107c <sendHTTPRequest+0x10c>)
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	1d38      	adds	r0, r7, #4
 8000fcc:	9203      	str	r2, [sp, #12]
 8000fce:	9502      	str	r5, [sp, #8]
 8000fd0:	9401      	str	r4, [sp, #4]
 8000fd2:	9100      	str	r1, [sp, #0]
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	492a      	ldr	r1, [pc, #168]	@ (8001080 <sendHTTPRequest+0x110>)
 8000fd8:	f004 fc5c 	bl	8005894 <siprintf>
    sprintf(postData, "POST /posts HTTP/1.1\r\nHost: 3.38.231.37:3002\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s",strlen(data),data);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8b6 	bl	8000150 <strlen>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8000fec:	4925      	ldr	r1, [pc, #148]	@ (8001084 <sendHTTPRequest+0x114>)
 8000fee:	f004 fc51 	bl	8005894 <siprintf>
    sprintf(httpCommand, "AT+CIPSEND=%d\r\n", strlen(postData));
 8000ff2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f8aa 	bl	8000150 <strlen>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8001002:	4921      	ldr	r1, [pc, #132]	@ (8001088 <sendHTTPRequest+0x118>)
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fc45 	bl	8005894 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)httpCommand, strlen(httpCommand), HAL_MAX_DELAY);
 800100a:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f89e 	bl	8000150 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f507 7117 	add.w	r1, r7, #604	@ 0x25c
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	4810      	ldr	r0, [pc, #64]	@ (8001064 <sendHTTPRequest+0xf4>)
 8001022:	f003 f945 	bl	80042b0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102a:	f000 ff69 	bl	8001f00 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)postData, strlen(postData), HAL_MAX_DELAY);
 800102e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f88c 	bl	8000150 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <sendHTTPRequest+0xf4>)
 8001046:	f003 f933 	bl	80042b0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800104a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104e:	f000 ff57 	bl	8001f00 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8001058:	46bd      	mov	sp, r7
 800105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105c:	08007b64 	.word	0x08007b64
 8001060:	08007b70 	.word	0x08007b70
 8001064:	200002f8 	.word	0x200002f8
 8001068:	20000344 	.word	0x20000344
 800106c:	20000340 	.word	0x20000340
 8001070:	20000362 	.word	0x20000362
 8001074:	20000363 	.word	0x20000363
 8001078:	20000360 	.word	0x20000360
 800107c:	20000361 	.word	0x20000361
 8001080:	08007b90 	.word	0x08007b90
 8001084:	08007bf4 	.word	0x08007bf4
 8001088:	08007c5c 	.word	0x08007c5c
 800108c:	00000000 	.word	0x00000000

08001090 <checkDistance>:
void checkDistance(){
 8001090:	b598      	push	{r3, r4, r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109a:	4841      	ldr	r0, [pc, #260]	@ (80011a0 <checkDistance+0x110>)
 800109c:	f001 fedb 	bl	8002e56 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80010a0:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <checkDistance+0x114>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 80010a8:	bf00      	nop
 80010aa:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <checkDistance+0x114>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	d9fa      	bls.n	80010aa <checkDistance+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ba:	4839      	ldr	r0, [pc, #228]	@ (80011a0 <checkDistance+0x110>)
 80010bc:	f001 fecb 	bl	8002e56 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80010c0:	f000 ff14 	bl	8001eec <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a38      	ldr	r2, [pc, #224]	@ (80011a8 <checkDistance+0x118>)
 80010c8:	6013      	str	r3, [r2, #0]
	        // wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80010ca:	bf00      	nop
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	4833      	ldr	r0, [pc, #204]	@ (80011a0 <checkDistance+0x110>)
 80010d2:	f001 fea9 	bl	8002e28 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d108      	bne.n	80010ee <checkDistance+0x5e>
 80010dc:	4b32      	ldr	r3, [pc, #200]	@ (80011a8 <checkDistance+0x118>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f103 040a 	add.w	r4, r3, #10
 80010e4:	f000 ff02 	bl	8001eec <HAL_GetTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	429c      	cmp	r4, r3
 80010ec:	d8ee      	bhi.n	80010cc <checkDistance+0x3c>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <checkDistance+0x114>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <checkDistance+0x11c>)
 80010f6:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80010f8:	f000 fef8 	bl	8001eec <HAL_GetTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a2a      	ldr	r2, [pc, #168]	@ (80011a8 <checkDistance+0x118>)
 8001100:	6013      	str	r3, [r2, #0]
	        // wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001102:	bf00      	nop
 8001104:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001108:	4825      	ldr	r0, [pc, #148]	@ (80011a0 <checkDistance+0x110>)
 800110a:	f001 fe8d 	bl	8002e28 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <checkDistance+0x96>
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <checkDistance+0x118>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 800111c:	f000 fee6 	bl	8001eec <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	429c      	cmp	r4, r3
 8001124:	d8ee      	bhi.n	8001104 <checkDistance+0x74>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <checkDistance+0x114>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	4a20      	ldr	r2, [pc, #128]	@ (80011b0 <checkDistance+0x120>)
 800112e:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <checkDistance+0x120>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <checkDistance+0x11c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f952 	bl	80003e4 <__aeabi_ui2d>
 8001140:	a315      	add	r3, pc, #84	@ (adr r3, 8001198 <checkDistance+0x108>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f9c7 	bl	80004d8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800115a:	f7ff fae7 	bl	800072c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc8f 	bl	8000a88 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <checkDistance+0x124>)
 800116e:	6013      	str	r3, [r2, #0]
	if(Distance<6){
 8001170:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <checkDistance+0x124>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4910      	ldr	r1, [pc, #64]	@ (80011b8 <checkDistance+0x128>)
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd24 	bl	8000bc4 <__aeabi_fcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <checkDistance+0xfa>
	    isOpen='0';
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <checkDistance+0x12c>)
 8001184:	2230      	movs	r2, #48	@ 0x30
 8001186:	701a      	strb	r2, [r3, #0]
	}
	else{
	    isOpen='1';
	}
}
 8001188:	e002      	b.n	8001190 <checkDistance+0x100>
	    isOpen='1';
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <checkDistance+0x12c>)
 800118c:	2231      	movs	r2, #49	@ 0x31
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	bd98      	pop	{r3, r4, r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	b020c49c 	.word	0xb020c49c
 800119c:	3fa16872 	.word	0x3fa16872
 80011a0:	40010800 	.word	0x40010800
 80011a4:	200002b0 	.word	0x200002b0
 80011a8:	20000350 	.word	0x20000350
 80011ac:	20000354 	.word	0x20000354
 80011b0:	20000358 	.word	0x20000358
 80011b4:	2000035c 	.word	0x2000035c
 80011b8:	40c00000 	.word	0x40c00000
 80011bc:	20000344 	.word	0x20000344

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t _LED_0F[29];

	_LED_0F[0] = 0xC0; //0
 80011c6:	23c0      	movs	r3, #192	@ 0xc0
 80011c8:	733b      	strb	r3, [r7, #12]
	_LED_0F[1] = 0xF9; //1
 80011ca:	23f9      	movs	r3, #249	@ 0xf9
 80011cc:	737b      	strb	r3, [r7, #13]
	_LED_0F[2] = 0xA4; //2
 80011ce:	23a4      	movs	r3, #164	@ 0xa4
 80011d0:	73bb      	strb	r3, [r7, #14]
	_LED_0F[3] = 0xB0; //3
 80011d2:	23b0      	movs	r3, #176	@ 0xb0
 80011d4:	73fb      	strb	r3, [r7, #15]
	_LED_0F[4] = 0x99; //4
 80011d6:	2399      	movs	r3, #153	@ 0x99
 80011d8:	743b      	strb	r3, [r7, #16]
	_LED_0F[5] = 0x92; //5
 80011da:	2392      	movs	r3, #146	@ 0x92
 80011dc:	747b      	strb	r3, [r7, #17]
	_LED_0F[6] = 0x82; //6
 80011de:	2382      	movs	r3, #130	@ 0x82
 80011e0:	74bb      	strb	r3, [r7, #18]
	_LED_0F[7] = 0xF8; //7
 80011e2:	23f8      	movs	r3, #248	@ 0xf8
 80011e4:	74fb      	strb	r3, [r7, #19]
	_LED_0F[8] = 0x80; //8
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	753b      	strb	r3, [r7, #20]
	_LED_0F[9] = 0x90; //9
 80011ea:	2390      	movs	r3, #144	@ 0x90
 80011ec:	757b      	strb	r3, [r7, #21]
	_LED_0F[10] = 0x40; //0.
 80011ee:	2340      	movs	r3, #64	@ 0x40
 80011f0:	75bb      	strb	r3, [r7, #22]
	_LED_0F[11] = 0x79; //1.
 80011f2:	2379      	movs	r3, #121	@ 0x79
 80011f4:	75fb      	strb	r3, [r7, #23]
	_LED_0F[12] = 0x24; //2.
 80011f6:	2324      	movs	r3, #36	@ 0x24
 80011f8:	763b      	strb	r3, [r7, #24]
	_LED_0F[13] = 0x30; //3.
 80011fa:	2330      	movs	r3, #48	@ 0x30
 80011fc:	767b      	strb	r3, [r7, #25]
	_LED_0F[14] = 0x19; //4.
 80011fe:	2319      	movs	r3, #25
 8001200:	76bb      	strb	r3, [r7, #26]
	_LED_0F[15] = 0x12; //5.
 8001202:	2312      	movs	r3, #18
 8001204:	76fb      	strb	r3, [r7, #27]
	_LED_0F[16] = 0x02; //6.
 8001206:	2302      	movs	r3, #2
 8001208:	773b      	strb	r3, [r7, #28]
	_LED_0F[17] = 0x78; //7.
 800120a:	2378      	movs	r3, #120	@ 0x78
 800120c:	777b      	strb	r3, [r7, #29]
	_LED_0F[18] = 0x00; //8.
 800120e:	2300      	movs	r3, #0
 8001210:	77bb      	strb	r3, [r7, #30]
	_LED_0F[19] = 0x10; //9.
 8001212:	2310      	movs	r3, #16
 8001214:	77fb      	strb	r3, [r7, #31]
	_LED_0F[20] = 0xC3; //L
 8001216:	23c3      	movs	r3, #195	@ 0xc3
 8001218:	f887 3020 	strb.w	r3, [r7, #32]
	_LED_0F[21] = 0xA9; //n
 800121c:	23a9      	movs	r3, #169	@ 0xa9
 800121e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	_LED_0F[22] = 0xC0; //O
 8001222:	23c0      	movs	r3, #192	@ 0xc0
 8001224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	_LED_0F[23] = 0x8C; //P
 8001228:	238c      	movs	r3, #140	@ 0x8c
 800122a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	_LED_0F[24] = 0x98; //q
 800122e:	2398      	movs	r3, #152	@ 0x98
 8001230:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	_LED_0F[25] = 0x92; //S
 8001234:	2392      	movs	r3, #146	@ 0x92
 8001236:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	_LED_0F[26] = 0xC1; //U
 800123a:	23c1      	movs	r3, #193	@ 0xc1
 800123c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	_LED_0F[27] = 0x91; //Y
 8001240:	2391      	movs	r3, #145	@ 0x91
 8001242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	_LED_0F[28] = 0xFE; //hight -
 8001246:	23fe      	movs	r3, #254	@ 0xfe
 8001248:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fdf6 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f908 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 fab6 	bl	80017c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001258:	f000 fa8a 	bl	8001770 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800125c:	f000 f95e 	bl	800151c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001260:	f000 f99a 	bl	8001598 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001264:	f000 f9e8 	bl	8001638 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001268:	f000 fa34 	bl	80016d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  int val[3]={0,0,0};
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Base_Start_IT(&htim2);
 8001278:	486d      	ldr	r0, [pc, #436]	@ (8001430 <main+0x270>)
 800127a:	f002 fc1b 	bl	8003ab4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800127e:	486d      	ldr	r0, [pc, #436]	@ (8001434 <main+0x274>)
 8001280:	f002 fbce 	bl	8003a20 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001284:	486c      	ldr	r0, [pc, #432]	@ (8001438 <main+0x278>)
 8001286:	f002 fbcb 	bl	8003a20 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001290:	486a      	ldr	r0, [pc, #424]	@ (800143c <main+0x27c>)
 8001292:	f001 fde0 	bl	8002e56 <HAL_GPIO_WritePin>
  connectWifi();
 8001296:	f7ff fe1f 	bl	8000ed8 <connectWifi>
  if(DHT11_Start())   //every 10second start temp and humidity check
 800129a:	f7ff fd2b 	bl	8000cf4 <DHT11_Start>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d040      	beq.n	8001326 <main+0x166>
   	      {
   	        RHI = DHT11_Read(); // Relative humidity integral
 80012a4:	f7ff fd9c 	bl	8000de0 <DHT11_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <main+0x280>)
 80012ae:	701a      	strb	r2, [r3, #0]
   	        RHD = DHT11_Read(); // Relative humidity decimal
 80012b0:	f7ff fd96 	bl	8000de0 <DHT11_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <main+0x284>)
 80012ba:	701a      	strb	r2, [r3, #0]
   	        TCI = DHT11_Read(); // Celsius integral
 80012bc:	f7ff fd90 	bl	8000de0 <DHT11_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b60      	ldr	r3, [pc, #384]	@ (8001448 <main+0x288>)
 80012c6:	701a      	strb	r2, [r3, #0]
   	        TCD = DHT11_Read(); // Celsius decimal
 80012c8:	f7ff fd8a 	bl	8000de0 <DHT11_Read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b5e      	ldr	r3, [pc, #376]	@ (800144c <main+0x28c>)
 80012d2:	701a      	strb	r2, [r3, #0]
   	        SUM = DHT11_Read(); // Check sum
 80012d4:	f7ff fd84 	bl	8000de0 <DHT11_Read>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001450 <main+0x290>)
 80012de:	701a      	strb	r2, [r3, #0]
   	        val[2]=TCI/10;
 80012e0:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <main+0x288>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4a5b      	ldr	r2, [pc, #364]	@ (8001454 <main+0x294>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	60bb      	str	r3, [r7, #8]
   	        val[1]=TCI%10+10; //seconde num *10= dot num
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <main+0x288>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b57      	ldr	r3, [pc, #348]	@ (8001454 <main+0x294>)
 80012f6:	fba3 1302 	umull	r1, r3, r3, r2
 80012fa:	08d9      	lsrs	r1, r3, #3
 80012fc:	460b      	mov	r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	330a      	adds	r3, #10
 800130a:	607b      	str	r3, [r7, #4]
   	        val[0]=TCD%10;
 800130c:	4b4f      	ldr	r3, [pc, #316]	@ (800144c <main+0x28c>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	4b50      	ldr	r3, [pc, #320]	@ (8001454 <main+0x294>)
 8001312:	fba3 1302 	umull	r1, r3, r3, r2
 8001316:	08d9      	lsrs	r1, r3, #3
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(check==1){   //every 30second start temp and humidity check
 8001326:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <main+0x298>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d159      	bne.n	80013e2 <main+0x222>

		    send_port(_LED_0F[28], 0b1111);
 800132e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001332:	210f      	movs	r1, #15
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fca3 	bl	8000c80 <send_port>
		    DHT11_Start();
 800133a:	f7ff fcdb 	bl	8000cf4 <DHT11_Start>
	        RHI = DHT11_Read(); // Relative humidity integral
 800133e:	f7ff fd4f 	bl	8000de0 <DHT11_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b3e      	ldr	r3, [pc, #248]	@ (8001440 <main+0x280>)
 8001348:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 800134a:	f7ff fd49 	bl	8000de0 <DHT11_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b3c      	ldr	r3, [pc, #240]	@ (8001444 <main+0x284>)
 8001354:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001356:	f7ff fd43 	bl	8000de0 <DHT11_Read>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <main+0x288>)
 8001360:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 8001362:	f7ff fd3d 	bl	8000de0 <DHT11_Read>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b38      	ldr	r3, [pc, #224]	@ (800144c <main+0x28c>)
 800136c:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 800136e:	f7ff fd37 	bl	8000de0 <DHT11_Read>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <main+0x290>)
 8001378:	701a      	strb	r2, [r3, #0]
	        val[2]=TCI/10;
 800137a:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <main+0x288>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <main+0x294>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	60bb      	str	r3, [r7, #8]
	        val[1]=TCI%10+10; //seconde num *10= dot num
 800138a:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <main+0x288>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <main+0x294>)
 8001390:	fba3 1302 	umull	r1, r3, r3, r2
 8001394:	08d9      	lsrs	r1, r3, #3
 8001396:	460b      	mov	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	330a      	adds	r3, #10
 80013a4:	607b      	str	r3, [r7, #4]
	        val[0]=TCD%10;
 80013a6:	4b29      	ldr	r3, [pc, #164]	@ (800144c <main+0x28c>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <main+0x294>)
 80013ac:	fba3 1302 	umull	r1, r3, r3, r2
 80013b0:	08d9      	lsrs	r1, r3, #3
 80013b2:	460b      	mov	r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	603b      	str	r3, [r7, #0]
	        checkDistance();
 80013c0:	f7ff fe66 	bl	8001090 <checkDistance>
	        HAL_ADC_Start(&hadc1);
 80013c4:	4825      	ldr	r0, [pc, #148]	@ (800145c <main+0x29c>)
 80013c6:	f000 fe97 	bl	80020f8 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1,100);
 80013ca:	2164      	movs	r1, #100	@ 0x64
 80013cc:	4823      	ldr	r0, [pc, #140]	@ (800145c <main+0x29c>)
 80013ce:	f000 ff41 	bl	8002254 <HAL_ADC_PollForConversion>
	        portval=HAL_ADC_GetValue(&hadc1);
 80013d2:	4822      	ldr	r0, [pc, #136]	@ (800145c <main+0x29c>)
 80013d4:	f001 f844 	bl	8002460 <HAL_ADC_GetValue>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <main+0x2a0>)
 80013dc:	6013      	str	r3, [r2, #0]
	        sendHTTPRequest();
 80013de:	f7ff fdc7 	bl	8000f70 <sendHTTPRequest>
	sprintf(data,"ADC VALUE=%d\r\n",portval);
	sprintf(data_seg,"%d",portval);*/



    for(int i=0;i<5000;i++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013e6:	e01d      	b.n	8001424 <main+0x264>
		send_port(_LED_0F[val[2]], 0b0100);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3330      	adds	r3, #48	@ 0x30
 80013ec:	443b      	add	r3, r7
 80013ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013f2:	2104      	movs	r1, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fc43 	bl	8000c80 <send_port>
		send_port(_LED_0F[val[1]], 0b0010);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3330      	adds	r3, #48	@ 0x30
 80013fe:	443b      	add	r3, r7
 8001400:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc3a 	bl	8000c80 <send_port>
		send_port(_LED_0F[val[0]], 0b0001);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	3330      	adds	r3, #48	@ 0x30
 8001410:	443b      	add	r3, r7
 8001412:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc31 	bl	8000c80 <send_port>
    for(int i=0;i<5000;i++){
 800141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001420:	3301      	adds	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001426:	f241 3287 	movw	r2, #4999	@ 0x1387
 800142a:	4293      	cmp	r3, r2
 800142c:	dddc      	ble.n	80013e8 <main+0x228>
	  if(check==1){   //every 30second start temp and humidity check
 800142e:	e77a      	b.n	8001326 <main+0x166>
 8001430:	20000268 	.word	0x20000268
 8001434:	20000220 	.word	0x20000220
 8001438:	200002b0 	.word	0x200002b0
 800143c:	40010800 	.word	0x40010800
 8001440:	20000360 	.word	0x20000360
 8001444:	20000361 	.word	0x20000361
 8001448:	20000362 	.word	0x20000362
 800144c:	20000363 	.word	0x20000363
 8001450:	20000364 	.word	0x20000364
 8001454:	cccccccd 	.word	0xcccccccd
 8001458:	2000034c 	.word	0x2000034c
 800145c:	200001f0 	.word	0x200001f0
 8001460:	20000340 	.word	0x20000340

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	@ 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146e:	2228      	movs	r2, #40	@ 0x28
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fa71 	bl	800595a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a2:	2301      	movs	r3, #1
 80014a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fce4 	bl	8002e88 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014c6:	f000 fa77 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2102      	movs	r1, #2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 ff50 	bl	800338c <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014f2:	f000 fa61 	bl	80019b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014f6:	2302      	movs	r3, #2
 80014f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f8d0 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800150e:	f000 fa53 	bl	80019b8 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_ADC1_Init+0x74>)
 800152e:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <MX_ADC1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_ADC1_Init+0x74>)
 800153a:	2201      	movs	r2, #1
 800153c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001546:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800154a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_ADC1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_ADC1_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_ADC1_Init+0x74>)
 800155a:	f000 fcf5 	bl	8001f48 <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 fa28 	bl	80019b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001568:	2308      	movs	r3, #8
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156c:	2301      	movs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_ADC1_Init+0x74>)
 800157a:	f000 ff7d 	bl	8002478 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001584:	f000 fa18 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f0 	.word	0x200001f0
 8001594:	40012400 	.word	0x40012400

08001598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <MX_TIM1_Init+0x9c>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015bc:	2247      	movs	r2, #71	@ 0x47
 80015be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015e2:	f002 f9cd 	bl	8003980 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 f9e4 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <MX_TIM1_Init+0x98>)
 80015fe:	f002 fbb3 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001608:	f000 f9d6 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_TIM1_Init+0x98>)
 800161a:	f002 fd89 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001624:	f000 f9c8 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000220 	.word	0x20000220
 8001634:	40012c00 	.word	0x40012c00

08001638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <MX_TIM2_Init+0x98>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800165a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800165c:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_TIM2_Init+0x98>)
 800165e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001662:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_TIM2_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_TIM2_Init+0x98>)
 800166c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001670:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_TIM2_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_TIM2_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167e:	4814      	ldr	r0, [pc, #80]	@ (80016d0 <MX_TIM2_Init+0x98>)
 8001680:	f002 f97e 	bl	8003980 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800168a:	f000 f995 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001692:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_TIM2_Init+0x98>)
 800169c:	f002 fb64 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016a6:	f000 f987 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <MX_TIM2_Init+0x98>)
 80016b8:	f002 fd3a 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016c2:	f000 f979 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000268 	.word	0x20000268

080016d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_TIM3_Init+0x94>)
 80016f2:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <MX_TIM3_Init+0x98>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_TIM3_Init+0x94>)
 80016f8:	2247      	movs	r2, #71	@ 0x47
 80016fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_TIM3_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001718:	f002 f932 	bl	8003980 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 f949 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001734:	f002 fb18 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f93b 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001750:	f002 fcee 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800175a:	f000 f92d 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002b0 	.word	0x200002b0
 800176c:	40000400 	.word	0x40000400

08001770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <MX_USART1_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_USART1_UART_Init+0x4c>)
 80017a8:	f002 fd32 	bl	8004210 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f000 f901 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002f8 	.word	0x200002f8
 80017c0:	40013800 	.word	0x40013800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a59      	ldr	r2, [pc, #356]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f0:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a53      	ldr	r2, [pc, #332]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <MX_GPIO_Init+0x180>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b4e      	ldr	r3, [pc, #312]	@ (8001944 <MX_GPIO_Init+0x180>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a4d      	ldr	r2, [pc, #308]	@ (8001944 <MX_GPIO_Init+0x180>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b4b      	ldr	r3, [pc, #300]	@ (8001944 <MX_GPIO_Init+0x180>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <MX_GPIO_Init+0x180>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a47      	ldr	r2, [pc, #284]	@ (8001944 <MX_GPIO_Init+0x180>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b45      	ldr	r3, [pc, #276]	@ (8001944 <MX_GPIO_Init+0x180>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gpio_led_GPIO_Port, gpio_led_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183e:	4842      	ldr	r0, [pc, #264]	@ (8001948 <MX_GPIO_Init+0x184>)
 8001840:	f001 fb09 	bl	8002e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800184a:	4840      	ldr	r0, [pc, #256]	@ (800194c <MX_GPIO_Init+0x188>)
 800184c:	f001 fb03 	bl	8002e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gpio_led2_GPIO_Port, gpio_led2_Pin, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001856:	483e      	ldr	r0, [pc, #248]	@ (8001950 <MX_GPIO_Init+0x18c>)
 8001858:	f001 fafd 	bl	8002e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001862:	483b      	ldr	r0, [pc, #236]	@ (8001950 <MX_GPIO_Init+0x18c>)
 8001864:	f001 faf7 	bl	8002e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186e:	4837      	ldr	r0, [pc, #220]	@ (800194c <MX_GPIO_Init+0x188>)
 8001870:	f001 faf1 	bl	8002e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : gpio_led_Pin */
  GPIO_InitStruct.Pin = gpio_led_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(gpio_led_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	482e      	ldr	r0, [pc, #184]	@ (8001948 <MX_GPIO_Init+0x184>)
 800188e:	f001 f947 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : gpio_sw_Pin */
  GPIO_InitStruct.Pin = gpio_sw_Pin;
 8001892:	2301      	movs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(gpio_sw_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	482a      	ldr	r0, [pc, #168]	@ (8001950 <MX_GPIO_Init+0x18c>)
 80018a6:	f001 f93b 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 80018aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4822      	ldr	r0, [pc, #136]	@ (800194c <MX_GPIO_Init+0x188>)
 80018c4:	f001 f92c 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : gpio_led2_Pin */
  GPIO_InitStruct.Pin = gpio_led2_Pin;
 80018c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(gpio_led2_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4619      	mov	r1, r3
 80018e0:	481b      	ldr	r0, [pc, #108]	@ (8001950 <MX_GPIO_Init+0x18c>)
 80018e2:	f001 f91d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4815      	ldr	r0, [pc, #84]	@ (8001950 <MX_GPIO_Init+0x18c>)
 80018fc:	f001 f910 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2302      	movs	r3, #2
 8001910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_GPIO_Init+0x18c>)
 800191a:	f001 f901 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800191e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_GPIO_Init+0x188>)
 8001938:	f001 f8f2 	bl	8002b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	40011000 	.word	0x40011000
 800194c:	40010c00 	.word	0x40010c00
 8001950:	40010800 	.word	0x40010800

08001954 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2) //every 1 second
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001964:	d11e      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(count==30){ //30second
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b1e      	cmp	r3, #30
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001974:	480e      	ldr	r0, [pc, #56]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001976:	f001 fa6e 	bl	8002e56 <HAL_GPIO_WritePin>
			count=0;
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
			check=1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
			count++;
			check=0;
		}

	}
}
 8001986:	e00d      	b.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x50>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8001988:	2201      	movs	r2, #1
 800198a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800198e:	4808      	ldr	r0, [pc, #32]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001990:	f001 fa61 	bl	8002e56 <HAL_GPIO_WritePin>
			count++;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 800199c:	6013      	str	r3, [r2, #0]
			check=0;
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000348 	.word	0x20000348
 80019b0:	40011000 	.word	0x40011000
 80019b4:	2000034c 	.word	0x2000034c

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <Error_Handler+0x8>

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_MspInit+0x60>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_MspInit+0x60>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <HAL_ADC_MspInit+0x6c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d121      	bne.n	8001a8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a0c      	ldr	r2, [pc, #48]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_ADC_MspInit+0x70>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a88:	f001 f84a 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40012400 	.word	0x40012400
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010c00 	.word	0x40010c00

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	@ (8001b2c <HAL_TIM_Base_MspInit+0x8c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10c      	bne.n	8001acc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ab8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aca:	e02a      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad4:	d114      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201c      	movs	r0, #28
 8001af4:	f000 ff2b 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af8:	201c      	movs	r0, #28
 8001afa:	f000 ff44 	bl	8002986 <HAL_NVIC_EnableIRQ>
}
 8001afe:	e010      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_TIM_Base_MspInit+0x94>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10b      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_UART_MspInit+0x9c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d139      	bne.n	8001bcc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_UART_MspInit+0xa0>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480f      	ldr	r0, [pc, #60]	@ (8001bdc <HAL_UART_MspInit+0xa4>)
 8001b9e:	f000 ffbf 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <HAL_UART_MspInit+0xa4>)
 8001bb8:	f000 ffb2 	bl	8002b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2025      	movs	r0, #37	@ 0x25
 8001bc2:	f000 fec4 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc6:	2025      	movs	r0, #37	@ 0x25
 8001bc8:	f000 fedd 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010800 	.word	0x40010800

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f94a 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM2_IRQHandler+0x10>)
 8001c3e:	f001 ff8b 	bl	8003b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000268 	.word	0x20000268

08001c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <USART1_IRQHandler+0x10>)
 8001c52:	f002 fbb1 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002f8 	.word	0x200002f8

08001c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return 1;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <_kill>:

int _kill(int pid, int sig)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c78:	f003 fec2 	bl	8005a00 <__errno>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2216      	movs	r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_exit>:

void _exit (int status)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c96:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffe7 	bl	8001c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <_exit+0x12>

08001ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e00a      	b.n	8001ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb6:	f3af 8000 	nop.w
 8001cba:	4601      	mov	r1, r0
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	b2ca      	uxtb	r2, r1
 8001cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf0      	blt.n	8001cb6 <_read+0x12>
  }

  return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e009      	b.n	8001d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf1      	blt.n	8001cf0 <_write+0x12>
  }
  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_close>:

int _close(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_isatty>:

int _isatty(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f003 fe2a 	bl	8005a00 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20005000 	.word	0x20005000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	2000036c 	.word	0x2000036c
 8001de0:	200004c0 	.word	0x200004c0

08001de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df0:	f7ff fff8 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df4:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001df6:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e0c:	4c09      	ldr	r4, [pc, #36]	@ (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f003 fdf7 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7ff f9cf 	bl	80011c0 <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e2c:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8001e30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e34:	200004c0 	.word	0x200004c0

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fd73 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fdb4 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd8b 	bl	80029a2 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 fd53 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_IncTick+0x1c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a03      	ldr	r2, [pc, #12]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000370 	.word	0x20000370

08001eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <HAL_GetTick+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000370 	.word	0x20000370

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fff0 	bl	8001eec <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffe0 	bl	8001eec <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008

08001f48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0be      	b.n	80020e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fd4e 	bl	8001a28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fbc5 	bl	800271c <ADC_ConversionStop_Disable>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8099 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8095 	bne.w	80020d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fb4:	f023 0302 	bic.w	r3, r3, #2
 8001fb8:	f043 0202 	orr.w	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7b1b      	ldrb	r3, [r3, #12]
 8001fce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_Init+0xa2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_ADC_Init+0xa8>
 8001fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_Init+0xaa>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7d1b      	ldrb	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d119      	bne.n	8002034 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	3b01      	subs	r3, #1
 800200e:	035a      	lsls	r2, r3, #13
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e00b      	b.n	8002034 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_ADC_Init+0x1a8>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002064:	d003      	beq.n	800206e <HAL_ADC_Init+0x126>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d104      	bne.n	8002078 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	3b01      	subs	r3, #1
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	430a      	orrs	r2, r1
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_ADC_Init+0x1ac>)
 8002094:	4013      	ands	r3, r2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b2:	e018      	b.n	80020e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f023 0312 	bic.w	r3, r3, #18
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020d4:	e007      	b.n	80020e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	ffe1f7fd 	.word	0xffe1f7fd
 80020f4:	ff1f0efe 	.word	0xff1f0efe

080020f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Start+0x1a>
 800210e:	2302      	movs	r3, #2
 8002110:	e098      	b.n	8002244 <HAL_ADC_Start+0x14c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 faa4 	bl	8002668 <ADC_Enable>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8087 	bne.w	800223a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a41      	ldr	r2, [pc, #260]	@ (800224c <HAL_ADC_Start+0x154>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d105      	bne.n	8002156 <HAL_ADC_Start+0x5e>
 800214a:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_ADC_Start+0x158>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d115      	bne.n	8002182 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d026      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002178:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002180:	e01d      	b.n	80021be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <HAL_ADC_Start+0x158>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_ADC_Start+0xaa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <HAL_ADC_Start+0x154>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_ADC_Start+0xc6>
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_ADC_Start+0x158>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	f023 0206 	bic.w	r2, r3, #6
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021d6:	e002      	b.n	80021de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0202 	mvn.w	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021fe:	d113      	bne.n	8002228 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_ADC_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d105      	bne.n	8002216 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_ADC_Start+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	e00c      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e003      	b.n	8002242 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40012800 	.word	0x40012800
 8002250:	40012400 	.word	0x40012400

08002254 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800226a:	f7ff fe3f 	bl	8001eec <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0d3      	b.n	800243e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d131      	bne.n	8002308 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d12a      	bne.n	8002308 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022b2:	e021      	b.n	80022f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d01d      	beq.n	80022f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x7e>
 80022c2:	f7ff fe13 	bl	8001eec <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d212      	bcs.n	80022f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0a2      	b.n	800243e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0d6      	beq.n	80022b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002306:	e070      	b.n	80023ea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002308:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <HAL_ADC_PollForConversion+0x1f4>)
 800230a:	681c      	ldr	r4, [r3, #0]
 800230c:	2002      	movs	r0, #2
 800230e:	f001 fa81 	bl	8003814 <HAL_RCCEx_GetPeriphCLKFreq>
 8002312:	4603      	mov	r3, r0
 8002314:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6919      	ldr	r1, [r3, #16]
 800231e:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_ADC_PollForConversion+0x1f8>)
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_ADC_PollForConversion+0x104>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	4b48      	ldr	r3, [pc, #288]	@ (8002450 <HAL_ADC_PollForConversion+0x1fc>)
 800232e:	400b      	ands	r3, r1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d111      	bne.n	8002358 <HAL_ADC_PollForConversion+0x104>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	4b46      	ldr	r3, [pc, #280]	@ (8002454 <HAL_ADC_PollForConversion+0x200>)
 800233c:	400b      	ands	r3, r1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_ADC_PollForConversion+0x100>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	4b43      	ldr	r3, [pc, #268]	@ (8002458 <HAL_ADC_PollForConversion+0x204>)
 800234a:	400b      	ands	r3, r1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_PollForConversion+0x100>
 8002350:	2314      	movs	r3, #20
 8002352:	e020      	b.n	8002396 <HAL_ADC_PollForConversion+0x142>
 8002354:	2329      	movs	r3, #41	@ 0x29
 8002356:	e01e      	b.n	8002396 <HAL_ADC_PollForConversion+0x142>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6919      	ldr	r1, [r3, #16]
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <HAL_ADC_PollForConversion+0x200>)
 8002360:	400b      	ands	r3, r1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_ADC_PollForConversion+0x120>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68d9      	ldr	r1, [r3, #12]
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <HAL_ADC_PollForConversion+0x204>)
 800236e:	400b      	ands	r3, r1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <HAL_ADC_PollForConversion+0x13c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_ADC_PollForConversion+0x208>)
 800237c:	400b      	ands	r3, r1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_ADC_PollForConversion+0x140>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68d9      	ldr	r1, [r3, #12]
 8002388:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_ADC_PollForConversion+0x208>)
 800238a:	400b      	ands	r3, r1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_PollForConversion+0x140>
 8002390:	2354      	movs	r3, #84	@ 0x54
 8002392:	e000      	b.n	8002396 <HAL_ADC_PollForConversion+0x142>
 8002394:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800239c:	e021      	b.n	80023e2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d01a      	beq.n	80023dc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_PollForConversion+0x168>
 80023ac:	f7ff fd9e 	bl	8001eec <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d20f      	bcs.n	80023dc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d90b      	bls.n	80023dc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f043 0204 	orr.w	r2, r3, #4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e030      	b.n	800243e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3301      	adds	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d8d9      	bhi.n	800239e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f06f 0212 	mvn.w	r2, #18
 80023f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800240a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800240e:	d115      	bne.n	800243c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002414:	2b00      	cmp	r3, #0
 8002416:	d111      	bne.n	800243c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000
 800244c:	24924924 	.word	0x24924924
 8002450:	00924924 	.word	0x00924924
 8002454:	12492492 	.word	0x12492492
 8002458:	00492492 	.word	0x00492492
 800245c:	00249249 	.word	0x00249249

08002460 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x20>
 8002494:	2302      	movs	r3, #2
 8002496:	e0dc      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1da>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d81c      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b05      	subs	r3, #5
 80024ba:	221f      	movs	r2, #31
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4019      	ands	r1, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b05      	subs	r3, #5
 80024d4:	fa00 f203 	lsl.w	r2, r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	635a      	str	r2, [r3, #52]	@ 0x34
 80024e0:	e03c      	b.n	800255c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d81c      	bhi.n	8002524 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b23      	subs	r3, #35	@ 0x23
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	4019      	ands	r1, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b23      	subs	r3, #35	@ 0x23
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
 8002522:	e01b      	b.n	800255c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b41      	subs	r3, #65	@ 0x41
 8002536:	221f      	movs	r2, #31
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	4019      	ands	r1, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b41      	subs	r3, #65	@ 0x41
 8002550:	fa00 f203 	lsl.w	r2, r0, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d91c      	bls.n	800259e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	3b1e      	subs	r3, #30
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4019      	ands	r1, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6898      	ldr	r0, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	3b1e      	subs	r3, #30
 8002590:	fa00 f203 	lsl.w	r2, r0, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e019      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d003      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d132      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_ADC_ConfigChannel+0x1e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d125      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d126      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002608:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d11a      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <HAL_ADC_ConfigChannel+0x1e8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <HAL_ADC_ConfigChannel+0x1ec>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9a      	lsrs	r2, r3, #18
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_ConfigChannel+0x1b2>
 8002636:	e007      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012400 	.word	0x40012400
 8002660:	20000000 	.word	0x20000000
 8002664:	431bde83 	.word	0x431bde83

08002668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d040      	beq.n	8002708 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <ADC_Enable+0xac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <ADC_Enable+0xb0>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a4:	e002      	b.n	80026ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f9      	bne.n	80026a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026b2:	f7ff fc1b 	bl	8001eec <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b8:	e01f      	b.n	80026fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ba:	f7ff fc17 	bl	8001eec <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d918      	bls.n	80026fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d011      	beq.n	80026fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d1d8      	bne.n	80026ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000
 8002718:	431bde83 	.word	0x431bde83

0800271c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d12e      	bne.n	8002794 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002746:	f7ff fbd1 	bl	8001eec <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800274c:	e01b      	b.n	8002786 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800274e:	f7ff fbcd 	bl	8001eec <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d914      	bls.n	8002786 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10d      	bne.n	8002786 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e007      	b.n	8002796 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d0dc      	beq.n	800274e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4906      	ldr	r1, [pc, #24]	@ (8002838 <__NVIC_EnableIRQ+0x34>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff90 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff2d 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff42 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff90 	bl	8002890 <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5f 	bl	800283c <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff35 	bl	8002804 <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d008      	beq.n	80029e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2204      	movs	r2, #4
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e020      	b.n	8002a26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020e 	bic.w	r2, r2, #14
 80029f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e051      	b.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <HAL_DMA_Abort_IT+0xd4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d029      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0xa2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a21      	ldr	r2, [pc, #132]	@ (8002b08 <HAL_DMA_Abort_IT+0xd8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_Abort_IT+0x9e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_DMA_Abort_IT+0xdc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01a      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x98>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <HAL_DMA_Abort_IT+0xe0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x92>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_DMA_Abort_IT+0xe4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00a      	beq.n	8002abc <HAL_DMA_Abort_IT+0x8c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <HAL_DMA_Abort_IT+0xe8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <HAL_DMA_Abort_IT+0x86>
 8002ab0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ab4:	e00e      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aba:	e00b      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ac0:	e008      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	e005      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002acc:	e002      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	e000      	b.n	8002ad4 <HAL_DMA_Abort_IT+0xa4>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_DMA_Abort_IT+0xec>)
 8002ad6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
    } 
  }
  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020008 	.word	0x40020008
 8002b08:	4002001c 	.word	0x4002001c
 8002b0c:	40020030 	.word	0x40020030
 8002b10:	40020044 	.word	0x40020044
 8002b14:	40020058 	.word	0x40020058
 8002b18:	4002006c 	.word	0x4002006c
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b08b      	sub	sp, #44	@ 0x2c
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e169      	b.n	8002e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b34:	2201      	movs	r2, #1
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 8158 	bne.w	8002e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc0 <HAL_GPIO_Init+0x2a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d05e      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
 8002b5c:	4a98      	ldr	r2, [pc, #608]	@ (8002dc0 <HAL_GPIO_Init+0x2a0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d875      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b62:	4a98      	ldr	r2, [pc, #608]	@ (8002dc4 <HAL_GPIO_Init+0x2a4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d058      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
 8002b68:	4a96      	ldr	r2, [pc, #600]	@ (8002dc4 <HAL_GPIO_Init+0x2a4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d86f      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b6e:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <HAL_GPIO_Init+0x2a8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d052      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
 8002b74:	4a94      	ldr	r2, [pc, #592]	@ (8002dc8 <HAL_GPIO_Init+0x2a8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d869      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b7a:	4a94      	ldr	r2, [pc, #592]	@ (8002dcc <HAL_GPIO_Init+0x2ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d04c      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
 8002b80:	4a92      	ldr	r2, [pc, #584]	@ (8002dcc <HAL_GPIO_Init+0x2ac>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d863      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b86:	4a92      	ldr	r2, [pc, #584]	@ (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d046      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
 8002b8c:	4a90      	ldr	r2, [pc, #576]	@ (8002dd0 <HAL_GPIO_Init+0x2b0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d85d      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d82a      	bhi.n	8002bec <HAL_GPIO_Init+0xcc>
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d859      	bhi.n	8002c4e <HAL_GPIO_Init+0x12e>
 8002b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <HAL_GPIO_Init+0x80>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002c1b 	.word	0x08002c1b
 8002ba4:	08002bf5 	.word	0x08002bf5
 8002ba8:	08002c07 	.word	0x08002c07
 8002bac:	08002c49 	.word	0x08002c49
 8002bb0:	08002c4f 	.word	0x08002c4f
 8002bb4:	08002c4f 	.word	0x08002c4f
 8002bb8:	08002c4f 	.word	0x08002c4f
 8002bbc:	08002c4f 	.word	0x08002c4f
 8002bc0:	08002c4f 	.word	0x08002c4f
 8002bc4:	08002c4f 	.word	0x08002c4f
 8002bc8:	08002c4f 	.word	0x08002c4f
 8002bcc:	08002c4f 	.word	0x08002c4f
 8002bd0:	08002c4f 	.word	0x08002c4f
 8002bd4:	08002c4f 	.word	0x08002c4f
 8002bd8:	08002c4f 	.word	0x08002c4f
 8002bdc:	08002c4f 	.word	0x08002c4f
 8002be0:	08002c4f 	.word	0x08002c4f
 8002be4:	08002bfd 	.word	0x08002bfd
 8002be8:	08002c11 	.word	0x08002c11
 8002bec:	4a79      	ldr	r2, [pc, #484]	@ (8002dd4 <HAL_GPIO_Init+0x2b4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bf2:	e02c      	b.n	8002c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e029      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	3304      	adds	r3, #4
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e024      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	623b      	str	r3, [r7, #32]
          break;
 8002c0e:	e01f      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	330c      	adds	r3, #12
 8002c16:	623b      	str	r3, [r7, #32]
          break;
 8002c18:	e01a      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c22:	2304      	movs	r3, #4
 8002c24:	623b      	str	r3, [r7, #32]
          break;
 8002c26:	e013      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c30:	2308      	movs	r3, #8
 8002c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	611a      	str	r2, [r3, #16]
          break;
 8002c3a:	e009      	b.n	8002c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	615a      	str	r2, [r3, #20]
          break;
 8002c46:	e003      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
          break;
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x130>
          break;
 8002c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2bff      	cmp	r3, #255	@ 0xff
 8002c54:	d801      	bhi.n	8002c5a <HAL_GPIO_Init+0x13a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	e001      	b.n	8002c5e <HAL_GPIO_Init+0x13e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2bff      	cmp	r3, #255	@ 0xff
 8002c64:	d802      	bhi.n	8002c6c <HAL_GPIO_Init+0x14c>
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	e002      	b.n	8002c72 <HAL_GPIO_Init+0x152>
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	3b08      	subs	r3, #8
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	210f      	movs	r1, #15
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80b1 	beq.w	8002e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd8 <HAL_GPIO_Init+0x2b8>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd8 <HAL_GPIO_Init+0x2b8>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6193      	str	r3, [r2, #24]
 8002cac:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd8 <HAL_GPIO_Init+0x2b8>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cb8:	4a48      	ldr	r2, [pc, #288]	@ (8002ddc <HAL_GPIO_Init+0x2bc>)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a40      	ldr	r2, [pc, #256]	@ (8002de0 <HAL_GPIO_Init+0x2c0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <HAL_GPIO_Init+0x1ec>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8002de4 <HAL_GPIO_Init+0x2c4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00d      	beq.n	8002d08 <HAL_GPIO_Init+0x1e8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3e      	ldr	r2, [pc, #248]	@ (8002de8 <HAL_GPIO_Init+0x2c8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <HAL_GPIO_Init+0x1e4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8002dec <HAL_GPIO_Init+0x2cc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_GPIO_Init+0x1e0>
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e006      	b.n	8002d0e <HAL_GPIO_Init+0x1ee>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e004      	b.n	8002d0e <HAL_GPIO_Init+0x1ee>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x1ee>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_GPIO_Init+0x1ee>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d10:	f002 0203 	and.w	r2, r2, #3
 8002d14:	0092      	lsls	r2, r2, #2
 8002d16:	4093      	lsls	r3, r2
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d1e:	492f      	ldr	r1, [pc, #188]	@ (8002ddc <HAL_GPIO_Init+0x2bc>)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	492c      	ldr	r1, [pc, #176]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d46:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4928      	ldr	r1, [pc, #160]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d60:	4b23      	ldr	r3, [pc, #140]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4922      	ldr	r1, [pc, #136]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d6e:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	491e      	ldr	r1, [pc, #120]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4918      	ldr	r1, [pc, #96]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d96:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4914      	ldr	r1, [pc, #80]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d021      	beq.n	8002df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	490e      	ldr	r1, [pc, #56]	@ (8002df0 <HAL_GPIO_Init+0x2d0>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e021      	b.n	8002e02 <HAL_GPIO_Init+0x2e2>
 8002dbe:	bf00      	nop
 8002dc0:	10320000 	.word	0x10320000
 8002dc4:	10310000 	.word	0x10310000
 8002dc8:	10220000 	.word	0x10220000
 8002dcc:	10210000 	.word	0x10210000
 8002dd0:	10120000 	.word	0x10120000
 8002dd4:	10110000 	.word	0x10110000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010800 	.word	0x40010800
 8002de4:	40010c00 	.word	0x40010c00
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40011400 	.word	0x40011400
 8002df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_GPIO_Init+0x304>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4909      	ldr	r1, [pc, #36]	@ (8002e24 <HAL_GPIO_Init+0x304>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	3301      	adds	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f47f ae8e 	bne.w	8002b34 <HAL_GPIO_Init+0x14>
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	372c      	adds	r7, #44	@ 0x2c
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e001      	b.n	8002e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]
 8002e62:	4613      	mov	r3, r2
 8002e64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e66:	787b      	ldrb	r3, [r7, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e72:	e003      	b.n	8002e7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	041a      	lsls	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	611a      	str	r2, [r3, #16]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e272      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b92      	ldr	r3, [pc, #584]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00c      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d112      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d168      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e24c      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x76>
 8002ef0:	4b80      	ldr	r3, [pc, #512]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b78      	ldr	r3, [pc, #480]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a77      	ldr	r2, [pc, #476]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xbc>
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a71      	ldr	r2, [pc, #452]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6f      	ldr	r3, [pc, #444]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6a      	ldr	r2, [pc, #424]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a67      	ldr	r2, [pc, #412]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe ffc2 	bl	8001eec <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe ffbe 	bl	8001eec <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e200      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe4>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe ffae 	bl	8001eec <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe ffaa 	bl	8001eec <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1ec      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b53      	ldr	r3, [pc, #332]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x10c>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fce:	4b49      	ldr	r3, [pc, #292]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
 8002fda:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c0      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4939      	ldr	r1, [pc, #228]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCC_OscConfig+0x270>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe ff63 	bl	8001eec <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe ff5f 	bl	8001eec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1a1      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4927      	ldr	r1, [pc, #156]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <HAL_RCC_OscConfig+0x270>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe ff42 	bl	8001eec <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe ff3e 	bl	8001eec <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e180      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03a      	beq.n	800310c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b17      	ldr	r3, [pc, #92]	@ (80030fc <HAL_RCC_OscConfig+0x274>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe ff22 	bl	8001eec <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe ff1e 	bl	8001eec <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e160      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 face 	bl	800366c <RCC_Delay>
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_RCC_OscConfig+0x274>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe ff08 	bl	8001eec <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030de:	e00f      	b.n	8003100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe ff04 	bl	8001eec <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d908      	bls.n	8003100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e146      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	42420000 	.word	0x42420000
 80030fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b92      	ldr	r3, [pc, #584]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e9      	bne.n	80030e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a6 	beq.w	8003266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b8b      	ldr	r3, [pc, #556]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b88      	ldr	r3, [pc, #544]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a87      	ldr	r2, [pc, #540]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b85      	ldr	r3, [pc, #532]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b82      	ldr	r3, [pc, #520]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b7f      	ldr	r3, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7e      	ldr	r2, [pc, #504]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fec5 	bl	8001eec <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fec1 	bl	8001eec <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	@ 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e103      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b75      	ldr	r3, [pc, #468]	@ (8003350 <HAL_RCC_OscConfig+0x4c8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x312>
 800318c:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a6e      	ldr	r2, [pc, #440]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e02d      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031a2:	4b6a      	ldr	r3, [pc, #424]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a69      	ldr	r2, [pc, #420]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b67      	ldr	r3, [pc, #412]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a66      	ldr	r2, [pc, #408]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x356>
 80031c4:	4b61      	ldr	r3, [pc, #388]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a60      	ldr	r2, [pc, #384]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4b5e      	ldr	r3, [pc, #376]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a5d      	ldr	r2, [pc, #372]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031de:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a5a      	ldr	r2, [pc, #360]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b58      	ldr	r3, [pc, #352]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fe75 	bl	8001eec <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fe71 	bl	8001eec <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0b1      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b4b      	ldr	r3, [pc, #300]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x37e>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fe5f 	bl	8001eec <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fe5b 	bl	8001eec <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e09b      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b3c      	ldr	r3, [pc, #240]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a3b      	ldr	r2, [pc, #236]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	4b36      	ldr	r3, [pc, #216]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d061      	beq.n	8003340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d146      	bne.n	8003312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fe2f 	bl	8001eec <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fe2b 	bl	8001eec <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e06d      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	4b29      	ldr	r3, [pc, #164]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4921      	ldr	r1, [pc, #132]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a19      	ldr	r1, [r3, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	430b      	orrs	r3, r1
 80032de:	491b      	ldr	r1, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fdff 	bl	8001eec <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fdfb 	bl	8001eec <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e03d      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46a>
 8003310:	e035      	b.n	800337e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe fde8 	bl	8001eec <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fde4 	bl	8001eec <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e026      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_RCC_OscConfig+0x4c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x498>
 800333e:	e01e      	b.n	800337e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e019      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCC_OscConfig+0x500>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0d0      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b67      	ldr	r3, [pc, #412]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	4965      	ldr	r1, [pc, #404]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b63      	ldr	r3, [pc, #396]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b8      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e8:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003400:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a52      	ldr	r2, [pc, #328]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800340a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b50      	ldr	r3, [pc, #320]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	494d      	ldr	r1, [pc, #308]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d040      	beq.n	80034ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d115      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e073      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4936      	ldr	r1, [pc, #216]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fe fd36 	bl	8001eec <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe fd32 	bl	8001eec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e053      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d210      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 0207 	bic.w	r2, r3, #7
 80034c2:	4922      	ldr	r1, [pc, #136]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e032      	b.n	8003542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4916      	ldr	r1, [pc, #88]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003506:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490e      	ldr	r1, [pc, #56]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351a:	f000 f821 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490a      	ldr	r1, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <HAL_RCC_ClockConfig+0x1cc>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1d0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fc94 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	08007c6c 	.word	0x08007c6c
 8003558:	20000000 	.word	0x20000000
 800355c:	20000004 	.word	0x20000004

08003560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357a:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x30>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x36>
 800358e:	e027      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003592:	613b      	str	r3, [r7, #16]
      break;
 8003594:	e027      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0c5b      	lsrs	r3, r3, #17
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	4a11      	ldr	r2, [pc, #68]	@ (8003600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80035c2:	fb03 f202 	mul.w	r2, r3, r2
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e004      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	613b      	str	r3, [r7, #16]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80035e2:	613b      	str	r3, [r7, #16]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	693b      	ldr	r3, [r7, #16]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	007a1200 	.word	0x007a1200
 80035fc:	08007c84 	.word	0x08007c84
 8003600:	08007c94 	.word	0x08007c94
 8003604:	003d0900 	.word	0x003d0900

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b02      	ldr	r3, [pc, #8]	@ (8003618 <HAL_RCC_GetHCLKFreq+0x10>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003620:	f7ff fff2 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	@ (8003640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08007c7c 	.word	0x08007c7c

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff ffde 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08007c7c 	.word	0x08007c7c

0800366c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <RCC_Delay+0x34>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <RCC_Delay+0x38>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a5b      	lsrs	r3, r3, #9
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003688:	bf00      	nop
  }
  while (Delay --);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <RCC_Delay+0x1c>
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000000 	.word	0x20000000
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d07d      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036de:	61d3      	str	r3, [r2, #28]
 80036e0:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b46      	ldr	r3, [pc, #280]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d118      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fc:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a42      	ldr	r2, [pc, #264]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003708:	f7fe fbf0 	bl	8001eec <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe fbec 	bl	8001eec <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e06d      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b3a      	ldr	r3, [pc, #232]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372e:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003736:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02e      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d027      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003754:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003756:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003762:	4a29      	ldr	r2, [pc, #164]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d014      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fbbb 	bl	8001eec <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fbb7 	bl	8001eec <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e036      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4917      	ldr	r1, [pc, #92]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	490b      	ldr	r1, [pc, #44]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4904      	ldr	r1, [pc, #16]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
 8003810:	42420440 	.word	0x42420440

08003814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b10      	cmp	r3, #16
 800383a:	f200 808a 	bhi.w	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d045      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d075      	beq.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800384a:	e082      	b.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800384c:	4b46      	ldr	r3, [pc, #280]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003852:	4b45      	ldr	r3, [pc, #276]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07b      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0c9b      	lsrs	r3, r3, #18
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	4a41      	ldr	r2, [pc, #260]	@ (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0c5b      	lsrs	r3, r3, #17
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003890:	4a38      	ldr	r2, [pc, #224]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fbb2 f2f3 	udiv	r2, r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e004      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b8:	d102      	bne.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	61bb      	str	r3, [r7, #24]
      break;
 80038be:	e04a      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	61bb      	str	r3, [r7, #24]
      break;
 80038ce:	e042      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	d108      	bne.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e01f      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fe:	d109      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800390c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e00f      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d11c      	bne.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800392c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003930:	61bb      	str	r3, [r7, #24]
      break;
 8003932:	e012      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003934:	e011      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003936:	f7ff fe85 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0b9b      	lsrs	r3, r3, #14
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
      break;
 8003950:	e004      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800395a:	bf00      	nop
    }
  }
  return (frequency);
 800395c:	69bb      	ldr	r3, [r7, #24]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	08007c98 	.word	0x08007c98
 8003970:	08007ca8 	.word	0x08007ca8
 8003974:	007a1200 	.word	0x007a1200
 8003978:	003d0900 	.word	0x003d0900
 800397c:	aaaaaaab 	.word	0xaaaaaaab

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe f87a 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fabe 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d001      	beq.n	8003a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <HAL_TIM_Base_Start+0x88>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_TIM_Base_Start+0x48>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a52:	d009      	beq.n	8003a68 <HAL_TIM_Base_Start+0x48>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <HAL_TIM_Base_Start+0x8c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_Base_Start+0x48>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <HAL_TIM_Base_Start+0x90>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d010      	beq.n	8003a9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	e007      	b.n	8003a9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800

08003ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e03a      	b.n	8003b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <HAL_TIM_Base_Start_IT+0x98>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a14      	ldr	r2, [pc, #80]	@ (8003b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x58>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a13      	ldr	r2, [pc, #76]	@ (8003b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d010      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	e007      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800

08003b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0202 	mvn.w	r2, #2
 8003b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9b4 	bl	8003f08 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9a7 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f9b6 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0204 	mvn.w	r2, #4
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f98a 	bl	8003f08 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f97d 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f98c 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0208 	mvn.w	r2, #8
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f960 	bl	8003f08 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f953 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f962 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0210 	mvn.w	r2, #16
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2208      	movs	r2, #8
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f936 	bl	8003f08 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f929 	bl	8003ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f938 	bl	8003f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0201 	mvn.w	r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fe3c 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf4:	2b80      	cmp	r3, #128	@ 0x80
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa7b 	bl	80041fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d12:	2b40      	cmp	r3, #64	@ 0x40
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8fc 	bl	8003f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0220 	mvn.w	r2, #32
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa46 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIM_ConfigClockSource+0x1c>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e0b4      	b.n	8003eee <HAL_TIM_ConfigClockSource+0x186>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbc:	d03e      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0xd4>
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc2:	f200 8087 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dca:	f000 8086 	beq.w	8003eda <HAL_TIM_ConfigClockSource+0x172>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d87f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b70      	cmp	r3, #112	@ 0x70
 8003dd6:	d01a      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0xa6>
 8003dd8:	2b70      	cmp	r3, #112	@ 0x70
 8003dda:	d87b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b60      	cmp	r3, #96	@ 0x60
 8003dde:	d050      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x11a>
 8003de0:	2b60      	cmp	r3, #96	@ 0x60
 8003de2:	d877      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b50      	cmp	r3, #80	@ 0x50
 8003de6:	d03c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0xfa>
 8003de8:	2b50      	cmp	r3, #80	@ 0x50
 8003dea:	d873      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d058      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d86f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b30      	cmp	r3, #48	@ 0x30
 8003df6:	d064      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8003df8:	2b30      	cmp	r3, #48	@ 0x30
 8003dfa:	d86b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d060      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d867      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05c      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d05a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	e062      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	f000 f968 	bl	80040f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	609a      	str	r2, [r3, #8]
      break;
 8003e3a:	e04f      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	f000 f951 	bl	80040f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e5e:	609a      	str	r2, [r3, #8]
      break;
 8003e60:	e03c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 f8c8 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2150      	movs	r1, #80	@ 0x50
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f91f 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003e80:	e02c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 f8e6 	bl	8004060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2160      	movs	r1, #96	@ 0x60
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f90f 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e01c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 f8a8 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2140      	movs	r1, #64	@ 0x40
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8ff 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e00c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f000 f8f6 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003ed2:	e003      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed8:	e000      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
	...

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a29      	ldr	r2, [pc, #164]	@ (8003ff8 <TIM_Base_SetConfig+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <TIM_Base_SetConfig+0x30>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d007      	beq.n	8003f70 <TIM_Base_SetConfig+0x30>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a26      	ldr	r2, [pc, #152]	@ (8003ffc <TIM_Base_SetConfig+0xbc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_Base_SetConfig+0x30>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a25      	ldr	r2, [pc, #148]	@ (8004000 <TIM_Base_SetConfig+0xc0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d108      	bne.n	8003f82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <TIM_Base_SetConfig+0xb8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x62>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0x62>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <TIM_Base_SetConfig+0xbc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <TIM_Base_SetConfig+0xc0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <TIM_Base_SetConfig+0xb8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 030a 	bic.w	r3, r3, #10
 8004040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0210 	bic.w	r2, r3, #16
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800408a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	031b      	lsls	r3, r3, #12
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800409c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	f043 0307 	orr.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800410c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	021a      	lsls	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	609a      	str	r2, [r3, #8]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e046      	b.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10c      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e042      	b.n	80042a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd fc7e 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	@ 0x24
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fd71 	bl	8004d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	@ 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d16d      	bne.n	80043ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Transmit+0x2c>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e066      	b.n	80043ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	@ 0x21
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fd fdfd 	bl	8001eec <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004308:	d108      	bne.n	800431c <HAL_UART_Transmit+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e003      	b.n	8004324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004324:	e02a      	b.n	800437c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 faf9 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e036      	b.n	80043ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3302      	adds	r3, #2
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e007      	b.n	800436e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3301      	adds	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1cf      	bne.n	8004326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2140      	movs	r1, #64	@ 0x40
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fac9 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	@ 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fbd1 	bl	8004bbe <UART_Receive_IT>
      return;
 800441c:	e25b      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80de 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
 8004428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81f2 	beq.w	80048cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb5c 	bl	8004bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_UART_IRQHandler+0x17a>
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa66 	bl	8004a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d041      	beq.n	80045ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800457e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800458a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459e:	4a7e      	ldr	r2, [pc, #504]	@ (8004798 <HAL_UART_IRQHandler+0x3e0>)
 80045a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fa42 	bl	8002a30 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e00e      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f99c 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00a      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f998 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e006      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f994 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045de:	e175      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	bf00      	nop
    return;
 80045e2:	e173      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814f 	bne.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8148 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8141 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80b6 	beq.w	800479c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800463c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8145 	beq.w	80048d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800464e:	429a      	cmp	r2, r3
 8004650:	f080 813e 	bcs.w	80048d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800465a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b20      	cmp	r3, #32
 8004664:	f000 8088 	beq.w	8004778 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800467e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004694:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004698:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1d9      	bne.n	8004668 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e1      	bne.n	80046b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004714:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004716:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800471a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e3      	bne.n	80046f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800475a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800475c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e3      	bne.n	8004736 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f921 	bl	80029ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004786:	b29b      	uxth	r3, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8bf 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004794:	e09c      	b.n	80048d0 <HAL_UART_IRQHandler+0x518>
 8004796:	bf00      	nop
 8004798:	08004ac9 	.word	0x08004ac9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 808e 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8089 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	623b      	str	r3, [r7, #32]
   return(result);
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800481e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e3      	bne.n	80047fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
   return(result);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f844 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800488a:	e023      	b.n	80048d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f923 	bl	8004af0 <UART_Transmit_IT>
    return;
 80048aa:	e014      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f962 	bl	8004b8e <UART_EndTransmit_IT>
    return;
 80048ca:	e004      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d4:	bf00      	nop
  }
}
 80048d6:	37e8      	adds	r7, #232	@ 0xe8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	@ 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e050      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d04c      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004948:	f7fd fad0 	bl	8001eec <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004954:	429a      	cmp	r2, r3
 8004956:	d241      	bcs.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004978:	637a      	str	r2, [r7, #52]	@ 0x34
 800497a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800497e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049ac:	623a      	str	r2, [r7, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e00f      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d09f      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3740      	adds	r7, #64	@ 0x40
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b095      	sub	sp, #84	@ 0x54
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e5      	bne.n	8004a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d119      	bne.n	8004ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0310 	bic.w	r3, r3, #16
 8004a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a9c:	61ba      	str	r2, [r7, #24]
 8004a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004abe:	bf00      	nop
 8004ac0:	3754      	adds	r7, #84	@ 0x54
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff ff0c 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b21      	cmp	r3, #33	@ 0x21
 8004b02:	d13e      	bne.n	8004b82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0c:	d114      	bne.n	8004b38 <UART_Transmit_IT+0x48>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d110      	bne.n	8004b38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	1c9a      	adds	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]
 8004b36:	e008      	b.n	8004b4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	1c59      	adds	r1, r3, #1
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6211      	str	r1, [r2, #32]
 8004b42:	781a      	ldrb	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4619      	mov	r1, r3
 8004b58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fe94 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08c      	sub	sp, #48	@ 0x30
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b22      	cmp	r3, #34	@ 0x22
 8004bd0:	f040 80ae 	bne.w	8004d30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bdc:	d117      	bne.n	8004c0e <UART_Receive_IT+0x50>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d113      	bne.n	8004c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c0c:	e026      	b.n	8004c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c20:	d007      	beq.n	8004c32 <UART_Receive_IT+0x74>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <UART_Receive_IT+0x82>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e008      	b.n	8004c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d15d      	bne.n	8004d2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d135      	bne.n	8004d22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cdc:	623a      	str	r2, [r7, #32]
 8004cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d10a      	bne.n	8004d14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fdf9 	bl	8004912 <HAL_UARTEx_RxEventCallback>
 8004d20:	e002      	b.n	8004d28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fde3 	bl	80048ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e002      	b.n	8004d32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3730      	adds	r7, #48	@ 0x30
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d76:	f023 030c 	bic.w	r3, r3, #12
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e50 <UART_SetConfig+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004da4:	f7fe fc4e 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	e002      	b.n	8004db2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7fe fc36 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8004db0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	4a22      	ldr	r2, [pc, #136]	@ (8004e54 <UART_SetConfig+0x118>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	0119      	lsls	r1, r3, #4
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <UART_SetConfig+0x118>)
 8004dea:	fba3 0302 	umull	r0, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2064      	movs	r0, #100	@ 0x64
 8004df2:	fb00 f303 	mul.w	r3, r0, r3
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	3332      	adds	r3, #50	@ 0x32
 8004dfc:	4a15      	ldr	r2, [pc, #84]	@ (8004e54 <UART_SetConfig+0x118>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e08:	4419      	add	r1, r3
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009a      	lsls	r2, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <UART_SetConfig+0x118>)
 8004e22:	fba3 0302 	umull	r0, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2064      	movs	r0, #100	@ 0x64
 8004e2a:	fb00 f303 	mul.w	r3, r0, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	3332      	adds	r3, #50	@ 0x32
 8004e34:	4a07      	ldr	r2, [pc, #28]	@ (8004e54 <UART_SetConfig+0x118>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	440a      	add	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40013800 	.word	0x40013800
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <__cvt>:
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5e:	461d      	mov	r5, r3
 8004e60:	bfbb      	ittet	lt
 8004e62:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	461d      	movlt	r5, r3
 8004e68:	2300      	movge	r3, #0
 8004e6a:	232d      	movlt	r3, #45	@ 0x2d
 8004e6c:	b088      	sub	sp, #32
 8004e6e:	4614      	mov	r4, r2
 8004e70:	bfb8      	it	lt
 8004e72:	4614      	movlt	r4, r2
 8004e74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004e78:	7013      	strb	r3, [r2, #0]
 8004e7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004e80:	f023 0820 	bic.w	r8, r3, #32
 8004e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e88:	d005      	beq.n	8004e96 <__cvt+0x3e>
 8004e8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e8e:	d100      	bne.n	8004e92 <__cvt+0x3a>
 8004e90:	3601      	adds	r6, #1
 8004e92:	2302      	movs	r3, #2
 8004e94:	e000      	b.n	8004e98 <__cvt+0x40>
 8004e96:	2303      	movs	r3, #3
 8004e98:	aa07      	add	r2, sp, #28
 8004e9a:	9204      	str	r2, [sp, #16]
 8004e9c:	aa06      	add	r2, sp, #24
 8004e9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ea2:	e9cd 3600 	strd	r3, r6, [sp]
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	f000 fe6d 	bl	8005b88 <_dtoa_r>
 8004eae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	d119      	bne.n	8004eea <__cvt+0x92>
 8004eb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004eb8:	07db      	lsls	r3, r3, #31
 8004eba:	d50e      	bpl.n	8004eda <__cvt+0x82>
 8004ebc:	eb00 0906 	add.w	r9, r0, r6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7fb fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8004ecc:	b108      	cbz	r0, 8004ed2 <__cvt+0x7a>
 8004ece:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ed2:	2230      	movs	r2, #48	@ 0x30
 8004ed4:	9b07      	ldr	r3, [sp, #28]
 8004ed6:	454b      	cmp	r3, r9
 8004ed8:	d31e      	bcc.n	8004f18 <__cvt+0xc0>
 8004eda:	4638      	mov	r0, r7
 8004edc:	9b07      	ldr	r3, [sp, #28]
 8004ede:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004ee0:	1bdb      	subs	r3, r3, r7
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	b008      	add	sp, #32
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004eee:	eb00 0906 	add.w	r9, r0, r6
 8004ef2:	d1e5      	bne.n	8004ec0 <__cvt+0x68>
 8004ef4:	7803      	ldrb	r3, [r0, #0]
 8004ef6:	2b30      	cmp	r3, #48	@ 0x30
 8004ef8:	d10a      	bne.n	8004f10 <__cvt+0xb8>
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8004f06:	b918      	cbnz	r0, 8004f10 <__cvt+0xb8>
 8004f08:	f1c6 0601 	rsb	r6, r6, #1
 8004f0c:	f8ca 6000 	str.w	r6, [sl]
 8004f10:	f8da 3000 	ldr.w	r3, [sl]
 8004f14:	4499      	add	r9, r3
 8004f16:	e7d3      	b.n	8004ec0 <__cvt+0x68>
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	9107      	str	r1, [sp, #28]
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e7d9      	b.n	8004ed4 <__cvt+0x7c>

08004f20 <__exponent>:
 8004f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f22:	2900      	cmp	r1, #0
 8004f24:	bfb6      	itet	lt
 8004f26:	232d      	movlt	r3, #45	@ 0x2d
 8004f28:	232b      	movge	r3, #43	@ 0x2b
 8004f2a:	4249      	neglt	r1, r1
 8004f2c:	2909      	cmp	r1, #9
 8004f2e:	7002      	strb	r2, [r0, #0]
 8004f30:	7043      	strb	r3, [r0, #1]
 8004f32:	dd29      	ble.n	8004f88 <__exponent+0x68>
 8004f34:	f10d 0307 	add.w	r3, sp, #7
 8004f38:	461d      	mov	r5, r3
 8004f3a:	270a      	movs	r7, #10
 8004f3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f40:	461a      	mov	r2, r3
 8004f42:	fb07 1416 	mls	r4, r7, r6, r1
 8004f46:	3430      	adds	r4, #48	@ 0x30
 8004f48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	2c63      	cmp	r4, #99	@ 0x63
 8004f50:	4631      	mov	r1, r6
 8004f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f56:	dcf1      	bgt.n	8004f3c <__exponent+0x1c>
 8004f58:	3130      	adds	r1, #48	@ 0x30
 8004f5a:	1e94      	subs	r4, r2, #2
 8004f5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f60:	4623      	mov	r3, r4
 8004f62:	1c41      	adds	r1, r0, #1
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	d30a      	bcc.n	8004f7e <__exponent+0x5e>
 8004f68:	f10d 0309 	add.w	r3, sp, #9
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	42ac      	cmp	r4, r5
 8004f70:	bf88      	it	hi
 8004f72:	2300      	movhi	r3, #0
 8004f74:	3302      	adds	r3, #2
 8004f76:	4403      	add	r3, r0
 8004f78:	1a18      	subs	r0, r3, r0
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f86:	e7ed      	b.n	8004f64 <__exponent+0x44>
 8004f88:	2330      	movs	r3, #48	@ 0x30
 8004f8a:	3130      	adds	r1, #48	@ 0x30
 8004f8c:	7083      	strb	r3, [r0, #2]
 8004f8e:	70c1      	strb	r1, [r0, #3]
 8004f90:	1d03      	adds	r3, r0, #4
 8004f92:	e7f1      	b.n	8004f78 <__exponent+0x58>

08004f94 <_printf_float>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	b091      	sub	sp, #68	@ 0x44
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	f000 fce1 	bl	800596c <_localeconv_r>
 8004faa:	6803      	ldr	r3, [r0, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	9308      	str	r3, [sp, #32]
 8004fb0:	f7fb f8ce 	bl	8000150 <strlen>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fbc:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fbe:	3307      	adds	r3, #7
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	f103 0208 	add.w	r2, r3, #8
 8004fc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fcc:	f8d4 b000 	ldr.w	fp, [r4]
 8004fd0:	f8c8 2000 	str.w	r2, [r8]
 8004fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fde:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fee:	4b9c      	ldr	r3, [pc, #624]	@ (8005260 <_printf_float+0x2cc>)
 8004ff0:	f7fb fd0c 	bl	8000a0c <__aeabi_dcmpun>
 8004ff4:	bb70      	cbnz	r0, 8005054 <_printf_float+0xc0>
 8004ff6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	4b98      	ldr	r3, [pc, #608]	@ (8005260 <_printf_float+0x2cc>)
 8005000:	f7fb fce6 	bl	80009d0 <__aeabi_dcmple>
 8005004:	bb30      	cbnz	r0, 8005054 <_printf_float+0xc0>
 8005006:	2200      	movs	r2, #0
 8005008:	2300      	movs	r3, #0
 800500a:	4640      	mov	r0, r8
 800500c:	4649      	mov	r1, r9
 800500e:	f7fb fcd5 	bl	80009bc <__aeabi_dcmplt>
 8005012:	b110      	cbz	r0, 800501a <_printf_float+0x86>
 8005014:	232d      	movs	r3, #45	@ 0x2d
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501a:	4a92      	ldr	r2, [pc, #584]	@ (8005264 <_printf_float+0x2d0>)
 800501c:	4b92      	ldr	r3, [pc, #584]	@ (8005268 <_printf_float+0x2d4>)
 800501e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005022:	bf94      	ite	ls
 8005024:	4690      	movls	r8, r2
 8005026:	4698      	movhi	r8, r3
 8005028:	2303      	movs	r3, #3
 800502a:	f04f 0900 	mov.w	r9, #0
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	f02b 0304 	bic.w	r3, fp, #4
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	4633      	mov	r3, r6
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	9700      	str	r7, [sp, #0]
 800503e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005040:	f000 f9d4 	bl	80053ec <_printf_common>
 8005044:	3001      	adds	r0, #1
 8005046:	f040 8090 	bne.w	800516a <_printf_float+0x1d6>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	b011      	add	sp, #68	@ 0x44
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f7fb fcd6 	bl	8000a0c <__aeabi_dcmpun>
 8005060:	b148      	cbz	r0, 8005076 <_printf_float+0xe2>
 8005062:	464b      	mov	r3, r9
 8005064:	2b00      	cmp	r3, #0
 8005066:	bfb8      	it	lt
 8005068:	232d      	movlt	r3, #45	@ 0x2d
 800506a:	4a80      	ldr	r2, [pc, #512]	@ (800526c <_printf_float+0x2d8>)
 800506c:	bfb8      	it	lt
 800506e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005072:	4b7f      	ldr	r3, [pc, #508]	@ (8005270 <_printf_float+0x2dc>)
 8005074:	e7d3      	b.n	800501e <_printf_float+0x8a>
 8005076:	6863      	ldr	r3, [r4, #4]
 8005078:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	d13f      	bne.n	8005100 <_printf_float+0x16c>
 8005080:	2306      	movs	r3, #6
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	9206      	str	r2, [sp, #24]
 800508e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005090:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005094:	aa0d      	add	r2, sp, #52	@ 0x34
 8005096:	9203      	str	r2, [sp, #12]
 8005098:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800509c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	4642      	mov	r2, r8
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4628      	mov	r0, r5
 80050a8:	464b      	mov	r3, r9
 80050aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80050ac:	f7ff fed4 	bl	8004e58 <__cvt>
 80050b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050b2:	4680      	mov	r8, r0
 80050b4:	2947      	cmp	r1, #71	@ 0x47
 80050b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80050b8:	d128      	bne.n	800510c <_printf_float+0x178>
 80050ba:	1cc8      	adds	r0, r1, #3
 80050bc:	db02      	blt.n	80050c4 <_printf_float+0x130>
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	dd40      	ble.n	8005146 <_printf_float+0x1b2>
 80050c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80050c8:	fa5f fa8a 	uxtb.w	sl, sl
 80050cc:	4652      	mov	r2, sl
 80050ce:	3901      	subs	r1, #1
 80050d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80050d6:	f7ff ff23 	bl	8004f20 <__exponent>
 80050da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050dc:	4681      	mov	r9, r0
 80050de:	1813      	adds	r3, r2, r0
 80050e0:	2a01      	cmp	r2, #1
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	dc02      	bgt.n	80050ec <_printf_float+0x158>
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	07d2      	lsls	r2, r2, #31
 80050ea:	d501      	bpl.n	80050f0 <_printf_float+0x15c>
 80050ec:	3301      	adds	r3, #1
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d09e      	beq.n	8005036 <_printf_float+0xa2>
 80050f8:	232d      	movs	r3, #45	@ 0x2d
 80050fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050fe:	e79a      	b.n	8005036 <_printf_float+0xa2>
 8005100:	2947      	cmp	r1, #71	@ 0x47
 8005102:	d1bf      	bne.n	8005084 <_printf_float+0xf0>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1bd      	bne.n	8005084 <_printf_float+0xf0>
 8005108:	2301      	movs	r3, #1
 800510a:	e7ba      	b.n	8005082 <_printf_float+0xee>
 800510c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005110:	d9dc      	bls.n	80050cc <_printf_float+0x138>
 8005112:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005116:	d118      	bne.n	800514a <_printf_float+0x1b6>
 8005118:	2900      	cmp	r1, #0
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	dd0b      	ble.n	8005136 <_printf_float+0x1a2>
 800511e:	6121      	str	r1, [r4, #16]
 8005120:	b913      	cbnz	r3, 8005128 <_printf_float+0x194>
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	d502      	bpl.n	800512e <_printf_float+0x19a>
 8005128:	3301      	adds	r3, #1
 800512a:	440b      	add	r3, r1
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	f04f 0900 	mov.w	r9, #0
 8005132:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005134:	e7dc      	b.n	80050f0 <_printf_float+0x15c>
 8005136:	b913      	cbnz	r3, 800513e <_printf_float+0x1aa>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	07d2      	lsls	r2, r2, #31
 800513c:	d501      	bpl.n	8005142 <_printf_float+0x1ae>
 800513e:	3302      	adds	r3, #2
 8005140:	e7f4      	b.n	800512c <_printf_float+0x198>
 8005142:	2301      	movs	r3, #1
 8005144:	e7f2      	b.n	800512c <_printf_float+0x198>
 8005146:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800514a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800514c:	4299      	cmp	r1, r3
 800514e:	db05      	blt.n	800515c <_printf_float+0x1c8>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	6121      	str	r1, [r4, #16]
 8005154:	07d8      	lsls	r0, r3, #31
 8005156:	d5ea      	bpl.n	800512e <_printf_float+0x19a>
 8005158:	1c4b      	adds	r3, r1, #1
 800515a:	e7e7      	b.n	800512c <_printf_float+0x198>
 800515c:	2900      	cmp	r1, #0
 800515e:	bfcc      	ite	gt
 8005160:	2201      	movgt	r2, #1
 8005162:	f1c1 0202 	rsble	r2, r1, #2
 8005166:	4413      	add	r3, r2
 8005168:	e7e0      	b.n	800512c <_printf_float+0x198>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	055a      	lsls	r2, r3, #21
 800516e:	d407      	bmi.n	8005180 <_printf_float+0x1ec>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	4642      	mov	r2, r8
 8005174:	4631      	mov	r1, r6
 8005176:	4628      	mov	r0, r5
 8005178:	47b8      	blx	r7
 800517a:	3001      	adds	r0, #1
 800517c:	d12b      	bne.n	80051d6 <_printf_float+0x242>
 800517e:	e764      	b.n	800504a <_printf_float+0xb6>
 8005180:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005184:	f240 80dc 	bls.w	8005340 <_printf_float+0x3ac>
 8005188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800518c:	2200      	movs	r2, #0
 800518e:	2300      	movs	r3, #0
 8005190:	f7fb fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005194:	2800      	cmp	r0, #0
 8005196:	d033      	beq.n	8005200 <_printf_float+0x26c>
 8005198:	2301      	movs	r3, #1
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <_printf_float+0x2e0>)
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af51 	beq.w	800504a <_printf_float+0xb6>
 80051a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80051ac:	4543      	cmp	r3, r8
 80051ae:	db02      	blt.n	80051b6 <_printf_float+0x222>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	07d8      	lsls	r0, r3, #31
 80051b4:	d50f      	bpl.n	80051d6 <_printf_float+0x242>
 80051b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f af42 	beq.w	800504a <_printf_float+0xb6>
 80051c6:	f04f 0900 	mov.w	r9, #0
 80051ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80051ce:	f104 0a1a 	add.w	sl, r4, #26
 80051d2:	45c8      	cmp	r8, r9
 80051d4:	dc09      	bgt.n	80051ea <_printf_float+0x256>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	079b      	lsls	r3, r3, #30
 80051da:	f100 8102 	bmi.w	80053e2 <_printf_float+0x44e>
 80051de:	68e0      	ldr	r0, [r4, #12]
 80051e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051e2:	4298      	cmp	r0, r3
 80051e4:	bfb8      	it	lt
 80051e6:	4618      	movlt	r0, r3
 80051e8:	e731      	b.n	800504e <_printf_float+0xba>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4652      	mov	r2, sl
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	f43f af28 	beq.w	800504a <_printf_float+0xb6>
 80051fa:	f109 0901 	add.w	r9, r9, #1
 80051fe:	e7e8      	b.n	80051d2 <_printf_float+0x23e>
 8005200:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005202:	2b00      	cmp	r3, #0
 8005204:	dc38      	bgt.n	8005278 <_printf_float+0x2e4>
 8005206:	2301      	movs	r3, #1
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	4a19      	ldr	r2, [pc, #100]	@ (8005274 <_printf_float+0x2e0>)
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f af1a 	beq.w	800504a <_printf_float+0xb6>
 8005216:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800521a:	ea59 0303 	orrs.w	r3, r9, r3
 800521e:	d102      	bne.n	8005226 <_printf_float+0x292>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	07d9      	lsls	r1, r3, #31
 8005224:	d5d7      	bpl.n	80051d6 <_printf_float+0x242>
 8005226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800522a:	4631      	mov	r1, r6
 800522c:	4628      	mov	r0, r5
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	f43f af0a 	beq.w	800504a <_printf_float+0xb6>
 8005236:	f04f 0a00 	mov.w	sl, #0
 800523a:	f104 0b1a 	add.w	fp, r4, #26
 800523e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005240:	425b      	negs	r3, r3
 8005242:	4553      	cmp	r3, sl
 8005244:	dc01      	bgt.n	800524a <_printf_float+0x2b6>
 8005246:	464b      	mov	r3, r9
 8005248:	e793      	b.n	8005172 <_printf_float+0x1de>
 800524a:	2301      	movs	r3, #1
 800524c:	465a      	mov	r2, fp
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	f43f aef8 	beq.w	800504a <_printf_float+0xb6>
 800525a:	f10a 0a01 	add.w	sl, sl, #1
 800525e:	e7ee      	b.n	800523e <_printf_float+0x2aa>
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	08007caa 	.word	0x08007caa
 8005268:	08007cae 	.word	0x08007cae
 800526c:	08007cb2 	.word	0x08007cb2
 8005270:	08007cb6 	.word	0x08007cb6
 8005274:	08007cba 	.word	0x08007cba
 8005278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800527a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800527e:	4553      	cmp	r3, sl
 8005280:	bfa8      	it	ge
 8005282:	4653      	movge	r3, sl
 8005284:	2b00      	cmp	r3, #0
 8005286:	4699      	mov	r9, r3
 8005288:	dc36      	bgt.n	80052f8 <_printf_float+0x364>
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005292:	f104 021a 	add.w	r2, r4, #26
 8005296:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005298:	930a      	str	r3, [sp, #40]	@ 0x28
 800529a:	eba3 0309 	sub.w	r3, r3, r9
 800529e:	455b      	cmp	r3, fp
 80052a0:	dc31      	bgt.n	8005306 <_printf_float+0x372>
 80052a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052a4:	459a      	cmp	sl, r3
 80052a6:	dc3a      	bgt.n	800531e <_printf_float+0x38a>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	07da      	lsls	r2, r3, #31
 80052ac:	d437      	bmi.n	800531e <_printf_float+0x38a>
 80052ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052b0:	ebaa 0903 	sub.w	r9, sl, r3
 80052b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052b6:	ebaa 0303 	sub.w	r3, sl, r3
 80052ba:	4599      	cmp	r9, r3
 80052bc:	bfa8      	it	ge
 80052be:	4699      	movge	r9, r3
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	dc33      	bgt.n	800532e <_printf_float+0x39a>
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ce:	f104 0b1a 	add.w	fp, r4, #26
 80052d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052d4:	ebaa 0303 	sub.w	r3, sl, r3
 80052d8:	eba3 0309 	sub.w	r3, r3, r9
 80052dc:	4543      	cmp	r3, r8
 80052de:	f77f af7a 	ble.w	80051d6 <_printf_float+0x242>
 80052e2:	2301      	movs	r3, #1
 80052e4:	465a      	mov	r2, fp
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f aeac 	beq.w	800504a <_printf_float+0xb6>
 80052f2:	f108 0801 	add.w	r8, r8, #1
 80052f6:	e7ec      	b.n	80052d2 <_printf_float+0x33e>
 80052f8:	4642      	mov	r2, r8
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d1c2      	bne.n	800528a <_printf_float+0x2f6>
 8005304:	e6a1      	b.n	800504a <_printf_float+0xb6>
 8005306:	2301      	movs	r3, #1
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	920a      	str	r2, [sp, #40]	@ 0x28
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f ae9a 	beq.w	800504a <_printf_float+0xb6>
 8005316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005318:	f10b 0b01 	add.w	fp, fp, #1
 800531c:	e7bb      	b.n	8005296 <_printf_float+0x302>
 800531e:	4631      	mov	r1, r6
 8005320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	d1c0      	bne.n	80052ae <_printf_float+0x31a>
 800532c:	e68d      	b.n	800504a <_printf_float+0xb6>
 800532e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005330:	464b      	mov	r3, r9
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	4442      	add	r2, r8
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	d1c3      	bne.n	80052c6 <_printf_float+0x332>
 800533e:	e684      	b.n	800504a <_printf_float+0xb6>
 8005340:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005344:	f1ba 0f01 	cmp.w	sl, #1
 8005348:	dc01      	bgt.n	800534e <_printf_float+0x3ba>
 800534a:	07db      	lsls	r3, r3, #31
 800534c:	d536      	bpl.n	80053bc <_printf_float+0x428>
 800534e:	2301      	movs	r3, #1
 8005350:	4642      	mov	r2, r8
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae76 	beq.w	800504a <_printf_float+0xb6>
 800535e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae6e 	beq.w	800504a <_printf_float+0xb6>
 800536e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005372:	2200      	movs	r2, #0
 8005374:	2300      	movs	r3, #0
 8005376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800537a:	f7fb fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800537e:	b9c0      	cbnz	r0, 80053b2 <_printf_float+0x41e>
 8005380:	4653      	mov	r3, sl
 8005382:	f108 0201 	add.w	r2, r8, #1
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	d10c      	bne.n	80053aa <_printf_float+0x416>
 8005390:	e65b      	b.n	800504a <_printf_float+0xb6>
 8005392:	2301      	movs	r3, #1
 8005394:	465a      	mov	r2, fp
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f ae54 	beq.w	800504a <_printf_float+0xb6>
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	45d0      	cmp	r8, sl
 80053a8:	dbf3      	blt.n	8005392 <_printf_float+0x3fe>
 80053aa:	464b      	mov	r3, r9
 80053ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053b0:	e6e0      	b.n	8005174 <_printf_float+0x1e0>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	f104 0b1a 	add.w	fp, r4, #26
 80053ba:	e7f4      	b.n	80053a6 <_printf_float+0x412>
 80053bc:	2301      	movs	r3, #1
 80053be:	4642      	mov	r2, r8
 80053c0:	e7e1      	b.n	8005386 <_printf_float+0x3f2>
 80053c2:	2301      	movs	r3, #1
 80053c4:	464a      	mov	r2, r9
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	f43f ae3c 	beq.w	800504a <_printf_float+0xb6>
 80053d2:	f108 0801 	add.w	r8, r8, #1
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80053da:	1a5b      	subs	r3, r3, r1
 80053dc:	4543      	cmp	r3, r8
 80053de:	dcf0      	bgt.n	80053c2 <_printf_float+0x42e>
 80053e0:	e6fd      	b.n	80051de <_printf_float+0x24a>
 80053e2:	f04f 0800 	mov.w	r8, #0
 80053e6:	f104 0919 	add.w	r9, r4, #25
 80053ea:	e7f4      	b.n	80053d6 <_printf_float+0x442>

080053ec <_printf_common>:
 80053ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	4616      	mov	r6, r2
 80053f2:	4698      	mov	r8, r3
 80053f4:	688a      	ldr	r2, [r1, #8]
 80053f6:	690b      	ldr	r3, [r1, #16]
 80053f8:	4607      	mov	r7, r0
 80053fa:	4293      	cmp	r3, r2
 80053fc:	bfb8      	it	lt
 80053fe:	4613      	movlt	r3, r2
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005406:	460c      	mov	r4, r1
 8005408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800540c:	b10a      	cbz	r2, 8005412 <_printf_common+0x26>
 800540e:	3301      	adds	r3, #1
 8005410:	6033      	str	r3, [r6, #0]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	0699      	lsls	r1, r3, #26
 8005416:	bf42      	ittt	mi
 8005418:	6833      	ldrmi	r3, [r6, #0]
 800541a:	3302      	addmi	r3, #2
 800541c:	6033      	strmi	r3, [r6, #0]
 800541e:	6825      	ldr	r5, [r4, #0]
 8005420:	f015 0506 	ands.w	r5, r5, #6
 8005424:	d106      	bne.n	8005434 <_printf_common+0x48>
 8005426:	f104 0a19 	add.w	sl, r4, #25
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	6832      	ldr	r2, [r6, #0]
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	42ab      	cmp	r3, r5
 8005432:	dc2b      	bgt.n	800548c <_printf_common+0xa0>
 8005434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	3b00      	subs	r3, #0
 800543c:	bf18      	it	ne
 800543e:	2301      	movne	r3, #1
 8005440:	0692      	lsls	r2, r2, #26
 8005442:	d430      	bmi.n	80054a6 <_printf_common+0xba>
 8005444:	4641      	mov	r1, r8
 8005446:	4638      	mov	r0, r7
 8005448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800544c:	47c8      	blx	r9
 800544e:	3001      	adds	r0, #1
 8005450:	d023      	beq.n	800549a <_printf_common+0xae>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	f003 0306 	and.w	r3, r3, #6
 800545a:	2b04      	cmp	r3, #4
 800545c:	bf14      	ite	ne
 800545e:	2500      	movne	r5, #0
 8005460:	6833      	ldreq	r3, [r6, #0]
 8005462:	f04f 0600 	mov.w	r6, #0
 8005466:	bf08      	it	eq
 8005468:	68e5      	ldreq	r5, [r4, #12]
 800546a:	f104 041a 	add.w	r4, r4, #26
 800546e:	bf08      	it	eq
 8005470:	1aed      	subeq	r5, r5, r3
 8005472:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005476:	bf08      	it	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	4293      	cmp	r3, r2
 800547e:	bfc4      	itt	gt
 8005480:	1a9b      	subgt	r3, r3, r2
 8005482:	18ed      	addgt	r5, r5, r3
 8005484:	42b5      	cmp	r5, r6
 8005486:	d11a      	bne.n	80054be <_printf_common+0xd2>
 8005488:	2000      	movs	r0, #0
 800548a:	e008      	b.n	800549e <_printf_common+0xb2>
 800548c:	2301      	movs	r3, #1
 800548e:	4652      	mov	r2, sl
 8005490:	4641      	mov	r1, r8
 8005492:	4638      	mov	r0, r7
 8005494:	47c8      	blx	r9
 8005496:	3001      	adds	r0, #1
 8005498:	d103      	bne.n	80054a2 <_printf_common+0xb6>
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	3501      	adds	r5, #1
 80054a4:	e7c1      	b.n	800542a <_printf_common+0x3e>
 80054a6:	2030      	movs	r0, #48	@ 0x30
 80054a8:	18e1      	adds	r1, r4, r3
 80054aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054b4:	4422      	add	r2, r4
 80054b6:	3302      	adds	r3, #2
 80054b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054bc:	e7c2      	b.n	8005444 <_printf_common+0x58>
 80054be:	2301      	movs	r3, #1
 80054c0:	4622      	mov	r2, r4
 80054c2:	4641      	mov	r1, r8
 80054c4:	4638      	mov	r0, r7
 80054c6:	47c8      	blx	r9
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0e6      	beq.n	800549a <_printf_common+0xae>
 80054cc:	3601      	adds	r6, #1
 80054ce:	e7d9      	b.n	8005484 <_printf_common+0x98>

080054d0 <_printf_i>:
 80054d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	7e0f      	ldrb	r7, [r1, #24]
 80054d6:	4691      	mov	r9, r2
 80054d8:	2f78      	cmp	r7, #120	@ 0x78
 80054da:	4680      	mov	r8, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	469a      	mov	sl, r3
 80054e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054e6:	d807      	bhi.n	80054f8 <_printf_i+0x28>
 80054e8:	2f62      	cmp	r7, #98	@ 0x62
 80054ea:	d80a      	bhi.n	8005502 <_printf_i+0x32>
 80054ec:	2f00      	cmp	r7, #0
 80054ee:	f000 80d3 	beq.w	8005698 <_printf_i+0x1c8>
 80054f2:	2f58      	cmp	r7, #88	@ 0x58
 80054f4:	f000 80ba 	beq.w	800566c <_printf_i+0x19c>
 80054f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005500:	e03a      	b.n	8005578 <_printf_i+0xa8>
 8005502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005506:	2b15      	cmp	r3, #21
 8005508:	d8f6      	bhi.n	80054f8 <_printf_i+0x28>
 800550a:	a101      	add	r1, pc, #4	@ (adr r1, 8005510 <_printf_i+0x40>)
 800550c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005510:	08005569 	.word	0x08005569
 8005514:	0800557d 	.word	0x0800557d
 8005518:	080054f9 	.word	0x080054f9
 800551c:	080054f9 	.word	0x080054f9
 8005520:	080054f9 	.word	0x080054f9
 8005524:	080054f9 	.word	0x080054f9
 8005528:	0800557d 	.word	0x0800557d
 800552c:	080054f9 	.word	0x080054f9
 8005530:	080054f9 	.word	0x080054f9
 8005534:	080054f9 	.word	0x080054f9
 8005538:	080054f9 	.word	0x080054f9
 800553c:	0800567f 	.word	0x0800567f
 8005540:	080055a7 	.word	0x080055a7
 8005544:	08005639 	.word	0x08005639
 8005548:	080054f9 	.word	0x080054f9
 800554c:	080054f9 	.word	0x080054f9
 8005550:	080056a1 	.word	0x080056a1
 8005554:	080054f9 	.word	0x080054f9
 8005558:	080055a7 	.word	0x080055a7
 800555c:	080054f9 	.word	0x080054f9
 8005560:	080054f9 	.word	0x080054f9
 8005564:	08005641 	.word	0x08005641
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	1d1a      	adds	r2, r3, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6032      	str	r2, [r6, #0]
 8005570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005578:	2301      	movs	r3, #1
 800557a:	e09e      	b.n	80056ba <_printf_i+0x1ea>
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	1d19      	adds	r1, r3, #4
 8005582:	6031      	str	r1, [r6, #0]
 8005584:	0606      	lsls	r6, r0, #24
 8005586:	d501      	bpl.n	800558c <_printf_i+0xbc>
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	e003      	b.n	8005594 <_printf_i+0xc4>
 800558c:	0645      	lsls	r5, r0, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0xb8>
 8005590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005594:	2d00      	cmp	r5, #0
 8005596:	da03      	bge.n	80055a0 <_printf_i+0xd0>
 8005598:	232d      	movs	r3, #45	@ 0x2d
 800559a:	426d      	negs	r5, r5
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a0:	230a      	movs	r3, #10
 80055a2:	4859      	ldr	r0, [pc, #356]	@ (8005708 <_printf_i+0x238>)
 80055a4:	e011      	b.n	80055ca <_printf_i+0xfa>
 80055a6:	6821      	ldr	r1, [r4, #0]
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	0608      	lsls	r0, r1, #24
 80055ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80055b0:	d402      	bmi.n	80055b8 <_printf_i+0xe8>
 80055b2:	0649      	lsls	r1, r1, #25
 80055b4:	bf48      	it	mi
 80055b6:	b2ad      	uxthmi	r5, r5
 80055b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	bf14      	ite	ne
 80055be:	230a      	movne	r3, #10
 80055c0:	2308      	moveq	r3, #8
 80055c2:	4851      	ldr	r0, [pc, #324]	@ (8005708 <_printf_i+0x238>)
 80055c4:	2100      	movs	r1, #0
 80055c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055ca:	6866      	ldr	r6, [r4, #4]
 80055cc:	2e00      	cmp	r6, #0
 80055ce:	bfa8      	it	ge
 80055d0:	6821      	ldrge	r1, [r4, #0]
 80055d2:	60a6      	str	r6, [r4, #8]
 80055d4:	bfa4      	itt	ge
 80055d6:	f021 0104 	bicge.w	r1, r1, #4
 80055da:	6021      	strge	r1, [r4, #0]
 80055dc:	b90d      	cbnz	r5, 80055e2 <_printf_i+0x112>
 80055de:	2e00      	cmp	r6, #0
 80055e0:	d04b      	beq.n	800567a <_printf_i+0x1aa>
 80055e2:	4616      	mov	r6, r2
 80055e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80055e8:	fb03 5711 	mls	r7, r3, r1, r5
 80055ec:	5dc7      	ldrb	r7, [r0, r7]
 80055ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f2:	462f      	mov	r7, r5
 80055f4:	42bb      	cmp	r3, r7
 80055f6:	460d      	mov	r5, r1
 80055f8:	d9f4      	bls.n	80055e4 <_printf_i+0x114>
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d10b      	bne.n	8005616 <_printf_i+0x146>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	07df      	lsls	r7, r3, #31
 8005602:	d508      	bpl.n	8005616 <_printf_i+0x146>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	6861      	ldr	r1, [r4, #4]
 8005608:	4299      	cmp	r1, r3
 800560a:	bfde      	ittt	le
 800560c:	2330      	movle	r3, #48	@ 0x30
 800560e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005612:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005616:	1b92      	subs	r2, r2, r6
 8005618:	6122      	str	r2, [r4, #16]
 800561a:	464b      	mov	r3, r9
 800561c:	4621      	mov	r1, r4
 800561e:	4640      	mov	r0, r8
 8005620:	f8cd a000 	str.w	sl, [sp]
 8005624:	aa03      	add	r2, sp, #12
 8005626:	f7ff fee1 	bl	80053ec <_printf_common>
 800562a:	3001      	adds	r0, #1
 800562c:	d14a      	bne.n	80056c4 <_printf_i+0x1f4>
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	b004      	add	sp, #16
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	f043 0320 	orr.w	r3, r3, #32
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	2778      	movs	r7, #120	@ 0x78
 8005642:	4832      	ldr	r0, [pc, #200]	@ (800570c <_printf_i+0x23c>)
 8005644:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	6831      	ldr	r1, [r6, #0]
 800564c:	061f      	lsls	r7, r3, #24
 800564e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005652:	d402      	bmi.n	800565a <_printf_i+0x18a>
 8005654:	065f      	lsls	r7, r3, #25
 8005656:	bf48      	it	mi
 8005658:	b2ad      	uxthmi	r5, r5
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	07d9      	lsls	r1, r3, #31
 800565e:	bf44      	itt	mi
 8005660:	f043 0320 	orrmi.w	r3, r3, #32
 8005664:	6023      	strmi	r3, [r4, #0]
 8005666:	b11d      	cbz	r5, 8005670 <_printf_i+0x1a0>
 8005668:	2310      	movs	r3, #16
 800566a:	e7ab      	b.n	80055c4 <_printf_i+0xf4>
 800566c:	4826      	ldr	r0, [pc, #152]	@ (8005708 <_printf_i+0x238>)
 800566e:	e7e9      	b.n	8005644 <_printf_i+0x174>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	e7f6      	b.n	8005668 <_printf_i+0x198>
 800567a:	4616      	mov	r6, r2
 800567c:	e7bd      	b.n	80055fa <_printf_i+0x12a>
 800567e:	6833      	ldr	r3, [r6, #0]
 8005680:	6825      	ldr	r5, [r4, #0]
 8005682:	1d18      	adds	r0, r3, #4
 8005684:	6961      	ldr	r1, [r4, #20]
 8005686:	6030      	str	r0, [r6, #0]
 8005688:	062e      	lsls	r6, r5, #24
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	d501      	bpl.n	8005692 <_printf_i+0x1c2>
 800568e:	6019      	str	r1, [r3, #0]
 8005690:	e002      	b.n	8005698 <_printf_i+0x1c8>
 8005692:	0668      	lsls	r0, r5, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0x1be>
 8005696:	8019      	strh	r1, [r3, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	4616      	mov	r6, r2
 800569c:	6123      	str	r3, [r4, #16]
 800569e:	e7bc      	b.n	800561a <_printf_i+0x14a>
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	2100      	movs	r1, #0
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	6032      	str	r2, [r6, #0]
 80056a8:	681e      	ldr	r6, [r3, #0]
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 f9d4 	bl	8005a5a <memchr>
 80056b2:	b108      	cbz	r0, 80056b8 <_printf_i+0x1e8>
 80056b4:	1b80      	subs	r0, r0, r6
 80056b6:	6060      	str	r0, [r4, #4]
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	2300      	movs	r3, #0
 80056be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c2:	e7aa      	b.n	800561a <_printf_i+0x14a>
 80056c4:	4632      	mov	r2, r6
 80056c6:	4649      	mov	r1, r9
 80056c8:	4640      	mov	r0, r8
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	47d0      	blx	sl
 80056ce:	3001      	adds	r0, #1
 80056d0:	d0ad      	beq.n	800562e <_printf_i+0x15e>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	079b      	lsls	r3, r3, #30
 80056d6:	d413      	bmi.n	8005700 <_printf_i+0x230>
 80056d8:	68e0      	ldr	r0, [r4, #12]
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	4298      	cmp	r0, r3
 80056de:	bfb8      	it	lt
 80056e0:	4618      	movlt	r0, r3
 80056e2:	e7a6      	b.n	8005632 <_printf_i+0x162>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4632      	mov	r2, r6
 80056e8:	4649      	mov	r1, r9
 80056ea:	4640      	mov	r0, r8
 80056ec:	47d0      	blx	sl
 80056ee:	3001      	adds	r0, #1
 80056f0:	d09d      	beq.n	800562e <_printf_i+0x15e>
 80056f2:	3501      	adds	r5, #1
 80056f4:	68e3      	ldr	r3, [r4, #12]
 80056f6:	9903      	ldr	r1, [sp, #12]
 80056f8:	1a5b      	subs	r3, r3, r1
 80056fa:	42ab      	cmp	r3, r5
 80056fc:	dcf2      	bgt.n	80056e4 <_printf_i+0x214>
 80056fe:	e7eb      	b.n	80056d8 <_printf_i+0x208>
 8005700:	2500      	movs	r5, #0
 8005702:	f104 0619 	add.w	r6, r4, #25
 8005706:	e7f5      	b.n	80056f4 <_printf_i+0x224>
 8005708:	08007cbc 	.word	0x08007cbc
 800570c:	08007ccd 	.word	0x08007ccd

08005710 <std>:
 8005710:	2300      	movs	r3, #0
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	e9c0 3300 	strd	r3, r3, [r0]
 800571a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800571e:	6083      	str	r3, [r0, #8]
 8005720:	8181      	strh	r1, [r0, #12]
 8005722:	6643      	str	r3, [r0, #100]	@ 0x64
 8005724:	81c2      	strh	r2, [r0, #14]
 8005726:	6183      	str	r3, [r0, #24]
 8005728:	4619      	mov	r1, r3
 800572a:	2208      	movs	r2, #8
 800572c:	305c      	adds	r0, #92	@ 0x5c
 800572e:	f000 f914 	bl	800595a <memset>
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <std+0x58>)
 8005734:	6224      	str	r4, [r4, #32]
 8005736:	6263      	str	r3, [r4, #36]	@ 0x24
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <std+0x5c>)
 800573a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <std+0x60>)
 800573e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <std+0x64>)
 8005742:	6323      	str	r3, [r4, #48]	@ 0x30
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <std+0x68>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d006      	beq.n	8005758 <std+0x48>
 800574a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800574e:	4294      	cmp	r4, r2
 8005750:	d002      	beq.n	8005758 <std+0x48>
 8005752:	33d0      	adds	r3, #208	@ 0xd0
 8005754:	429c      	cmp	r4, r3
 8005756:	d105      	bne.n	8005764 <std+0x54>
 8005758:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005760:	f000 b978 	b.w	8005a54 <__retarget_lock_init_recursive>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	bf00      	nop
 8005768:	080058d5 	.word	0x080058d5
 800576c:	080058f7 	.word	0x080058f7
 8005770:	0800592f 	.word	0x0800592f
 8005774:	08005953 	.word	0x08005953
 8005778:	20000374 	.word	0x20000374

0800577c <stdio_exit_handler>:
 800577c:	4a02      	ldr	r2, [pc, #8]	@ (8005788 <stdio_exit_handler+0xc>)
 800577e:	4903      	ldr	r1, [pc, #12]	@ (800578c <stdio_exit_handler+0x10>)
 8005780:	4803      	ldr	r0, [pc, #12]	@ (8005790 <stdio_exit_handler+0x14>)
 8005782:	f000 b869 	b.w	8005858 <_fwalk_sglue>
 8005786:	bf00      	nop
 8005788:	2000000c 	.word	0x2000000c
 800578c:	080073c5 	.word	0x080073c5
 8005790:	2000001c 	.word	0x2000001c

08005794 <cleanup_stdio>:
 8005794:	6841      	ldr	r1, [r0, #4]
 8005796:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <cleanup_stdio+0x34>)
 8005798:	b510      	push	{r4, lr}
 800579a:	4299      	cmp	r1, r3
 800579c:	4604      	mov	r4, r0
 800579e:	d001      	beq.n	80057a4 <cleanup_stdio+0x10>
 80057a0:	f001 fe10 	bl	80073c4 <_fflush_r>
 80057a4:	68a1      	ldr	r1, [r4, #8]
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <cleanup_stdio+0x38>)
 80057a8:	4299      	cmp	r1, r3
 80057aa:	d002      	beq.n	80057b2 <cleanup_stdio+0x1e>
 80057ac:	4620      	mov	r0, r4
 80057ae:	f001 fe09 	bl	80073c4 <_fflush_r>
 80057b2:	68e1      	ldr	r1, [r4, #12]
 80057b4:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <cleanup_stdio+0x3c>)
 80057b6:	4299      	cmp	r1, r3
 80057b8:	d004      	beq.n	80057c4 <cleanup_stdio+0x30>
 80057ba:	4620      	mov	r0, r4
 80057bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c0:	f001 be00 	b.w	80073c4 <_fflush_r>
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	bf00      	nop
 80057c8:	20000374 	.word	0x20000374
 80057cc:	200003dc 	.word	0x200003dc
 80057d0:	20000444 	.word	0x20000444

080057d4 <global_stdio_init.part.0>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <global_stdio_init.part.0+0x30>)
 80057d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005808 <global_stdio_init.part.0+0x34>)
 80057da:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <global_stdio_init.part.0+0x38>)
 80057dc:	4620      	mov	r0, r4
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	2104      	movs	r1, #4
 80057e2:	2200      	movs	r2, #0
 80057e4:	f7ff ff94 	bl	8005710 <std>
 80057e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057ec:	2201      	movs	r2, #1
 80057ee:	2109      	movs	r1, #9
 80057f0:	f7ff ff8e 	bl	8005710 <std>
 80057f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057f8:	2202      	movs	r2, #2
 80057fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fe:	2112      	movs	r1, #18
 8005800:	f7ff bf86 	b.w	8005710 <std>
 8005804:	200004ac 	.word	0x200004ac
 8005808:	20000374 	.word	0x20000374
 800580c:	0800577d 	.word	0x0800577d

08005810 <__sfp_lock_acquire>:
 8005810:	4801      	ldr	r0, [pc, #4]	@ (8005818 <__sfp_lock_acquire+0x8>)
 8005812:	f000 b920 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 8005816:	bf00      	nop
 8005818:	200004b5 	.word	0x200004b5

0800581c <__sfp_lock_release>:
 800581c:	4801      	ldr	r0, [pc, #4]	@ (8005824 <__sfp_lock_release+0x8>)
 800581e:	f000 b91b 	b.w	8005a58 <__retarget_lock_release_recursive>
 8005822:	bf00      	nop
 8005824:	200004b5 	.word	0x200004b5

08005828 <__sinit>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4604      	mov	r4, r0
 800582c:	f7ff fff0 	bl	8005810 <__sfp_lock_acquire>
 8005830:	6a23      	ldr	r3, [r4, #32]
 8005832:	b11b      	cbz	r3, 800583c <__sinit+0x14>
 8005834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005838:	f7ff bff0 	b.w	800581c <__sfp_lock_release>
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__sinit+0x28>)
 800583e:	6223      	str	r3, [r4, #32]
 8005840:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <__sinit+0x2c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f5      	bne.n	8005834 <__sinit+0xc>
 8005848:	f7ff ffc4 	bl	80057d4 <global_stdio_init.part.0>
 800584c:	e7f2      	b.n	8005834 <__sinit+0xc>
 800584e:	bf00      	nop
 8005850:	08005795 	.word	0x08005795
 8005854:	200004ac 	.word	0x200004ac

08005858 <_fwalk_sglue>:
 8005858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800585c:	4607      	mov	r7, r0
 800585e:	4688      	mov	r8, r1
 8005860:	4614      	mov	r4, r2
 8005862:	2600      	movs	r6, #0
 8005864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005868:	f1b9 0901 	subs.w	r9, r9, #1
 800586c:	d505      	bpl.n	800587a <_fwalk_sglue+0x22>
 800586e:	6824      	ldr	r4, [r4, #0]
 8005870:	2c00      	cmp	r4, #0
 8005872:	d1f7      	bne.n	8005864 <_fwalk_sglue+0xc>
 8005874:	4630      	mov	r0, r6
 8005876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d907      	bls.n	8005890 <_fwalk_sglue+0x38>
 8005880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005884:	3301      	adds	r3, #1
 8005886:	d003      	beq.n	8005890 <_fwalk_sglue+0x38>
 8005888:	4629      	mov	r1, r5
 800588a:	4638      	mov	r0, r7
 800588c:	47c0      	blx	r8
 800588e:	4306      	orrs	r6, r0
 8005890:	3568      	adds	r5, #104	@ 0x68
 8005892:	e7e9      	b.n	8005868 <_fwalk_sglue+0x10>

08005894 <siprintf>:
 8005894:	b40e      	push	{r1, r2, r3}
 8005896:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800589a:	b500      	push	{lr}
 800589c:	b09c      	sub	sp, #112	@ 0x70
 800589e:	ab1d      	add	r3, sp, #116	@ 0x74
 80058a0:	9002      	str	r0, [sp, #8]
 80058a2:	9006      	str	r0, [sp, #24]
 80058a4:	9107      	str	r1, [sp, #28]
 80058a6:	9104      	str	r1, [sp, #16]
 80058a8:	4808      	ldr	r0, [pc, #32]	@ (80058cc <siprintf+0x38>)
 80058aa:	4909      	ldr	r1, [pc, #36]	@ (80058d0 <siprintf+0x3c>)
 80058ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	a902      	add	r1, sp, #8
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	f001 fc08 	bl	80070cc <_svfiprintf_r>
 80058bc:	2200      	movs	r2, #0
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	b01c      	add	sp, #112	@ 0x70
 80058c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c8:	b003      	add	sp, #12
 80058ca:	4770      	bx	lr
 80058cc:	20000018 	.word	0x20000018
 80058d0:	ffff0208 	.word	0xffff0208

080058d4 <__sread>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	460c      	mov	r4, r1
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	f000 f86c 	bl	80059b8 <_read_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	bfab      	itete	ge
 80058e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058e6:	89a3      	ldrhlt	r3, [r4, #12]
 80058e8:	181b      	addge	r3, r3, r0
 80058ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058ee:	bfac      	ite	ge
 80058f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058f2:	81a3      	strhlt	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__swrite>:
 80058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	461f      	mov	r7, r3
 80058fc:	898b      	ldrh	r3, [r1, #12]
 80058fe:	4605      	mov	r5, r0
 8005900:	05db      	lsls	r3, r3, #23
 8005902:	460c      	mov	r4, r1
 8005904:	4616      	mov	r6, r2
 8005906:	d505      	bpl.n	8005914 <__swrite+0x1e>
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	f000 f840 	bl	8005994 <_lseek_r>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	4632      	mov	r2, r6
 8005918:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	4628      	mov	r0, r5
 8005920:	463b      	mov	r3, r7
 8005922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	f000 b857 	b.w	80059dc <_write_r>

0800592e <__sseek>:
 800592e:	b510      	push	{r4, lr}
 8005930:	460c      	mov	r4, r1
 8005932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005936:	f000 f82d 	bl	8005994 <_lseek_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	bf15      	itete	ne
 8005940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800594a:	81a3      	strheq	r3, [r4, #12]
 800594c:	bf18      	it	ne
 800594e:	81a3      	strhne	r3, [r4, #12]
 8005950:	bd10      	pop	{r4, pc}

08005952 <__sclose>:
 8005952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005956:	f000 b80d 	b.w	8005974 <_close_r>

0800595a <memset>:
 800595a:	4603      	mov	r3, r0
 800595c:	4402      	add	r2, r0
 800595e:	4293      	cmp	r3, r2
 8005960:	d100      	bne.n	8005964 <memset+0xa>
 8005962:	4770      	bx	lr
 8005964:	f803 1b01 	strb.w	r1, [r3], #1
 8005968:	e7f9      	b.n	800595e <memset+0x4>
	...

0800596c <_localeconv_r>:
 800596c:	4800      	ldr	r0, [pc, #0]	@ (8005970 <_localeconv_r+0x4>)
 800596e:	4770      	bx	lr
 8005970:	20000158 	.word	0x20000158

08005974 <_close_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	2300      	movs	r3, #0
 8005978:	4d05      	ldr	r5, [pc, #20]	@ (8005990 <_close_r+0x1c>)
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	f7fc f9c9 	bl	8001d16 <_close>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_close_r+0x1a>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_close_r+0x1a>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	200004b0 	.word	0x200004b0

08005994 <_lseek_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	2200      	movs	r2, #0
 800599e:	4d05      	ldr	r5, [pc, #20]	@ (80059b4 <_lseek_r+0x20>)
 80059a0:	602a      	str	r2, [r5, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fc f9db 	bl	8001d5e <_lseek>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_lseek_r+0x1e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_lseek_r+0x1e>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	200004b0 	.word	0x200004b0

080059b8 <_read_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	2200      	movs	r2, #0
 80059c2:	4d05      	ldr	r5, [pc, #20]	@ (80059d8 <_read_r+0x20>)
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fc f96c 	bl	8001ca4 <_read>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_read_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_read_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200004b0 	.word	0x200004b0

080059dc <_write_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	2200      	movs	r2, #0
 80059e6:	4d05      	ldr	r5, [pc, #20]	@ (80059fc <_write_r+0x20>)
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f7fc f977 	bl	8001cde <_write>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_write_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_write_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200004b0 	.word	0x200004b0

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	@ (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000018 	.word	0x20000018

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	2600      	movs	r6, #0
 8005a10:	4d0c      	ldr	r5, [pc, #48]	@ (8005a44 <__libc_init_array+0x38>)
 8005a12:	4c0d      	ldr	r4, [pc, #52]	@ (8005a48 <__libc_init_array+0x3c>)
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	f002 f86e 	bl	8007afc <_init>
 8005a20:	2600      	movs	r6, #0
 8005a22:	4d0a      	ldr	r5, [pc, #40]	@ (8005a4c <__libc_init_array+0x40>)
 8005a24:	4c0a      	ldr	r4, [pc, #40]	@ (8005a50 <__libc_init_array+0x44>)
 8005a26:	1b64      	subs	r4, r4, r5
 8005a28:	10a4      	asrs	r4, r4, #2
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08008020 	.word	0x08008020
 8005a48:	08008020 	.word	0x08008020
 8005a4c:	08008020 	.word	0x08008020
 8005a50:	08008024 	.word	0x08008024

08005a54 <__retarget_lock_init_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_acquire_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <__retarget_lock_release_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <memchr>:
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	b2c9      	uxtb	r1, r1
 8005a60:	4402      	add	r2, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	d101      	bne.n	8005a6c <memchr+0x12>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e003      	b.n	8005a74 <memchr+0x1a>
 8005a6c:	7804      	ldrb	r4, [r0, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	428c      	cmp	r4, r1
 8005a72:	d1f6      	bne.n	8005a62 <memchr+0x8>
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <quorem>:
 8005a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6903      	ldr	r3, [r0, #16]
 8005a7c:	690c      	ldr	r4, [r1, #16]
 8005a7e:	4607      	mov	r7, r0
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	db7e      	blt.n	8005b82 <quorem+0x10c>
 8005a84:	3c01      	subs	r4, #1
 8005a86:	00a3      	lsls	r3, r4, #2
 8005a88:	f100 0514 	add.w	r5, r0, #20
 8005a8c:	f101 0814 	add.w	r8, r1, #20
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005aac:	d32e      	bcc.n	8005b0c <quorem+0x96>
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	46c4      	mov	ip, r8
 8005ab4:	46ae      	mov	lr, r5
 8005ab6:	46d3      	mov	fp, sl
 8005ab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005abc:	b298      	uxth	r0, r3
 8005abe:	fb06 a000 	mla	r0, r6, r0, sl
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	0c02      	lsrs	r2, r0, #16
 8005ac6:	fb06 2303 	mla	r3, r6, r3, r2
 8005aca:	f8de 2000 	ldr.w	r2, [lr]
 8005ace:	b280      	uxth	r0, r0
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	1a12      	subs	r2, r2, r0
 8005ad4:	445a      	add	r2, fp
 8005ad6:	f8de 0000 	ldr.w	r0, [lr]
 8005ada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005aee:	45e1      	cmp	r9, ip
 8005af0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005af4:	f84e 2b04 	str.w	r2, [lr], #4
 8005af8:	d2de      	bcs.n	8005ab8 <quorem+0x42>
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	58eb      	ldr	r3, [r5, r3]
 8005afe:	b92b      	cbnz	r3, 8005b0c <quorem+0x96>
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	3b04      	subs	r3, #4
 8005b04:	429d      	cmp	r5, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	d32f      	bcc.n	8005b6a <quorem+0xf4>
 8005b0a:	613c      	str	r4, [r7, #16]
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f001 f979 	bl	8006e04 <__mcmp>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	db25      	blt.n	8005b62 <quorem+0xec>
 8005b16:	4629      	mov	r1, r5
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b1e:	f8d1 c000 	ldr.w	ip, [r1]
 8005b22:	fa1f fe82 	uxth.w	lr, r2
 8005b26:	fa1f f38c 	uxth.w	r3, ip
 8005b2a:	eba3 030e 	sub.w	r3, r3, lr
 8005b2e:	4403      	add	r3, r0
 8005b30:	0c12      	lsrs	r2, r2, #16
 8005b32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b40:	45c1      	cmp	r9, r8
 8005b42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b46:	f841 3b04 	str.w	r3, [r1], #4
 8005b4a:	d2e6      	bcs.n	8005b1a <quorem+0xa4>
 8005b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b54:	b922      	cbnz	r2, 8005b60 <quorem+0xea>
 8005b56:	3b04      	subs	r3, #4
 8005b58:	429d      	cmp	r5, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	d30b      	bcc.n	8005b76 <quorem+0x100>
 8005b5e:	613c      	str	r4, [r7, #16]
 8005b60:	3601      	adds	r6, #1
 8005b62:	4630      	mov	r0, r6
 8005b64:	b003      	add	sp, #12
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d1cb      	bne.n	8005b0a <quorem+0x94>
 8005b72:	3c01      	subs	r4, #1
 8005b74:	e7c6      	b.n	8005b04 <quorem+0x8e>
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	3b04      	subs	r3, #4
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	d1ef      	bne.n	8005b5e <quorem+0xe8>
 8005b7e:	3c01      	subs	r4, #1
 8005b80:	e7ea      	b.n	8005b58 <quorem+0xe2>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e7ee      	b.n	8005b64 <quorem+0xee>
	...

08005b88 <_dtoa_r>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	461d      	mov	r5, r3
 8005b90:	69c7      	ldr	r7, [r0, #28]
 8005b92:	b097      	sub	sp, #92	@ 0x5c
 8005b94:	4683      	mov	fp, r0
 8005b96:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b9a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005b9c:	b97f      	cbnz	r7, 8005bbe <_dtoa_r+0x36>
 8005b9e:	2010      	movs	r0, #16
 8005ba0:	f000 fe02 	bl	80067a8 <malloc>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f8cb 001c 	str.w	r0, [fp, #28]
 8005baa:	b920      	cbnz	r0, 8005bb6 <_dtoa_r+0x2e>
 8005bac:	21ef      	movs	r1, #239	@ 0xef
 8005bae:	4ba8      	ldr	r3, [pc, #672]	@ (8005e50 <_dtoa_r+0x2c8>)
 8005bb0:	48a8      	ldr	r0, [pc, #672]	@ (8005e54 <_dtoa_r+0x2cc>)
 8005bb2:	f001 fc67 	bl	8007484 <__assert_func>
 8005bb6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bba:	6007      	str	r7, [r0, #0]
 8005bbc:	60c7      	str	r7, [r0, #12]
 8005bbe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	b159      	cbz	r1, 8005bde <_dtoa_r+0x56>
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4093      	lsls	r3, r2
 8005bcc:	604a      	str	r2, [r1, #4]
 8005bce:	608b      	str	r3, [r1, #8]
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	f000 fedf 	bl	8006994 <_Bfree>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	1e2b      	subs	r3, r5, #0
 8005be0:	bfaf      	iteee	ge
 8005be2:	2300      	movge	r3, #0
 8005be4:	2201      	movlt	r2, #1
 8005be6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005bea:	9303      	strlt	r3, [sp, #12]
 8005bec:	bfa8      	it	ge
 8005bee:	6033      	strge	r3, [r6, #0]
 8005bf0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bf4:	4b98      	ldr	r3, [pc, #608]	@ (8005e58 <_dtoa_r+0x2d0>)
 8005bf6:	bfb8      	it	lt
 8005bf8:	6032      	strlt	r2, [r6, #0]
 8005bfa:	ea33 0308 	bics.w	r3, r3, r8
 8005bfe:	d112      	bne.n	8005c26 <_dtoa_r+0x9e>
 8005c00:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c0c:	4323      	orrs	r3, r4
 8005c0e:	f000 8550 	beq.w	80066b2 <_dtoa_r+0xb2a>
 8005c12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c14:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005e5c <_dtoa_r+0x2d4>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8552 	beq.w	80066c2 <_dtoa_r+0xb3a>
 8005c1e:	f10a 0303 	add.w	r3, sl, #3
 8005c22:	f000 bd4c 	b.w	80066be <_dtoa_r+0xb36>
 8005c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c32:	2200      	movs	r2, #0
 8005c34:	2300      	movs	r3, #0
 8005c36:	f7fa feb7 	bl	80009a8 <__aeabi_dcmpeq>
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	b158      	cbz	r0, 8005c56 <_dtoa_r+0xce>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c46:	b113      	cbz	r3, 8005c4e <_dtoa_r+0xc6>
 8005c48:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <_dtoa_r+0x2d8>)
 8005c4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005e64 <_dtoa_r+0x2dc>
 8005c52:	f000 bd36 	b.w	80066c2 <_dtoa_r+0xb3a>
 8005c56:	ab14      	add	r3, sp, #80	@ 0x50
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	ab15      	add	r3, sp, #84	@ 0x54
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4658      	mov	r0, fp
 8005c60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c64:	f001 f97e 	bl	8006f64 <__d2b>
 8005c68:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	d077      	beq.n	8005d62 <_dtoa_r+0x1da>
 8005c72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c78:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c80:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c84:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c88:	9712      	str	r7, [sp, #72]	@ 0x48
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b76      	ldr	r3, [pc, #472]	@ (8005e68 <_dtoa_r+0x2e0>)
 8005c90:	f7fa fa6a 	bl	8000168 <__aeabi_dsub>
 8005c94:	a368      	add	r3, pc, #416	@ (adr r3, 8005e38 <_dtoa_r+0x2b0>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	a368      	add	r3, pc, #416	@ (adr r3, 8005e40 <_dtoa_r+0x2b8>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fa62 	bl	800016c <__adddf3>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4630      	mov	r0, r6
 8005cac:	460d      	mov	r5, r1
 8005cae:	f7fa fba9 	bl	8000404 <__aeabi_i2d>
 8005cb2:	a365      	add	r3, pc, #404	@ (adr r3, 8005e48 <_dtoa_r+0x2c0>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc0e 	bl	80004d8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa fa52 	bl	800016c <__adddf3>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	f7fa feb4 	bl	8000a38 <__aeabi_d2iz>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4607      	mov	r7, r0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fe6f 	bl	80009bc <__aeabi_dcmplt>
 8005cde:	b140      	cbz	r0, 8005cf2 <_dtoa_r+0x16a>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7fa fb8f 	bl	8000404 <__aeabi_i2d>
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	462b      	mov	r3, r5
 8005cea:	f7fa fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8005cee:	b900      	cbnz	r0, 8005cf2 <_dtoa_r+0x16a>
 8005cf0:	3f01      	subs	r7, #1
 8005cf2:	2f16      	cmp	r7, #22
 8005cf4:	d853      	bhi.n	8005d9e <_dtoa_r+0x216>
 8005cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8005e6c <_dtoa_r+0x2e4>)
 8005cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fe5a 	bl	80009bc <__aeabi_dcmplt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d04a      	beq.n	8005da2 <_dtoa_r+0x21a>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	3f01      	subs	r7, #1
 8005d10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d14:	1b9b      	subs	r3, r3, r6
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	bf46      	itte	mi
 8005d1a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d1e:	2300      	movmi	r3, #0
 8005d20:	f04f 0800 	movpl.w	r8, #0
 8005d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d26:	bf48      	it	mi
 8005d28:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	db3b      	blt.n	8005da6 <_dtoa_r+0x21e>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d30:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d32:	443b      	add	r3, r7
 8005d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d36:	2300      	movs	r3, #0
 8005d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d3c:	2b09      	cmp	r3, #9
 8005d3e:	d866      	bhi.n	8005e0e <_dtoa_r+0x286>
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	bfc4      	itt	gt
 8005d44:	3b04      	subgt	r3, #4
 8005d46:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005d48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d4a:	bfc8      	it	gt
 8005d4c:	2400      	movgt	r4, #0
 8005d4e:	f1a3 0302 	sub.w	r3, r3, #2
 8005d52:	bfd8      	it	le
 8005d54:	2401      	movle	r4, #1
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d864      	bhi.n	8005e24 <_dtoa_r+0x29c>
 8005d5a:	e8df f003 	tbb	[pc, r3]
 8005d5e:	382b      	.short	0x382b
 8005d60:	5636      	.short	0x5636
 8005d62:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d66:	441e      	add	r6, r3
 8005d68:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	bfc1      	itttt	gt
 8005d70:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d74:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d78:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d7c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d80:	bfd6      	itet	le
 8005d82:	f1c3 0320 	rsble	r3, r3, #32
 8005d86:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d8a:	fa04 f003 	lslle.w	r0, r4, r3
 8005d8e:	f7fa fb29 	bl	80003e4 <__aeabi_ui2d>
 8005d92:	2201      	movs	r2, #1
 8005d94:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d98:	3e01      	subs	r6, #1
 8005d9a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d9c:	e775      	b.n	8005c8a <_dtoa_r+0x102>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7b6      	b.n	8005d10 <_dtoa_r+0x188>
 8005da2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005da4:	e7b5      	b.n	8005d12 <_dtoa_r+0x18a>
 8005da6:	427b      	negs	r3, r7
 8005da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005daa:	2300      	movs	r3, #0
 8005dac:	eba8 0807 	sub.w	r8, r8, r7
 8005db0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005db2:	e7c2      	b.n	8005d3a <_dtoa_r+0x1b2>
 8005db4:	2300      	movs	r3, #0
 8005db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005db8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dc35      	bgt.n	8005e2a <_dtoa_r+0x2a2>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005dc8:	e00b      	b.n	8005de2 <_dtoa_r+0x25a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e7f3      	b.n	8005db6 <_dtoa_r+0x22e>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	9308      	str	r3, [sp, #32]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	bfb8      	it	lt
 8005de0:	2301      	movlt	r3, #1
 8005de2:	2100      	movs	r1, #0
 8005de4:	2204      	movs	r2, #4
 8005de6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005dea:	f102 0514 	add.w	r5, r2, #20
 8005dee:	429d      	cmp	r5, r3
 8005df0:	d91f      	bls.n	8005e32 <_dtoa_r+0x2aa>
 8005df2:	6041      	str	r1, [r0, #4]
 8005df4:	4658      	mov	r0, fp
 8005df6:	f000 fd8d 	bl	8006914 <_Balloc>
 8005dfa:	4682      	mov	sl, r0
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d139      	bne.n	8005e74 <_dtoa_r+0x2ec>
 8005e00:	4602      	mov	r2, r0
 8005e02:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e06:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <_dtoa_r+0x2e8>)
 8005e08:	e6d2      	b.n	8005bb0 <_dtoa_r+0x28>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7e0      	b.n	8005dd0 <_dtoa_r+0x248>
 8005e0e:	2401      	movs	r4, #1
 8005e10:	2300      	movs	r3, #0
 8005e12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e14:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e20:	2312      	movs	r3, #18
 8005e22:	e7d0      	b.n	8005dc6 <_dtoa_r+0x23e>
 8005e24:	2301      	movs	r3, #1
 8005e26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e28:	e7f5      	b.n	8005e16 <_dtoa_r+0x28e>
 8005e2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e30:	e7d7      	b.n	8005de2 <_dtoa_r+0x25a>
 8005e32:	3101      	adds	r1, #1
 8005e34:	0052      	lsls	r2, r2, #1
 8005e36:	e7d8      	b.n	8005dea <_dtoa_r+0x262>
 8005e38:	636f4361 	.word	0x636f4361
 8005e3c:	3fd287a7 	.word	0x3fd287a7
 8005e40:	8b60c8b3 	.word	0x8b60c8b3
 8005e44:	3fc68a28 	.word	0x3fc68a28
 8005e48:	509f79fb 	.word	0x509f79fb
 8005e4c:	3fd34413 	.word	0x3fd34413
 8005e50:	08007ceb 	.word	0x08007ceb
 8005e54:	08007d02 	.word	0x08007d02
 8005e58:	7ff00000 	.word	0x7ff00000
 8005e5c:	08007ce7 	.word	0x08007ce7
 8005e60:	08007cbb 	.word	0x08007cbb
 8005e64:	08007cba 	.word	0x08007cba
 8005e68:	3ff80000 	.word	0x3ff80000
 8005e6c:	08007df8 	.word	0x08007df8
 8005e70:	08007d5a 	.word	0x08007d5a
 8005e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e78:	6018      	str	r0, [r3, #0]
 8005e7a:	9b07      	ldr	r3, [sp, #28]
 8005e7c:	2b0e      	cmp	r3, #14
 8005e7e:	f200 80a4 	bhi.w	8005fca <_dtoa_r+0x442>
 8005e82:	2c00      	cmp	r4, #0
 8005e84:	f000 80a1 	beq.w	8005fca <_dtoa_r+0x442>
 8005e88:	2f00      	cmp	r7, #0
 8005e8a:	dd33      	ble.n	8005ef4 <_dtoa_r+0x36c>
 8005e8c:	4b86      	ldr	r3, [pc, #536]	@ (80060a8 <_dtoa_r+0x520>)
 8005e8e:	f007 020f 	and.w	r2, r7, #15
 8005e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e96:	05f8      	lsls	r0, r7, #23
 8005e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ea4:	d516      	bpl.n	8005ed4 <_dtoa_r+0x34c>
 8005ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eaa:	4b80      	ldr	r3, [pc, #512]	@ (80060ac <_dtoa_r+0x524>)
 8005eac:	2603      	movs	r6, #3
 8005eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eb2:	f7fa fc3b 	bl	800072c <__aeabi_ddiv>
 8005eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eba:	f004 040f 	and.w	r4, r4, #15
 8005ebe:	4d7b      	ldr	r5, [pc, #492]	@ (80060ac <_dtoa_r+0x524>)
 8005ec0:	b954      	cbnz	r4, 8005ed8 <_dtoa_r+0x350>
 8005ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eca:	f7fa fc2f 	bl	800072c <__aeabi_ddiv>
 8005ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed2:	e028      	b.n	8005f26 <_dtoa_r+0x39e>
 8005ed4:	2602      	movs	r6, #2
 8005ed6:	e7f2      	b.n	8005ebe <_dtoa_r+0x336>
 8005ed8:	07e1      	lsls	r1, r4, #31
 8005eda:	d508      	bpl.n	8005eee <_dtoa_r+0x366>
 8005edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ee4:	f7fa faf8 	bl	80004d8 <__aeabi_dmul>
 8005ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eec:	3601      	adds	r6, #1
 8005eee:	1064      	asrs	r4, r4, #1
 8005ef0:	3508      	adds	r5, #8
 8005ef2:	e7e5      	b.n	8005ec0 <_dtoa_r+0x338>
 8005ef4:	f000 80d2 	beq.w	800609c <_dtoa_r+0x514>
 8005ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005efc:	427c      	negs	r4, r7
 8005efe:	4b6a      	ldr	r3, [pc, #424]	@ (80060a8 <_dtoa_r+0x520>)
 8005f00:	f004 020f 	and.w	r2, r4, #15
 8005f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	2602      	movs	r6, #2
 8005f12:	2300      	movs	r3, #0
 8005f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f18:	4d64      	ldr	r5, [pc, #400]	@ (80060ac <_dtoa_r+0x524>)
 8005f1a:	1124      	asrs	r4, r4, #4
 8005f1c:	2c00      	cmp	r4, #0
 8005f1e:	f040 80b2 	bne.w	8006086 <_dtoa_r+0x4fe>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d3      	bne.n	8005ece <_dtoa_r+0x346>
 8005f26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80b7 	beq.w	80060a0 <_dtoa_r+0x518>
 8005f32:	2200      	movs	r2, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	4b5d      	ldr	r3, [pc, #372]	@ (80060b0 <_dtoa_r+0x528>)
 8005f3a:	f7fa fd3f 	bl	80009bc <__aeabi_dcmplt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f000 80ae 	beq.w	80060a0 <_dtoa_r+0x518>
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80aa 	beq.w	80060a0 <_dtoa_r+0x518>
 8005f4c:	9b08      	ldr	r3, [sp, #32]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dd37      	ble.n	8005fc2 <_dtoa_r+0x43a>
 8005f52:	1e7b      	subs	r3, r7, #1
 8005f54:	4620      	mov	r0, r4
 8005f56:	9304      	str	r3, [sp, #16]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4b55      	ldr	r3, [pc, #340]	@ (80060b4 <_dtoa_r+0x52c>)
 8005f5e:	f7fa fabb 	bl	80004d8 <__aeabi_dmul>
 8005f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f66:	9c08      	ldr	r4, [sp, #32]
 8005f68:	3601      	adds	r6, #1
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f7fa fa4a 	bl	8000404 <__aeabi_i2d>
 8005f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f74:	f7fa fab0 	bl	80004d8 <__aeabi_dmul>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80060b8 <_dtoa_r+0x530>)
 8005f7c:	f7fa f8f6 	bl	800016c <__adddf3>
 8005f80:	4605      	mov	r5, r0
 8005f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f86:	2c00      	cmp	r4, #0
 8005f88:	f040 809a 	bne.w	80060c0 <_dtoa_r+0x538>
 8005f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	4b4a      	ldr	r3, [pc, #296]	@ (80060bc <_dtoa_r+0x534>)
 8005f94:	f7fa f8e8 	bl	8000168 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4633      	mov	r3, r6
 8005fa4:	f7fa fd28 	bl	80009f8 <__aeabi_dcmpgt>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f040 828e 	bne.w	80064ca <_dtoa_r+0x942>
 8005fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fb8:	f7fa fd00 	bl	80009bc <__aeabi_dcmplt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f040 8127 	bne.w	8006210 <_dtoa_r+0x688>
 8005fc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005fca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f2c0 8163 	blt.w	8006298 <_dtoa_r+0x710>
 8005fd2:	2f0e      	cmp	r7, #14
 8005fd4:	f300 8160 	bgt.w	8006298 <_dtoa_r+0x710>
 8005fd8:	4b33      	ldr	r3, [pc, #204]	@ (80060a8 <_dtoa_r+0x520>)
 8005fda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fe2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fe6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da03      	bge.n	8005ff4 <_dtoa_r+0x46c>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f340 8100 	ble.w	80061f4 <_dtoa_r+0x66c>
 8005ff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ff8:	4656      	mov	r6, sl
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fb93 	bl	800072c <__aeabi_ddiv>
 8006006:	f7fa fd17 	bl	8000a38 <__aeabi_d2iz>
 800600a:	4680      	mov	r8, r0
 800600c:	f7fa f9fa 	bl	8000404 <__aeabi_i2d>
 8006010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006014:	f7fa fa60 	bl	80004d8 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa f8a2 	bl	8000168 <__aeabi_dsub>
 8006024:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006028:	9d07      	ldr	r5, [sp, #28]
 800602a:	f806 4b01 	strb.w	r4, [r6], #1
 800602e:	eba6 040a 	sub.w	r4, r6, sl
 8006032:	42a5      	cmp	r5, r4
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	f040 8116 	bne.w	8006268 <_dtoa_r+0x6e0>
 800603c:	f7fa f896 	bl	800016c <__adddf3>
 8006040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006044:	4604      	mov	r4, r0
 8006046:	460d      	mov	r5, r1
 8006048:	f7fa fcd6 	bl	80009f8 <__aeabi_dcmpgt>
 800604c:	2800      	cmp	r0, #0
 800604e:	f040 80f8 	bne.w	8006242 <_dtoa_r+0x6ba>
 8006052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f7fa fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800605e:	b118      	cbz	r0, 8006068 <_dtoa_r+0x4e0>
 8006060:	f018 0f01 	tst.w	r8, #1
 8006064:	f040 80ed 	bne.w	8006242 <_dtoa_r+0x6ba>
 8006068:	4649      	mov	r1, r9
 800606a:	4658      	mov	r0, fp
 800606c:	f000 fc92 	bl	8006994 <_Bfree>
 8006070:	2300      	movs	r3, #0
 8006072:	7033      	strb	r3, [r6, #0]
 8006074:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006076:	3701      	adds	r7, #1
 8006078:	601f      	str	r7, [r3, #0]
 800607a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8320 	beq.w	80066c2 <_dtoa_r+0xb3a>
 8006082:	601e      	str	r6, [r3, #0]
 8006084:	e31d      	b.n	80066c2 <_dtoa_r+0xb3a>
 8006086:	07e2      	lsls	r2, r4, #31
 8006088:	d505      	bpl.n	8006096 <_dtoa_r+0x50e>
 800608a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800608e:	f7fa fa23 	bl	80004d8 <__aeabi_dmul>
 8006092:	2301      	movs	r3, #1
 8006094:	3601      	adds	r6, #1
 8006096:	1064      	asrs	r4, r4, #1
 8006098:	3508      	adds	r5, #8
 800609a:	e73f      	b.n	8005f1c <_dtoa_r+0x394>
 800609c:	2602      	movs	r6, #2
 800609e:	e742      	b.n	8005f26 <_dtoa_r+0x39e>
 80060a0:	9c07      	ldr	r4, [sp, #28]
 80060a2:	9704      	str	r7, [sp, #16]
 80060a4:	e761      	b.n	8005f6a <_dtoa_r+0x3e2>
 80060a6:	bf00      	nop
 80060a8:	08007df8 	.word	0x08007df8
 80060ac:	08007dd0 	.word	0x08007dd0
 80060b0:	3ff00000 	.word	0x3ff00000
 80060b4:	40240000 	.word	0x40240000
 80060b8:	401c0000 	.word	0x401c0000
 80060bc:	40140000 	.word	0x40140000
 80060c0:	4b70      	ldr	r3, [pc, #448]	@ (8006284 <_dtoa_r+0x6fc>)
 80060c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060cc:	4454      	add	r4, sl
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d045      	beq.n	800615e <_dtoa_r+0x5d6>
 80060d2:	2000      	movs	r0, #0
 80060d4:	496c      	ldr	r1, [pc, #432]	@ (8006288 <_dtoa_r+0x700>)
 80060d6:	f7fa fb29 	bl	800072c <__aeabi_ddiv>
 80060da:	4633      	mov	r3, r6
 80060dc:	462a      	mov	r2, r5
 80060de:	f7fa f843 	bl	8000168 <__aeabi_dsub>
 80060e2:	4656      	mov	r6, sl
 80060e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ec:	f7fa fca4 	bl	8000a38 <__aeabi_d2iz>
 80060f0:	4605      	mov	r5, r0
 80060f2:	f7fa f987 	bl	8000404 <__aeabi_i2d>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fe:	f7fa f833 	bl	8000168 <__aeabi_dsub>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	3530      	adds	r5, #48	@ 0x30
 8006108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800610c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006110:	f806 5b01 	strb.w	r5, [r6], #1
 8006114:	f7fa fc52 	bl	80009bc <__aeabi_dcmplt>
 8006118:	2800      	cmp	r0, #0
 800611a:	d163      	bne.n	80061e4 <_dtoa_r+0x65c>
 800611c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006120:	2000      	movs	r0, #0
 8006122:	495a      	ldr	r1, [pc, #360]	@ (800628c <_dtoa_r+0x704>)
 8006124:	f7fa f820 	bl	8000168 <__aeabi_dsub>
 8006128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800612c:	f7fa fc46 	bl	80009bc <__aeabi_dcmplt>
 8006130:	2800      	cmp	r0, #0
 8006132:	f040 8087 	bne.w	8006244 <_dtoa_r+0x6bc>
 8006136:	42a6      	cmp	r6, r4
 8006138:	f43f af43 	beq.w	8005fc2 <_dtoa_r+0x43a>
 800613c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006140:	2200      	movs	r2, #0
 8006142:	4b53      	ldr	r3, [pc, #332]	@ (8006290 <_dtoa_r+0x708>)
 8006144:	f7fa f9c8 	bl	80004d8 <__aeabi_dmul>
 8006148:	2200      	movs	r2, #0
 800614a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	4b4f      	ldr	r3, [pc, #316]	@ (8006290 <_dtoa_r+0x708>)
 8006154:	f7fa f9c0 	bl	80004d8 <__aeabi_dmul>
 8006158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800615c:	e7c4      	b.n	80060e8 <_dtoa_r+0x560>
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	f7fa f9b9 	bl	80004d8 <__aeabi_dmul>
 8006166:	4656      	mov	r6, sl
 8006168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800616c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800616e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006172:	f7fa fc61 	bl	8000a38 <__aeabi_d2iz>
 8006176:	4605      	mov	r5, r0
 8006178:	f7fa f944 	bl	8000404 <__aeabi_i2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006184:	f7f9 fff0 	bl	8000168 <__aeabi_dsub>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	3530      	adds	r5, #48	@ 0x30
 800618e:	f806 5b01 	strb.w	r5, [r6], #1
 8006192:	42a6      	cmp	r6, r4
 8006194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	d124      	bne.n	80061e8 <_dtoa_r+0x660>
 800619e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a2:	4b39      	ldr	r3, [pc, #228]	@ (8006288 <_dtoa_r+0x700>)
 80061a4:	f7f9 ffe2 	bl	800016c <__adddf3>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b0:	f7fa fc22 	bl	80009f8 <__aeabi_dcmpgt>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d145      	bne.n	8006244 <_dtoa_r+0x6bc>
 80061b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061bc:	2000      	movs	r0, #0
 80061be:	4932      	ldr	r1, [pc, #200]	@ (8006288 <_dtoa_r+0x700>)
 80061c0:	f7f9 ffd2 	bl	8000168 <__aeabi_dsub>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061cc:	f7fa fbf6 	bl	80009bc <__aeabi_dcmplt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f43f aef6 	beq.w	8005fc2 <_dtoa_r+0x43a>
 80061d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80061d8:	1e73      	subs	r3, r6, #1
 80061da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061e0:	2b30      	cmp	r3, #48	@ 0x30
 80061e2:	d0f8      	beq.n	80061d6 <_dtoa_r+0x64e>
 80061e4:	9f04      	ldr	r7, [sp, #16]
 80061e6:	e73f      	b.n	8006068 <_dtoa_r+0x4e0>
 80061e8:	4b29      	ldr	r3, [pc, #164]	@ (8006290 <_dtoa_r+0x708>)
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f2:	e7bc      	b.n	800616e <_dtoa_r+0x5e6>
 80061f4:	d10c      	bne.n	8006210 <_dtoa_r+0x688>
 80061f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061fa:	2200      	movs	r2, #0
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <_dtoa_r+0x70c>)
 80061fe:	f7fa f96b 	bl	80004d8 <__aeabi_dmul>
 8006202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006206:	f7fa fbed 	bl	80009e4 <__aeabi_dcmpge>
 800620a:	2800      	cmp	r0, #0
 800620c:	f000 815b 	beq.w	80064c6 <_dtoa_r+0x93e>
 8006210:	2400      	movs	r4, #0
 8006212:	4625      	mov	r5, r4
 8006214:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006216:	4656      	mov	r6, sl
 8006218:	43db      	mvns	r3, r3
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	2700      	movs	r7, #0
 800621e:	4621      	mov	r1, r4
 8006220:	4658      	mov	r0, fp
 8006222:	f000 fbb7 	bl	8006994 <_Bfree>
 8006226:	2d00      	cmp	r5, #0
 8006228:	d0dc      	beq.n	80061e4 <_dtoa_r+0x65c>
 800622a:	b12f      	cbz	r7, 8006238 <_dtoa_r+0x6b0>
 800622c:	42af      	cmp	r7, r5
 800622e:	d003      	beq.n	8006238 <_dtoa_r+0x6b0>
 8006230:	4639      	mov	r1, r7
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fbae 	bl	8006994 <_Bfree>
 8006238:	4629      	mov	r1, r5
 800623a:	4658      	mov	r0, fp
 800623c:	f000 fbaa 	bl	8006994 <_Bfree>
 8006240:	e7d0      	b.n	80061e4 <_dtoa_r+0x65c>
 8006242:	9704      	str	r7, [sp, #16]
 8006244:	4633      	mov	r3, r6
 8006246:	461e      	mov	r6, r3
 8006248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800624c:	2a39      	cmp	r2, #57	@ 0x39
 800624e:	d107      	bne.n	8006260 <_dtoa_r+0x6d8>
 8006250:	459a      	cmp	sl, r3
 8006252:	d1f8      	bne.n	8006246 <_dtoa_r+0x6be>
 8006254:	9a04      	ldr	r2, [sp, #16]
 8006256:	3201      	adds	r2, #1
 8006258:	9204      	str	r2, [sp, #16]
 800625a:	2230      	movs	r2, #48	@ 0x30
 800625c:	f88a 2000 	strb.w	r2, [sl]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	3201      	adds	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e7bd      	b.n	80061e4 <_dtoa_r+0x65c>
 8006268:	2200      	movs	r2, #0
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <_dtoa_r+0x708>)
 800626c:	f7fa f934 	bl	80004d8 <__aeabi_dmul>
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	f7fa fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800627c:	2800      	cmp	r0, #0
 800627e:	f43f aebc 	beq.w	8005ffa <_dtoa_r+0x472>
 8006282:	e6f1      	b.n	8006068 <_dtoa_r+0x4e0>
 8006284:	08007df8 	.word	0x08007df8
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	3ff00000 	.word	0x3ff00000
 8006290:	40240000 	.word	0x40240000
 8006294:	40140000 	.word	0x40140000
 8006298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800629a:	2a00      	cmp	r2, #0
 800629c:	f000 80db 	beq.w	8006456 <_dtoa_r+0x8ce>
 80062a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062a2:	2a01      	cmp	r2, #1
 80062a4:	f300 80bf 	bgt.w	8006426 <_dtoa_r+0x89e>
 80062a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	f000 80b7 	beq.w	800641e <_dtoa_r+0x896>
 80062b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062b4:	4646      	mov	r6, r8
 80062b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ba:	2101      	movs	r1, #1
 80062bc:	441a      	add	r2, r3
 80062be:	4658      	mov	r0, fp
 80062c0:	4498      	add	r8, r3
 80062c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062c4:	f000 fc1a 	bl	8006afc <__i2b>
 80062c8:	4605      	mov	r5, r0
 80062ca:	b15e      	cbz	r6, 80062e4 <_dtoa_r+0x75c>
 80062cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dd08      	ble.n	80062e4 <_dtoa_r+0x75c>
 80062d2:	42b3      	cmp	r3, r6
 80062d4:	bfa8      	it	ge
 80062d6:	4633      	movge	r3, r6
 80062d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062da:	eba8 0803 	sub.w	r8, r8, r3
 80062de:	1af6      	subs	r6, r6, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062e6:	b1f3      	cbz	r3, 8006326 <_dtoa_r+0x79e>
 80062e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80b7 	beq.w	800645e <_dtoa_r+0x8d6>
 80062f0:	b18c      	cbz	r4, 8006316 <_dtoa_r+0x78e>
 80062f2:	4629      	mov	r1, r5
 80062f4:	4622      	mov	r2, r4
 80062f6:	4658      	mov	r0, fp
 80062f8:	f000 fcbe 	bl	8006c78 <__pow5mult>
 80062fc:	464a      	mov	r2, r9
 80062fe:	4601      	mov	r1, r0
 8006300:	4605      	mov	r5, r0
 8006302:	4658      	mov	r0, fp
 8006304:	f000 fc10 	bl	8006b28 <__multiply>
 8006308:	4649      	mov	r1, r9
 800630a:	9004      	str	r0, [sp, #16]
 800630c:	4658      	mov	r0, fp
 800630e:	f000 fb41 	bl	8006994 <_Bfree>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	4699      	mov	r9, r3
 8006316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006318:	1b1a      	subs	r2, r3, r4
 800631a:	d004      	beq.n	8006326 <_dtoa_r+0x79e>
 800631c:	4649      	mov	r1, r9
 800631e:	4658      	mov	r0, fp
 8006320:	f000 fcaa 	bl	8006c78 <__pow5mult>
 8006324:	4681      	mov	r9, r0
 8006326:	2101      	movs	r1, #1
 8006328:	4658      	mov	r0, fp
 800632a:	f000 fbe7 	bl	8006afc <__i2b>
 800632e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006330:	4604      	mov	r4, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 81c9 	beq.w	80066ca <_dtoa_r+0xb42>
 8006338:	461a      	mov	r2, r3
 800633a:	4601      	mov	r1, r0
 800633c:	4658      	mov	r0, fp
 800633e:	f000 fc9b 	bl	8006c78 <__pow5mult>
 8006342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006344:	4604      	mov	r4, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	f300 808f 	bgt.w	800646a <_dtoa_r+0x8e2>
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8087 	bne.w	8006462 <_dtoa_r+0x8da>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800635a:	2b00      	cmp	r3, #0
 800635c:	f040 8083 	bne.w	8006466 <_dtoa_r+0x8de>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006366:	0d1b      	lsrs	r3, r3, #20
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	b12b      	cbz	r3, 8006378 <_dtoa_r+0x7f0>
 800636c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	3301      	adds	r3, #1
 8006374:	9309      	str	r3, [sp, #36]	@ 0x24
 8006376:	2301      	movs	r3, #1
 8006378:	930a      	str	r3, [sp, #40]	@ 0x28
 800637a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 81aa 	beq.w	80066d6 <_dtoa_r+0xb4e>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006388:	6918      	ldr	r0, [r3, #16]
 800638a:	f000 fb6b 	bl	8006a64 <__hi0bits>
 800638e:	f1c0 0020 	rsb	r0, r0, #32
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	4418      	add	r0, r3
 8006396:	f010 001f 	ands.w	r0, r0, #31
 800639a:	d071      	beq.n	8006480 <_dtoa_r+0x8f8>
 800639c:	f1c0 0320 	rsb	r3, r0, #32
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	dd65      	ble.n	8006470 <_dtoa_r+0x8e8>
 80063a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a6:	f1c0 001c 	rsb	r0, r0, #28
 80063aa:	4403      	add	r3, r0
 80063ac:	4480      	add	r8, r0
 80063ae:	4406      	add	r6, r0
 80063b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b2:	f1b8 0f00 	cmp.w	r8, #0
 80063b6:	dd05      	ble.n	80063c4 <_dtoa_r+0x83c>
 80063b8:	4649      	mov	r1, r9
 80063ba:	4642      	mov	r2, r8
 80063bc:	4658      	mov	r0, fp
 80063be:	f000 fcb5 	bl	8006d2c <__lshift>
 80063c2:	4681      	mov	r9, r0
 80063c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dd05      	ble.n	80063d6 <_dtoa_r+0x84e>
 80063ca:	4621      	mov	r1, r4
 80063cc:	461a      	mov	r2, r3
 80063ce:	4658      	mov	r0, fp
 80063d0:	f000 fcac 	bl	8006d2c <__lshift>
 80063d4:	4604      	mov	r4, r0
 80063d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d053      	beq.n	8006484 <_dtoa_r+0x8fc>
 80063dc:	4621      	mov	r1, r4
 80063de:	4648      	mov	r0, r9
 80063e0:	f000 fd10 	bl	8006e04 <__mcmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	da4d      	bge.n	8006484 <_dtoa_r+0x8fc>
 80063e8:	1e7b      	subs	r3, r7, #1
 80063ea:	4649      	mov	r1, r9
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	220a      	movs	r2, #10
 80063f0:	2300      	movs	r3, #0
 80063f2:	4658      	mov	r0, fp
 80063f4:	f000 faf0 	bl	80069d8 <__multadd>
 80063f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063fa:	4681      	mov	r9, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 816c 	beq.w	80066da <_dtoa_r+0xb52>
 8006402:	2300      	movs	r3, #0
 8006404:	4629      	mov	r1, r5
 8006406:	220a      	movs	r2, #10
 8006408:	4658      	mov	r0, fp
 800640a:	f000 fae5 	bl	80069d8 <__multadd>
 800640e:	9b08      	ldr	r3, [sp, #32]
 8006410:	4605      	mov	r5, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	dc61      	bgt.n	80064da <_dtoa_r+0x952>
 8006416:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006418:	2b02      	cmp	r3, #2
 800641a:	dc3b      	bgt.n	8006494 <_dtoa_r+0x90c>
 800641c:	e05d      	b.n	80064da <_dtoa_r+0x952>
 800641e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006420:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006424:	e746      	b.n	80062b4 <_dtoa_r+0x72c>
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	1e5c      	subs	r4, r3, #1
 800642a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800642c:	42a3      	cmp	r3, r4
 800642e:	bfbf      	itttt	lt
 8006430:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006432:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006434:	1ae3      	sublt	r3, r4, r3
 8006436:	18d2      	addlt	r2, r2, r3
 8006438:	bfa8      	it	ge
 800643a:	1b1c      	subge	r4, r3, r4
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	bfbe      	ittt	lt
 8006440:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006442:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006444:	2400      	movlt	r4, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	bfb5      	itete	lt
 800644a:	eba8 0603 	sublt.w	r6, r8, r3
 800644e:	4646      	movge	r6, r8
 8006450:	2300      	movlt	r3, #0
 8006452:	9b07      	ldrge	r3, [sp, #28]
 8006454:	e730      	b.n	80062b8 <_dtoa_r+0x730>
 8006456:	4646      	mov	r6, r8
 8006458:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800645c:	e735      	b.n	80062ca <_dtoa_r+0x742>
 800645e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006460:	e75c      	b.n	800631c <_dtoa_r+0x794>
 8006462:	2300      	movs	r3, #0
 8006464:	e788      	b.n	8006378 <_dtoa_r+0x7f0>
 8006466:	9b02      	ldr	r3, [sp, #8]
 8006468:	e786      	b.n	8006378 <_dtoa_r+0x7f0>
 800646a:	2300      	movs	r3, #0
 800646c:	930a      	str	r3, [sp, #40]	@ 0x28
 800646e:	e788      	b.n	8006382 <_dtoa_r+0x7fa>
 8006470:	d09f      	beq.n	80063b2 <_dtoa_r+0x82a>
 8006472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006474:	331c      	adds	r3, #28
 8006476:	441a      	add	r2, r3
 8006478:	4498      	add	r8, r3
 800647a:	441e      	add	r6, r3
 800647c:	9209      	str	r2, [sp, #36]	@ 0x24
 800647e:	e798      	b.n	80063b2 <_dtoa_r+0x82a>
 8006480:	4603      	mov	r3, r0
 8006482:	e7f6      	b.n	8006472 <_dtoa_r+0x8ea>
 8006484:	9b07      	ldr	r3, [sp, #28]
 8006486:	9704      	str	r7, [sp, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc20      	bgt.n	80064ce <_dtoa_r+0x946>
 800648c:	9308      	str	r3, [sp, #32]
 800648e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006490:	2b02      	cmp	r3, #2
 8006492:	dd1e      	ble.n	80064d2 <_dtoa_r+0x94a>
 8006494:	9b08      	ldr	r3, [sp, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f47f aebc 	bne.w	8006214 <_dtoa_r+0x68c>
 800649c:	4621      	mov	r1, r4
 800649e:	2205      	movs	r2, #5
 80064a0:	4658      	mov	r0, fp
 80064a2:	f000 fa99 	bl	80069d8 <__multadd>
 80064a6:	4601      	mov	r1, r0
 80064a8:	4604      	mov	r4, r0
 80064aa:	4648      	mov	r0, r9
 80064ac:	f000 fcaa 	bl	8006e04 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f77f aeaf 	ble.w	8006214 <_dtoa_r+0x68c>
 80064b6:	2331      	movs	r3, #49	@ 0x31
 80064b8:	4656      	mov	r6, sl
 80064ba:	f806 3b01 	strb.w	r3, [r6], #1
 80064be:	9b04      	ldr	r3, [sp, #16]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	e6aa      	b.n	800621c <_dtoa_r+0x694>
 80064c6:	9c07      	ldr	r4, [sp, #28]
 80064c8:	9704      	str	r7, [sp, #16]
 80064ca:	4625      	mov	r5, r4
 80064cc:	e7f3      	b.n	80064b6 <_dtoa_r+0x92e>
 80064ce:	9b07      	ldr	r3, [sp, #28]
 80064d0:	9308      	str	r3, [sp, #32]
 80064d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8104 	beq.w	80066e2 <_dtoa_r+0xb5a>
 80064da:	2e00      	cmp	r6, #0
 80064dc:	dd05      	ble.n	80064ea <_dtoa_r+0x962>
 80064de:	4629      	mov	r1, r5
 80064e0:	4632      	mov	r2, r6
 80064e2:	4658      	mov	r0, fp
 80064e4:	f000 fc22 	bl	8006d2c <__lshift>
 80064e8:	4605      	mov	r5, r0
 80064ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d05a      	beq.n	80065a6 <_dtoa_r+0xa1e>
 80064f0:	4658      	mov	r0, fp
 80064f2:	6869      	ldr	r1, [r5, #4]
 80064f4:	f000 fa0e 	bl	8006914 <_Balloc>
 80064f8:	4606      	mov	r6, r0
 80064fa:	b928      	cbnz	r0, 8006508 <_dtoa_r+0x980>
 80064fc:	4602      	mov	r2, r0
 80064fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006502:	4b83      	ldr	r3, [pc, #524]	@ (8006710 <_dtoa_r+0xb88>)
 8006504:	f7ff bb54 	b.w	8005bb0 <_dtoa_r+0x28>
 8006508:	692a      	ldr	r2, [r5, #16]
 800650a:	f105 010c 	add.w	r1, r5, #12
 800650e:	3202      	adds	r2, #2
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	300c      	adds	r0, #12
 8006514:	f000 ffa8 	bl	8007468 <memcpy>
 8006518:	2201      	movs	r2, #1
 800651a:	4631      	mov	r1, r6
 800651c:	4658      	mov	r0, fp
 800651e:	f000 fc05 	bl	8006d2c <__lshift>
 8006522:	462f      	mov	r7, r5
 8006524:	4605      	mov	r5, r0
 8006526:	f10a 0301 	add.w	r3, sl, #1
 800652a:	9307      	str	r3, [sp, #28]
 800652c:	9b08      	ldr	r3, [sp, #32]
 800652e:	4453      	add	r3, sl
 8006530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006532:	9b02      	ldr	r3, [sp, #8]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	930a      	str	r3, [sp, #40]	@ 0x28
 800653a:	9b07      	ldr	r3, [sp, #28]
 800653c:	4621      	mov	r1, r4
 800653e:	3b01      	subs	r3, #1
 8006540:	4648      	mov	r0, r9
 8006542:	9302      	str	r3, [sp, #8]
 8006544:	f7ff fa97 	bl	8005a76 <quorem>
 8006548:	4639      	mov	r1, r7
 800654a:	9008      	str	r0, [sp, #32]
 800654c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006550:	4648      	mov	r0, r9
 8006552:	f000 fc57 	bl	8006e04 <__mcmp>
 8006556:	462a      	mov	r2, r5
 8006558:	9009      	str	r0, [sp, #36]	@ 0x24
 800655a:	4621      	mov	r1, r4
 800655c:	4658      	mov	r0, fp
 800655e:	f000 fc6d 	bl	8006e3c <__mdiff>
 8006562:	68c2      	ldr	r2, [r0, #12]
 8006564:	4606      	mov	r6, r0
 8006566:	bb02      	cbnz	r2, 80065aa <_dtoa_r+0xa22>
 8006568:	4601      	mov	r1, r0
 800656a:	4648      	mov	r0, r9
 800656c:	f000 fc4a 	bl	8006e04 <__mcmp>
 8006570:	4602      	mov	r2, r0
 8006572:	4631      	mov	r1, r6
 8006574:	4658      	mov	r0, fp
 8006576:	920c      	str	r2, [sp, #48]	@ 0x30
 8006578:	f000 fa0c 	bl	8006994 <_Bfree>
 800657c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800657e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006580:	9e07      	ldr	r6, [sp, #28]
 8006582:	ea43 0102 	orr.w	r1, r3, r2
 8006586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006588:	4319      	orrs	r1, r3
 800658a:	d110      	bne.n	80065ae <_dtoa_r+0xa26>
 800658c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006590:	d029      	beq.n	80065e6 <_dtoa_r+0xa5e>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	dd02      	ble.n	800659e <_dtoa_r+0xa16>
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	f883 8000 	strb.w	r8, [r3]
 80065a4:	e63b      	b.n	800621e <_dtoa_r+0x696>
 80065a6:	4628      	mov	r0, r5
 80065a8:	e7bb      	b.n	8006522 <_dtoa_r+0x99a>
 80065aa:	2201      	movs	r2, #1
 80065ac:	e7e1      	b.n	8006572 <_dtoa_r+0x9ea>
 80065ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db04      	blt.n	80065be <_dtoa_r+0xa36>
 80065b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80065b6:	430b      	orrs	r3, r1
 80065b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065ba:	430b      	orrs	r3, r1
 80065bc:	d120      	bne.n	8006600 <_dtoa_r+0xa78>
 80065be:	2a00      	cmp	r2, #0
 80065c0:	dded      	ble.n	800659e <_dtoa_r+0xa16>
 80065c2:	4649      	mov	r1, r9
 80065c4:	2201      	movs	r2, #1
 80065c6:	4658      	mov	r0, fp
 80065c8:	f000 fbb0 	bl	8006d2c <__lshift>
 80065cc:	4621      	mov	r1, r4
 80065ce:	4681      	mov	r9, r0
 80065d0:	f000 fc18 	bl	8006e04 <__mcmp>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	dc03      	bgt.n	80065e0 <_dtoa_r+0xa58>
 80065d8:	d1e1      	bne.n	800659e <_dtoa_r+0xa16>
 80065da:	f018 0f01 	tst.w	r8, #1
 80065de:	d0de      	beq.n	800659e <_dtoa_r+0xa16>
 80065e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065e4:	d1d8      	bne.n	8006598 <_dtoa_r+0xa10>
 80065e6:	2339      	movs	r3, #57	@ 0x39
 80065e8:	9a02      	ldr	r2, [sp, #8]
 80065ea:	7013      	strb	r3, [r2, #0]
 80065ec:	4633      	mov	r3, r6
 80065ee:	461e      	mov	r6, r3
 80065f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	2a39      	cmp	r2, #57	@ 0x39
 80065f8:	d052      	beq.n	80066a0 <_dtoa_r+0xb18>
 80065fa:	3201      	adds	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e60e      	b.n	800621e <_dtoa_r+0x696>
 8006600:	2a00      	cmp	r2, #0
 8006602:	dd07      	ble.n	8006614 <_dtoa_r+0xa8c>
 8006604:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006608:	d0ed      	beq.n	80065e6 <_dtoa_r+0xa5e>
 800660a:	9a02      	ldr	r2, [sp, #8]
 800660c:	f108 0301 	add.w	r3, r8, #1
 8006610:	7013      	strb	r3, [r2, #0]
 8006612:	e604      	b.n	800621e <_dtoa_r+0x696>
 8006614:	9b07      	ldr	r3, [sp, #28]
 8006616:	9a07      	ldr	r2, [sp, #28]
 8006618:	f803 8c01 	strb.w	r8, [r3, #-1]
 800661c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800661e:	4293      	cmp	r3, r2
 8006620:	d028      	beq.n	8006674 <_dtoa_r+0xaec>
 8006622:	4649      	mov	r1, r9
 8006624:	2300      	movs	r3, #0
 8006626:	220a      	movs	r2, #10
 8006628:	4658      	mov	r0, fp
 800662a:	f000 f9d5 	bl	80069d8 <__multadd>
 800662e:	42af      	cmp	r7, r5
 8006630:	4681      	mov	r9, r0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	f04f 020a 	mov.w	r2, #10
 800663a:	4639      	mov	r1, r7
 800663c:	4658      	mov	r0, fp
 800663e:	d107      	bne.n	8006650 <_dtoa_r+0xac8>
 8006640:	f000 f9ca 	bl	80069d8 <__multadd>
 8006644:	4607      	mov	r7, r0
 8006646:	4605      	mov	r5, r0
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	9307      	str	r3, [sp, #28]
 800664e:	e774      	b.n	800653a <_dtoa_r+0x9b2>
 8006650:	f000 f9c2 	bl	80069d8 <__multadd>
 8006654:	4629      	mov	r1, r5
 8006656:	4607      	mov	r7, r0
 8006658:	2300      	movs	r3, #0
 800665a:	220a      	movs	r2, #10
 800665c:	4658      	mov	r0, fp
 800665e:	f000 f9bb 	bl	80069d8 <__multadd>
 8006662:	4605      	mov	r5, r0
 8006664:	e7f0      	b.n	8006648 <_dtoa_r+0xac0>
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	2700      	movs	r7, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	bfcc      	ite	gt
 800666e:	461e      	movgt	r6, r3
 8006670:	2601      	movle	r6, #1
 8006672:	4456      	add	r6, sl
 8006674:	4649      	mov	r1, r9
 8006676:	2201      	movs	r2, #1
 8006678:	4658      	mov	r0, fp
 800667a:	f000 fb57 	bl	8006d2c <__lshift>
 800667e:	4621      	mov	r1, r4
 8006680:	4681      	mov	r9, r0
 8006682:	f000 fbbf 	bl	8006e04 <__mcmp>
 8006686:	2800      	cmp	r0, #0
 8006688:	dcb0      	bgt.n	80065ec <_dtoa_r+0xa64>
 800668a:	d102      	bne.n	8006692 <_dtoa_r+0xb0a>
 800668c:	f018 0f01 	tst.w	r8, #1
 8006690:	d1ac      	bne.n	80065ec <_dtoa_r+0xa64>
 8006692:	4633      	mov	r3, r6
 8006694:	461e      	mov	r6, r3
 8006696:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669a:	2a30      	cmp	r2, #48	@ 0x30
 800669c:	d0fa      	beq.n	8006694 <_dtoa_r+0xb0c>
 800669e:	e5be      	b.n	800621e <_dtoa_r+0x696>
 80066a0:	459a      	cmp	sl, r3
 80066a2:	d1a4      	bne.n	80065ee <_dtoa_r+0xa66>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	2331      	movs	r3, #49	@ 0x31
 80066ac:	f88a 3000 	strb.w	r3, [sl]
 80066b0:	e5b5      	b.n	800621e <_dtoa_r+0x696>
 80066b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006714 <_dtoa_r+0xb8c>
 80066b8:	b11b      	cbz	r3, 80066c2 <_dtoa_r+0xb3a>
 80066ba:	f10a 0308 	add.w	r3, sl, #8
 80066be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	4650      	mov	r0, sl
 80066c4:	b017      	add	sp, #92	@ 0x5c
 80066c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	f77f ae3d 	ble.w	800634c <_dtoa_r+0x7c4>
 80066d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d6:	2001      	movs	r0, #1
 80066d8:	e65b      	b.n	8006392 <_dtoa_r+0x80a>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f77f aed6 	ble.w	800648e <_dtoa_r+0x906>
 80066e2:	4656      	mov	r6, sl
 80066e4:	4621      	mov	r1, r4
 80066e6:	4648      	mov	r0, r9
 80066e8:	f7ff f9c5 	bl	8005a76 <quorem>
 80066ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	f806 8b01 	strb.w	r8, [r6], #1
 80066f6:	eba6 020a 	sub.w	r2, r6, sl
 80066fa:	4293      	cmp	r3, r2
 80066fc:	ddb3      	ble.n	8006666 <_dtoa_r+0xade>
 80066fe:	4649      	mov	r1, r9
 8006700:	2300      	movs	r3, #0
 8006702:	220a      	movs	r2, #10
 8006704:	4658      	mov	r0, fp
 8006706:	f000 f967 	bl	80069d8 <__multadd>
 800670a:	4681      	mov	r9, r0
 800670c:	e7ea      	b.n	80066e4 <_dtoa_r+0xb5c>
 800670e:	bf00      	nop
 8006710:	08007d5a 	.word	0x08007d5a
 8006714:	08007cde 	.word	0x08007cde

08006718 <_free_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	2900      	cmp	r1, #0
 800671e:	d040      	beq.n	80067a2 <_free_r+0x8a>
 8006720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006724:	1f0c      	subs	r4, r1, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	18e4      	addlt	r4, r4, r3
 800672c:	f000 f8e6 	bl	80068fc <__malloc_lock>
 8006730:	4a1c      	ldr	r2, [pc, #112]	@ (80067a4 <_free_r+0x8c>)
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	b933      	cbnz	r3, 8006744 <_free_r+0x2c>
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	6014      	str	r4, [r2, #0]
 800673a:	4628      	mov	r0, r5
 800673c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006740:	f000 b8e2 	b.w	8006908 <__malloc_unlock>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d908      	bls.n	800675a <_free_r+0x42>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	1821      	adds	r1, r4, r0
 800674c:	428b      	cmp	r3, r1
 800674e:	bf01      	itttt	eq
 8006750:	6819      	ldreq	r1, [r3, #0]
 8006752:	685b      	ldreq	r3, [r3, #4]
 8006754:	1809      	addeq	r1, r1, r0
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	e7ed      	b.n	8006736 <_free_r+0x1e>
 800675a:	461a      	mov	r2, r3
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	b10b      	cbz	r3, 8006764 <_free_r+0x4c>
 8006760:	42a3      	cmp	r3, r4
 8006762:	d9fa      	bls.n	800675a <_free_r+0x42>
 8006764:	6811      	ldr	r1, [r2, #0]
 8006766:	1850      	adds	r0, r2, r1
 8006768:	42a0      	cmp	r0, r4
 800676a:	d10b      	bne.n	8006784 <_free_r+0x6c>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	4401      	add	r1, r0
 8006770:	1850      	adds	r0, r2, r1
 8006772:	4283      	cmp	r3, r0
 8006774:	6011      	str	r1, [r2, #0]
 8006776:	d1e0      	bne.n	800673a <_free_r+0x22>
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4408      	add	r0, r1
 800677e:	6010      	str	r0, [r2, #0]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	e7da      	b.n	800673a <_free_r+0x22>
 8006784:	d902      	bls.n	800678c <_free_r+0x74>
 8006786:	230c      	movs	r3, #12
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	e7d6      	b.n	800673a <_free_r+0x22>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	1821      	adds	r1, r4, r0
 8006790:	428b      	cmp	r3, r1
 8006792:	bf01      	itttt	eq
 8006794:	6819      	ldreq	r1, [r3, #0]
 8006796:	685b      	ldreq	r3, [r3, #4]
 8006798:	1809      	addeq	r1, r1, r0
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	6054      	str	r4, [r2, #4]
 80067a0:	e7cb      	b.n	800673a <_free_r+0x22>
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	200004bc 	.word	0x200004bc

080067a8 <malloc>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	@ (80067b4 <malloc+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 b825 	b.w	80067fc <_malloc_r>
 80067b2:	bf00      	nop
 80067b4:	20000018 	.word	0x20000018

080067b8 <sbrk_aligned>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4e0f      	ldr	r6, [pc, #60]	@ (80067f8 <sbrk_aligned+0x40>)
 80067bc:	460c      	mov	r4, r1
 80067be:	6831      	ldr	r1, [r6, #0]
 80067c0:	4605      	mov	r5, r0
 80067c2:	b911      	cbnz	r1, 80067ca <sbrk_aligned+0x12>
 80067c4:	f000 fe40 	bl	8007448 <_sbrk_r>
 80067c8:	6030      	str	r0, [r6, #0]
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 fe3b 	bl	8007448 <_sbrk_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d103      	bne.n	80067de <sbrk_aligned+0x26>
 80067d6:	f04f 34ff 	mov.w	r4, #4294967295
 80067da:	4620      	mov	r0, r4
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	1cc4      	adds	r4, r0, #3
 80067e0:	f024 0403 	bic.w	r4, r4, #3
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d0f8      	beq.n	80067da <sbrk_aligned+0x22>
 80067e8:	1a21      	subs	r1, r4, r0
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 fe2c 	bl	8007448 <_sbrk_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1f2      	bne.n	80067da <sbrk_aligned+0x22>
 80067f4:	e7ef      	b.n	80067d6 <sbrk_aligned+0x1e>
 80067f6:	bf00      	nop
 80067f8:	200004b8 	.word	0x200004b8

080067fc <_malloc_r>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	1ccd      	adds	r5, r1, #3
 8006802:	f025 0503 	bic.w	r5, r5, #3
 8006806:	3508      	adds	r5, #8
 8006808:	2d0c      	cmp	r5, #12
 800680a:	bf38      	it	cc
 800680c:	250c      	movcc	r5, #12
 800680e:	2d00      	cmp	r5, #0
 8006810:	4606      	mov	r6, r0
 8006812:	db01      	blt.n	8006818 <_malloc_r+0x1c>
 8006814:	42a9      	cmp	r1, r5
 8006816:	d904      	bls.n	8006822 <_malloc_r+0x26>
 8006818:	230c      	movs	r3, #12
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	2000      	movs	r0, #0
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068f8 <_malloc_r+0xfc>
 8006826:	f000 f869 	bl	80068fc <__malloc_lock>
 800682a:	f8d8 3000 	ldr.w	r3, [r8]
 800682e:	461c      	mov	r4, r3
 8006830:	bb44      	cbnz	r4, 8006884 <_malloc_r+0x88>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff ffbf 	bl	80067b8 <sbrk_aligned>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	4604      	mov	r4, r0
 800683e:	d158      	bne.n	80068f2 <_malloc_r+0xf6>
 8006840:	f8d8 4000 	ldr.w	r4, [r8]
 8006844:	4627      	mov	r7, r4
 8006846:	2f00      	cmp	r7, #0
 8006848:	d143      	bne.n	80068d2 <_malloc_r+0xd6>
 800684a:	2c00      	cmp	r4, #0
 800684c:	d04b      	beq.n	80068e6 <_malloc_r+0xea>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	4639      	mov	r1, r7
 8006852:	4630      	mov	r0, r6
 8006854:	eb04 0903 	add.w	r9, r4, r3
 8006858:	f000 fdf6 	bl	8007448 <_sbrk_r>
 800685c:	4581      	cmp	r9, r0
 800685e:	d142      	bne.n	80068e6 <_malloc_r+0xea>
 8006860:	6821      	ldr	r1, [r4, #0]
 8006862:	4630      	mov	r0, r6
 8006864:	1a6d      	subs	r5, r5, r1
 8006866:	4629      	mov	r1, r5
 8006868:	f7ff ffa6 	bl	80067b8 <sbrk_aligned>
 800686c:	3001      	adds	r0, #1
 800686e:	d03a      	beq.n	80068e6 <_malloc_r+0xea>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	442b      	add	r3, r5
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	f8d8 3000 	ldr.w	r3, [r8]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	bb62      	cbnz	r2, 80068d8 <_malloc_r+0xdc>
 800687e:	f8c8 7000 	str.w	r7, [r8]
 8006882:	e00f      	b.n	80068a4 <_malloc_r+0xa8>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	1b52      	subs	r2, r2, r5
 8006888:	d420      	bmi.n	80068cc <_malloc_r+0xd0>
 800688a:	2a0b      	cmp	r2, #11
 800688c:	d917      	bls.n	80068be <_malloc_r+0xc2>
 800688e:	1961      	adds	r1, r4, r5
 8006890:	42a3      	cmp	r3, r4
 8006892:	6025      	str	r5, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	6059      	strne	r1, [r3, #4]
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	bf08      	it	eq
 800689c:	f8c8 1000 	streq.w	r1, [r8]
 80068a0:	5162      	str	r2, [r4, r5]
 80068a2:	604b      	str	r3, [r1, #4]
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 f82f 	bl	8006908 <__malloc_unlock>
 80068aa:	f104 000b 	add.w	r0, r4, #11
 80068ae:	1d23      	adds	r3, r4, #4
 80068b0:	f020 0007 	bic.w	r0, r0, #7
 80068b4:	1ac2      	subs	r2, r0, r3
 80068b6:	bf1c      	itt	ne
 80068b8:	1a1b      	subne	r3, r3, r0
 80068ba:	50a3      	strne	r3, [r4, r2]
 80068bc:	e7af      	b.n	800681e <_malloc_r+0x22>
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	bf0c      	ite	eq
 80068c4:	f8c8 2000 	streq.w	r2, [r8]
 80068c8:	605a      	strne	r2, [r3, #4]
 80068ca:	e7eb      	b.n	80068a4 <_malloc_r+0xa8>
 80068cc:	4623      	mov	r3, r4
 80068ce:	6864      	ldr	r4, [r4, #4]
 80068d0:	e7ae      	b.n	8006830 <_malloc_r+0x34>
 80068d2:	463c      	mov	r4, r7
 80068d4:	687f      	ldr	r7, [r7, #4]
 80068d6:	e7b6      	b.n	8006846 <_malloc_r+0x4a>
 80068d8:	461a      	mov	r2, r3
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d1fb      	bne.n	80068d8 <_malloc_r+0xdc>
 80068e0:	2300      	movs	r3, #0
 80068e2:	6053      	str	r3, [r2, #4]
 80068e4:	e7de      	b.n	80068a4 <_malloc_r+0xa8>
 80068e6:	230c      	movs	r3, #12
 80068e8:	4630      	mov	r0, r6
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f000 f80c 	bl	8006908 <__malloc_unlock>
 80068f0:	e794      	b.n	800681c <_malloc_r+0x20>
 80068f2:	6005      	str	r5, [r0, #0]
 80068f4:	e7d6      	b.n	80068a4 <_malloc_r+0xa8>
 80068f6:	bf00      	nop
 80068f8:	200004bc 	.word	0x200004bc

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__malloc_lock+0x8>)
 80068fe:	f7ff b8aa 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	200004b4 	.word	0x200004b4

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	@ (8006910 <__malloc_unlock+0x8>)
 800690a:	f7ff b8a5 	b.w	8005a58 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	200004b4 	.word	0x200004b4

08006914 <_Balloc>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	69c6      	ldr	r6, [r0, #28]
 8006918:	4604      	mov	r4, r0
 800691a:	460d      	mov	r5, r1
 800691c:	b976      	cbnz	r6, 800693c <_Balloc+0x28>
 800691e:	2010      	movs	r0, #16
 8006920:	f7ff ff42 	bl	80067a8 <malloc>
 8006924:	4602      	mov	r2, r0
 8006926:	61e0      	str	r0, [r4, #28]
 8006928:	b920      	cbnz	r0, 8006934 <_Balloc+0x20>
 800692a:	216b      	movs	r1, #107	@ 0x6b
 800692c:	4b17      	ldr	r3, [pc, #92]	@ (800698c <_Balloc+0x78>)
 800692e:	4818      	ldr	r0, [pc, #96]	@ (8006990 <_Balloc+0x7c>)
 8006930:	f000 fda8 	bl	8007484 <__assert_func>
 8006934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006938:	6006      	str	r6, [r0, #0]
 800693a:	60c6      	str	r6, [r0, #12]
 800693c:	69e6      	ldr	r6, [r4, #28]
 800693e:	68f3      	ldr	r3, [r6, #12]
 8006940:	b183      	cbz	r3, 8006964 <_Balloc+0x50>
 8006942:	69e3      	ldr	r3, [r4, #28]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800694a:	b9b8      	cbnz	r0, 800697c <_Balloc+0x68>
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f605 	lsl.w	r6, r1, r5
 8006952:	1d72      	adds	r2, r6, #5
 8006954:	4620      	mov	r0, r4
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	f000 fdb2 	bl	80074c0 <_calloc_r>
 800695c:	b160      	cbz	r0, 8006978 <_Balloc+0x64>
 800695e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006962:	e00e      	b.n	8006982 <_Balloc+0x6e>
 8006964:	2221      	movs	r2, #33	@ 0x21
 8006966:	2104      	movs	r1, #4
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fda9 	bl	80074c0 <_calloc_r>
 800696e:	69e3      	ldr	r3, [r4, #28]
 8006970:	60f0      	str	r0, [r6, #12]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e4      	bne.n	8006942 <_Balloc+0x2e>
 8006978:	2000      	movs	r0, #0
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	6802      	ldr	r2, [r0, #0]
 800697e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006982:	2300      	movs	r3, #0
 8006984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006988:	e7f7      	b.n	800697a <_Balloc+0x66>
 800698a:	bf00      	nop
 800698c:	08007ceb 	.word	0x08007ceb
 8006990:	08007d6b 	.word	0x08007d6b

08006994 <_Bfree>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	69c6      	ldr	r6, [r0, #28]
 8006998:	4605      	mov	r5, r0
 800699a:	460c      	mov	r4, r1
 800699c:	b976      	cbnz	r6, 80069bc <_Bfree+0x28>
 800699e:	2010      	movs	r0, #16
 80069a0:	f7ff ff02 	bl	80067a8 <malloc>
 80069a4:	4602      	mov	r2, r0
 80069a6:	61e8      	str	r0, [r5, #28]
 80069a8:	b920      	cbnz	r0, 80069b4 <_Bfree+0x20>
 80069aa:	218f      	movs	r1, #143	@ 0x8f
 80069ac:	4b08      	ldr	r3, [pc, #32]	@ (80069d0 <_Bfree+0x3c>)
 80069ae:	4809      	ldr	r0, [pc, #36]	@ (80069d4 <_Bfree+0x40>)
 80069b0:	f000 fd68 	bl	8007484 <__assert_func>
 80069b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069b8:	6006      	str	r6, [r0, #0]
 80069ba:	60c6      	str	r6, [r0, #12]
 80069bc:	b13c      	cbz	r4, 80069ce <_Bfree+0x3a>
 80069be:	69eb      	ldr	r3, [r5, #28]
 80069c0:	6862      	ldr	r2, [r4, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069c8:	6021      	str	r1, [r4, #0]
 80069ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	08007ceb 	.word	0x08007ceb
 80069d4:	08007d6b 	.word	0x08007d6b

080069d8 <__multadd>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	4607      	mov	r7, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	461e      	mov	r6, r3
 80069e2:	2000      	movs	r0, #0
 80069e4:	690d      	ldr	r5, [r1, #16]
 80069e6:	f101 0c14 	add.w	ip, r1, #20
 80069ea:	f8dc 3000 	ldr.w	r3, [ip]
 80069ee:	3001      	adds	r0, #1
 80069f0:	b299      	uxth	r1, r3
 80069f2:	fb02 6101 	mla	r1, r2, r1, r6
 80069f6:	0c1e      	lsrs	r6, r3, #16
 80069f8:	0c0b      	lsrs	r3, r1, #16
 80069fa:	fb02 3306 	mla	r3, r2, r6, r3
 80069fe:	b289      	uxth	r1, r1
 8006a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a04:	4285      	cmp	r5, r0
 8006a06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a0e:	dcec      	bgt.n	80069ea <__multadd+0x12>
 8006a10:	b30e      	cbz	r6, 8006a56 <__multadd+0x7e>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dc19      	bgt.n	8006a4c <__multadd+0x74>
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	3101      	adds	r1, #1
 8006a1e:	f7ff ff79 	bl	8006914 <_Balloc>
 8006a22:	4680      	mov	r8, r0
 8006a24:	b928      	cbnz	r0, 8006a32 <__multadd+0x5a>
 8006a26:	4602      	mov	r2, r0
 8006a28:	21ba      	movs	r1, #186	@ 0xba
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <__multadd+0x84>)
 8006a2c:	480c      	ldr	r0, [pc, #48]	@ (8006a60 <__multadd+0x88>)
 8006a2e:	f000 fd29 	bl	8007484 <__assert_func>
 8006a32:	6922      	ldr	r2, [r4, #16]
 8006a34:	f104 010c 	add.w	r1, r4, #12
 8006a38:	3202      	adds	r2, #2
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	300c      	adds	r0, #12
 8006a3e:	f000 fd13 	bl	8007468 <memcpy>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff ffa5 	bl	8006994 <_Bfree>
 8006a4a:	4644      	mov	r4, r8
 8006a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a50:	3501      	adds	r5, #1
 8006a52:	615e      	str	r6, [r3, #20]
 8006a54:	6125      	str	r5, [r4, #16]
 8006a56:	4620      	mov	r0, r4
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	08007d5a 	.word	0x08007d5a
 8006a60:	08007d6b 	.word	0x08007d6b

08006a64 <__hi0bits>:
 8006a64:	4603      	mov	r3, r0
 8006a66:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a6a:	bf3a      	itte	cc
 8006a6c:	0403      	lslcc	r3, r0, #16
 8006a6e:	2010      	movcc	r0, #16
 8006a70:	2000      	movcs	r0, #0
 8006a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a76:	bf3c      	itt	cc
 8006a78:	021b      	lslcc	r3, r3, #8
 8006a7a:	3008      	addcc	r0, #8
 8006a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a80:	bf3c      	itt	cc
 8006a82:	011b      	lslcc	r3, r3, #4
 8006a84:	3004      	addcc	r0, #4
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8a:	bf3c      	itt	cc
 8006a8c:	009b      	lslcc	r3, r3, #2
 8006a8e:	3002      	addcc	r0, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db05      	blt.n	8006aa0 <__hi0bits+0x3c>
 8006a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a98:	f100 0001 	add.w	r0, r0, #1
 8006a9c:	bf08      	it	eq
 8006a9e:	2020      	moveq	r0, #32
 8006aa0:	4770      	bx	lr

08006aa2 <__lo0bits>:
 8006aa2:	6803      	ldr	r3, [r0, #0]
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f013 0007 	ands.w	r0, r3, #7
 8006aaa:	d00b      	beq.n	8006ac4 <__lo0bits+0x22>
 8006aac:	07d9      	lsls	r1, r3, #31
 8006aae:	d421      	bmi.n	8006af4 <__lo0bits+0x52>
 8006ab0:	0798      	lsls	r0, r3, #30
 8006ab2:	bf49      	itett	mi
 8006ab4:	085b      	lsrmi	r3, r3, #1
 8006ab6:	089b      	lsrpl	r3, r3, #2
 8006ab8:	2001      	movmi	r0, #1
 8006aba:	6013      	strmi	r3, [r2, #0]
 8006abc:	bf5c      	itt	pl
 8006abe:	2002      	movpl	r0, #2
 8006ac0:	6013      	strpl	r3, [r2, #0]
 8006ac2:	4770      	bx	lr
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	b909      	cbnz	r1, 8006acc <__lo0bits+0x2a>
 8006ac8:	2010      	movs	r0, #16
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	b2d9      	uxtb	r1, r3
 8006ace:	b909      	cbnz	r1, 8006ad4 <__lo0bits+0x32>
 8006ad0:	3008      	adds	r0, #8
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	0719      	lsls	r1, r3, #28
 8006ad6:	bf04      	itt	eq
 8006ad8:	091b      	lsreq	r3, r3, #4
 8006ada:	3004      	addeq	r0, #4
 8006adc:	0799      	lsls	r1, r3, #30
 8006ade:	bf04      	itt	eq
 8006ae0:	089b      	lsreq	r3, r3, #2
 8006ae2:	3002      	addeq	r0, #2
 8006ae4:	07d9      	lsls	r1, r3, #31
 8006ae6:	d403      	bmi.n	8006af0 <__lo0bits+0x4e>
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	f100 0001 	add.w	r0, r0, #1
 8006aee:	d003      	beq.n	8006af8 <__lo0bits+0x56>
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4770      	bx	lr
 8006af4:	2000      	movs	r0, #0
 8006af6:	4770      	bx	lr
 8006af8:	2020      	movs	r0, #32
 8006afa:	4770      	bx	lr

08006afc <__i2b>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	460c      	mov	r4, r1
 8006b00:	2101      	movs	r1, #1
 8006b02:	f7ff ff07 	bl	8006914 <_Balloc>
 8006b06:	4602      	mov	r2, r0
 8006b08:	b928      	cbnz	r0, 8006b16 <__i2b+0x1a>
 8006b0a:	f240 1145 	movw	r1, #325	@ 0x145
 8006b0e:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <__i2b+0x24>)
 8006b10:	4804      	ldr	r0, [pc, #16]	@ (8006b24 <__i2b+0x28>)
 8006b12:	f000 fcb7 	bl	8007484 <__assert_func>
 8006b16:	2301      	movs	r3, #1
 8006b18:	6144      	str	r4, [r0, #20]
 8006b1a:	6103      	str	r3, [r0, #16]
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	bf00      	nop
 8006b20:	08007d5a 	.word	0x08007d5a
 8006b24:	08007d6b 	.word	0x08007d6b

08006b28 <__multiply>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	690a      	ldr	r2, [r1, #16]
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	460f      	mov	r7, r1
 8006b34:	429a      	cmp	r2, r3
 8006b36:	bfa2      	ittt	ge
 8006b38:	4623      	movge	r3, r4
 8006b3a:	460c      	movge	r4, r1
 8006b3c:	461f      	movge	r7, r3
 8006b3e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b42:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b46:	68a3      	ldr	r3, [r4, #8]
 8006b48:	6861      	ldr	r1, [r4, #4]
 8006b4a:	eb0a 0609 	add.w	r6, sl, r9
 8006b4e:	42b3      	cmp	r3, r6
 8006b50:	b085      	sub	sp, #20
 8006b52:	bfb8      	it	lt
 8006b54:	3101      	addlt	r1, #1
 8006b56:	f7ff fedd 	bl	8006914 <_Balloc>
 8006b5a:	b930      	cbnz	r0, 8006b6a <__multiply+0x42>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b62:	4b43      	ldr	r3, [pc, #268]	@ (8006c70 <__multiply+0x148>)
 8006b64:	4843      	ldr	r0, [pc, #268]	@ (8006c74 <__multiply+0x14c>)
 8006b66:	f000 fc8d 	bl	8007484 <__assert_func>
 8006b6a:	f100 0514 	add.w	r5, r0, #20
 8006b6e:	462b      	mov	r3, r5
 8006b70:	2200      	movs	r2, #0
 8006b72:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b76:	4543      	cmp	r3, r8
 8006b78:	d321      	bcc.n	8006bbe <__multiply+0x96>
 8006b7a:	f107 0114 	add.w	r1, r7, #20
 8006b7e:	f104 0214 	add.w	r2, r4, #20
 8006b82:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b86:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b8a:	9302      	str	r3, [sp, #8]
 8006b8c:	1b13      	subs	r3, r2, r4
 8006b8e:	3b15      	subs	r3, #21
 8006b90:	f023 0303 	bic.w	r3, r3, #3
 8006b94:	3304      	adds	r3, #4
 8006b96:	f104 0715 	add.w	r7, r4, #21
 8006b9a:	42ba      	cmp	r2, r7
 8006b9c:	bf38      	it	cc
 8006b9e:	2304      	movcc	r3, #4
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	9b02      	ldr	r3, [sp, #8]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	428b      	cmp	r3, r1
 8006ba8:	d80c      	bhi.n	8006bc4 <__multiply+0x9c>
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	dd03      	ble.n	8006bb6 <__multiply+0x8e>
 8006bae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d05a      	beq.n	8006c6c <__multiply+0x144>
 8006bb6:	6106      	str	r6, [r0, #16]
 8006bb8:	b005      	add	sp, #20
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	f843 2b04 	str.w	r2, [r3], #4
 8006bc2:	e7d8      	b.n	8006b76 <__multiply+0x4e>
 8006bc4:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bc8:	f1ba 0f00 	cmp.w	sl, #0
 8006bcc:	d023      	beq.n	8006c16 <__multiply+0xee>
 8006bce:	46a9      	mov	r9, r5
 8006bd0:	f04f 0c00 	mov.w	ip, #0
 8006bd4:	f104 0e14 	add.w	lr, r4, #20
 8006bd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bdc:	f8d9 3000 	ldr.w	r3, [r9]
 8006be0:	fa1f fb87 	uxth.w	fp, r7
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006bea:	4463      	add	r3, ip
 8006bec:	f8d9 c000 	ldr.w	ip, [r9]
 8006bf0:	0c3f      	lsrs	r7, r7, #16
 8006bf2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006bf6:	fb0a c707 	mla	r7, sl, r7, ip
 8006bfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c04:	4572      	cmp	r2, lr
 8006c06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c0a:	f849 3b04 	str.w	r3, [r9], #4
 8006c0e:	d8e3      	bhi.n	8006bd8 <__multiply+0xb0>
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	f845 c003 	str.w	ip, [r5, r3]
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	3104      	adds	r1, #4
 8006c1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c1e:	f1b9 0f00 	cmp.w	r9, #0
 8006c22:	d021      	beq.n	8006c68 <__multiply+0x140>
 8006c24:	46ae      	mov	lr, r5
 8006c26:	f04f 0a00 	mov.w	sl, #0
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	f104 0c14 	add.w	ip, r4, #20
 8006c30:	f8bc b000 	ldrh.w	fp, [ip]
 8006c34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	fb09 770b 	mla	r7, r9, fp, r7
 8006c3e:	4457      	add	r7, sl
 8006c40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c44:	f84e 3b04 	str.w	r3, [lr], #4
 8006c48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c50:	f8be 3000 	ldrh.w	r3, [lr]
 8006c54:	4562      	cmp	r2, ip
 8006c56:	fb09 330a 	mla	r3, r9, sl, r3
 8006c5a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c62:	d8e5      	bhi.n	8006c30 <__multiply+0x108>
 8006c64:	9f01      	ldr	r7, [sp, #4]
 8006c66:	51eb      	str	r3, [r5, r7]
 8006c68:	3504      	adds	r5, #4
 8006c6a:	e79a      	b.n	8006ba2 <__multiply+0x7a>
 8006c6c:	3e01      	subs	r6, #1
 8006c6e:	e79c      	b.n	8006baa <__multiply+0x82>
 8006c70:	08007d5a 	.word	0x08007d5a
 8006c74:	08007d6b 	.word	0x08007d6b

08006c78 <__pow5mult>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	4615      	mov	r5, r2
 8006c7e:	f012 0203 	ands.w	r2, r2, #3
 8006c82:	4607      	mov	r7, r0
 8006c84:	460e      	mov	r6, r1
 8006c86:	d007      	beq.n	8006c98 <__pow5mult+0x20>
 8006c88:	4c25      	ldr	r4, [pc, #148]	@ (8006d20 <__pow5mult+0xa8>)
 8006c8a:	3a01      	subs	r2, #1
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c92:	f7ff fea1 	bl	80069d8 <__multadd>
 8006c96:	4606      	mov	r6, r0
 8006c98:	10ad      	asrs	r5, r5, #2
 8006c9a:	d03d      	beq.n	8006d18 <__pow5mult+0xa0>
 8006c9c:	69fc      	ldr	r4, [r7, #28]
 8006c9e:	b97c      	cbnz	r4, 8006cc0 <__pow5mult+0x48>
 8006ca0:	2010      	movs	r0, #16
 8006ca2:	f7ff fd81 	bl	80067a8 <malloc>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	61f8      	str	r0, [r7, #28]
 8006caa:	b928      	cbnz	r0, 8006cb8 <__pow5mult+0x40>
 8006cac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d24 <__pow5mult+0xac>)
 8006cb2:	481d      	ldr	r0, [pc, #116]	@ (8006d28 <__pow5mult+0xb0>)
 8006cb4:	f000 fbe6 	bl	8007484 <__assert_func>
 8006cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cbc:	6004      	str	r4, [r0, #0]
 8006cbe:	60c4      	str	r4, [r0, #12]
 8006cc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cc8:	b94c      	cbnz	r4, 8006cde <__pow5mult+0x66>
 8006cca:	f240 2171 	movw	r1, #625	@ 0x271
 8006cce:	4638      	mov	r0, r7
 8006cd0:	f7ff ff14 	bl	8006afc <__i2b>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cdc:	6003      	str	r3, [r0, #0]
 8006cde:	f04f 0900 	mov.w	r9, #0
 8006ce2:	07eb      	lsls	r3, r5, #31
 8006ce4:	d50a      	bpl.n	8006cfc <__pow5mult+0x84>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4638      	mov	r0, r7
 8006cec:	f7ff ff1c 	bl	8006b28 <__multiply>
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff fe4d 	bl	8006994 <_Bfree>
 8006cfa:	4646      	mov	r6, r8
 8006cfc:	106d      	asrs	r5, r5, #1
 8006cfe:	d00b      	beq.n	8006d18 <__pow5mult+0xa0>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	b938      	cbnz	r0, 8006d14 <__pow5mult+0x9c>
 8006d04:	4622      	mov	r2, r4
 8006d06:	4621      	mov	r1, r4
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7ff ff0d 	bl	8006b28 <__multiply>
 8006d0e:	6020      	str	r0, [r4, #0]
 8006d10:	f8c0 9000 	str.w	r9, [r0]
 8006d14:	4604      	mov	r4, r0
 8006d16:	e7e4      	b.n	8006ce2 <__pow5mult+0x6a>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007dc4 	.word	0x08007dc4
 8006d24:	08007ceb 	.word	0x08007ceb
 8006d28:	08007d6b 	.word	0x08007d6b

08006d2c <__lshift>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	4607      	mov	r7, r0
 8006d34:	4691      	mov	r9, r2
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	6849      	ldr	r1, [r1, #4]
 8006d3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d44:	f108 0601 	add.w	r6, r8, #1
 8006d48:	42b3      	cmp	r3, r6
 8006d4a:	db0b      	blt.n	8006d64 <__lshift+0x38>
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff fde1 	bl	8006914 <_Balloc>
 8006d52:	4605      	mov	r5, r0
 8006d54:	b948      	cbnz	r0, 8006d6a <__lshift+0x3e>
 8006d56:	4602      	mov	r2, r0
 8006d58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d5c:	4b27      	ldr	r3, [pc, #156]	@ (8006dfc <__lshift+0xd0>)
 8006d5e:	4828      	ldr	r0, [pc, #160]	@ (8006e00 <__lshift+0xd4>)
 8006d60:	f000 fb90 	bl	8007484 <__assert_func>
 8006d64:	3101      	adds	r1, #1
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	e7ee      	b.n	8006d48 <__lshift+0x1c>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f100 0114 	add.w	r1, r0, #20
 8006d70:	f100 0210 	add.w	r2, r0, #16
 8006d74:	4618      	mov	r0, r3
 8006d76:	4553      	cmp	r3, sl
 8006d78:	db33      	blt.n	8006de2 <__lshift+0xb6>
 8006d7a:	6920      	ldr	r0, [r4, #16]
 8006d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d80:	f104 0314 	add.w	r3, r4, #20
 8006d84:	f019 091f 	ands.w	r9, r9, #31
 8006d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d90:	d02b      	beq.n	8006dea <__lshift+0xbe>
 8006d92:	468a      	mov	sl, r1
 8006d94:	2200      	movs	r2, #0
 8006d96:	f1c9 0e20 	rsb	lr, r9, #32
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8006da0:	4310      	orrs	r0, r2
 8006da2:	f84a 0b04 	str.w	r0, [sl], #4
 8006da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006daa:	459c      	cmp	ip, r3
 8006dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8006db0:	d8f3      	bhi.n	8006d9a <__lshift+0x6e>
 8006db2:	ebac 0304 	sub.w	r3, ip, r4
 8006db6:	3b15      	subs	r3, #21
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	f104 0015 	add.w	r0, r4, #21
 8006dc2:	4584      	cmp	ip, r0
 8006dc4:	bf38      	it	cc
 8006dc6:	2304      	movcc	r3, #4
 8006dc8:	50ca      	str	r2, [r1, r3]
 8006dca:	b10a      	cbz	r2, 8006dd0 <__lshift+0xa4>
 8006dcc:	f108 0602 	add.w	r6, r8, #2
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	612e      	str	r6, [r5, #16]
 8006dd8:	f7ff fddc 	bl	8006994 <_Bfree>
 8006ddc:	4628      	mov	r0, r5
 8006dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006de6:	3301      	adds	r3, #1
 8006de8:	e7c5      	b.n	8006d76 <__lshift+0x4a>
 8006dea:	3904      	subs	r1, #4
 8006dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df0:	459c      	cmp	ip, r3
 8006df2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006df6:	d8f9      	bhi.n	8006dec <__lshift+0xc0>
 8006df8:	e7ea      	b.n	8006dd0 <__lshift+0xa4>
 8006dfa:	bf00      	nop
 8006dfc:	08007d5a 	.word	0x08007d5a
 8006e00:	08007d6b 	.word	0x08007d6b

08006e04 <__mcmp>:
 8006e04:	4603      	mov	r3, r0
 8006e06:	690a      	ldr	r2, [r1, #16]
 8006e08:	6900      	ldr	r0, [r0, #16]
 8006e0a:	b530      	push	{r4, r5, lr}
 8006e0c:	1a80      	subs	r0, r0, r2
 8006e0e:	d10e      	bne.n	8006e2e <__mcmp+0x2a>
 8006e10:	3314      	adds	r3, #20
 8006e12:	3114      	adds	r1, #20
 8006e14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e24:	4295      	cmp	r5, r2
 8006e26:	d003      	beq.n	8006e30 <__mcmp+0x2c>
 8006e28:	d205      	bcs.n	8006e36 <__mcmp+0x32>
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	bd30      	pop	{r4, r5, pc}
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d3f3      	bcc.n	8006e1c <__mcmp+0x18>
 8006e34:	e7fb      	b.n	8006e2e <__mcmp+0x2a>
 8006e36:	2001      	movs	r0, #1
 8006e38:	e7f9      	b.n	8006e2e <__mcmp+0x2a>
	...

08006e3c <__mdiff>:
 8006e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4689      	mov	r9, r1
 8006e42:	4606      	mov	r6, r0
 8006e44:	4611      	mov	r1, r2
 8006e46:	4648      	mov	r0, r9
 8006e48:	4614      	mov	r4, r2
 8006e4a:	f7ff ffdb 	bl	8006e04 <__mcmp>
 8006e4e:	1e05      	subs	r5, r0, #0
 8006e50:	d112      	bne.n	8006e78 <__mdiff+0x3c>
 8006e52:	4629      	mov	r1, r5
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7ff fd5d 	bl	8006914 <_Balloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <__mdiff+0x2e>
 8006e5e:	f240 2137 	movw	r1, #567	@ 0x237
 8006e62:	4b3e      	ldr	r3, [pc, #248]	@ (8006f5c <__mdiff+0x120>)
 8006e64:	483e      	ldr	r0, [pc, #248]	@ (8006f60 <__mdiff+0x124>)
 8006e66:	f000 fb0d 	bl	8007484 <__assert_func>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e70:	4610      	mov	r0, r2
 8006e72:	b003      	add	sp, #12
 8006e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	bfbc      	itt	lt
 8006e7a:	464b      	movlt	r3, r9
 8006e7c:	46a1      	movlt	r9, r4
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e84:	bfba      	itte	lt
 8006e86:	461c      	movlt	r4, r3
 8006e88:	2501      	movlt	r5, #1
 8006e8a:	2500      	movge	r5, #0
 8006e8c:	f7ff fd42 	bl	8006914 <_Balloc>
 8006e90:	4602      	mov	r2, r0
 8006e92:	b918      	cbnz	r0, 8006e9c <__mdiff+0x60>
 8006e94:	f240 2145 	movw	r1, #581	@ 0x245
 8006e98:	4b30      	ldr	r3, [pc, #192]	@ (8006f5c <__mdiff+0x120>)
 8006e9a:	e7e3      	b.n	8006e64 <__mdiff+0x28>
 8006e9c:	f100 0b14 	add.w	fp, r0, #20
 8006ea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ea4:	f109 0310 	add.w	r3, r9, #16
 8006ea8:	60c5      	str	r5, [r0, #12]
 8006eaa:	f04f 0c00 	mov.w	ip, #0
 8006eae:	f109 0514 	add.w	r5, r9, #20
 8006eb2:	46d9      	mov	r9, fp
 8006eb4:	6926      	ldr	r6, [r4, #16]
 8006eb6:	f104 0e14 	add.w	lr, r4, #20
 8006eba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ebe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006eca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ece:	b281      	uxth	r1, r0
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	fa1f f38a 	uxth.w	r3, sl
 8006ed6:	1a5b      	subs	r3, r3, r1
 8006ed8:	0c00      	lsrs	r0, r0, #16
 8006eda:	4463      	add	r3, ip
 8006edc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ee0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006eea:	4576      	cmp	r6, lr
 8006eec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ef0:	f849 3b04 	str.w	r3, [r9], #4
 8006ef4:	d8e6      	bhi.n	8006ec4 <__mdiff+0x88>
 8006ef6:	1b33      	subs	r3, r6, r4
 8006ef8:	3b15      	subs	r3, #21
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	3415      	adds	r4, #21
 8006f00:	3304      	adds	r3, #4
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	bf38      	it	cc
 8006f06:	2304      	movcc	r3, #4
 8006f08:	441d      	add	r5, r3
 8006f0a:	445b      	add	r3, fp
 8006f0c:	461e      	mov	r6, r3
 8006f0e:	462c      	mov	r4, r5
 8006f10:	4544      	cmp	r4, r8
 8006f12:	d30e      	bcc.n	8006f32 <__mdiff+0xf6>
 8006f14:	f108 0103 	add.w	r1, r8, #3
 8006f18:	1b49      	subs	r1, r1, r5
 8006f1a:	f021 0103 	bic.w	r1, r1, #3
 8006f1e:	3d03      	subs	r5, #3
 8006f20:	45a8      	cmp	r8, r5
 8006f22:	bf38      	it	cc
 8006f24:	2100      	movcc	r1, #0
 8006f26:	440b      	add	r3, r1
 8006f28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f2c:	b199      	cbz	r1, 8006f56 <__mdiff+0x11a>
 8006f2e:	6117      	str	r7, [r2, #16]
 8006f30:	e79e      	b.n	8006e70 <__mdiff+0x34>
 8006f32:	46e6      	mov	lr, ip
 8006f34:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f38:	fa1f fc81 	uxth.w	ip, r1
 8006f3c:	44f4      	add	ip, lr
 8006f3e:	0c08      	lsrs	r0, r1, #16
 8006f40:	4471      	add	r1, lr
 8006f42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f46:	b289      	uxth	r1, r1
 8006f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f50:	f846 1b04 	str.w	r1, [r6], #4
 8006f54:	e7dc      	b.n	8006f10 <__mdiff+0xd4>
 8006f56:	3f01      	subs	r7, #1
 8006f58:	e7e6      	b.n	8006f28 <__mdiff+0xec>
 8006f5a:	bf00      	nop
 8006f5c:	08007d5a 	.word	0x08007d5a
 8006f60:	08007d6b 	.word	0x08007d6b

08006f64 <__d2b>:
 8006f64:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4690      	mov	r8, r2
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	9e08      	ldr	r6, [sp, #32]
 8006f70:	f7ff fcd0 	bl	8006914 <_Balloc>
 8006f74:	4604      	mov	r4, r0
 8006f76:	b930      	cbnz	r0, 8006f86 <__d2b+0x22>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f7e:	4b23      	ldr	r3, [pc, #140]	@ (800700c <__d2b+0xa8>)
 8006f80:	4823      	ldr	r0, [pc, #140]	@ (8007010 <__d2b+0xac>)
 8006f82:	f000 fa7f 	bl	8007484 <__assert_func>
 8006f86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f8e:	b10d      	cbz	r5, 8006f94 <__d2b+0x30>
 8006f90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	f1b8 0300 	subs.w	r3, r8, #0
 8006f9a:	d024      	beq.n	8006fe6 <__d2b+0x82>
 8006f9c:	4668      	mov	r0, sp
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	f7ff fd7f 	bl	8006aa2 <__lo0bits>
 8006fa4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fa8:	b1d8      	cbz	r0, 8006fe2 <__d2b+0x7e>
 8006faa:	f1c0 0320 	rsb	r3, r0, #32
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	40c2      	lsrs	r2, r0
 8006fb6:	6163      	str	r3, [r4, #20]
 8006fb8:	9201      	str	r2, [sp, #4]
 8006fba:	9b01      	ldr	r3, [sp, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2201      	moveq	r2, #1
 8006fc2:	2202      	movne	r2, #2
 8006fc4:	61a3      	str	r3, [r4, #24]
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	b1ad      	cbz	r5, 8006ff6 <__d2b+0x92>
 8006fca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fce:	4405      	add	r5, r0
 8006fd0:	6035      	str	r5, [r6, #0]
 8006fd2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd8:	6018      	str	r0, [r3, #0]
 8006fda:	4620      	mov	r0, r4
 8006fdc:	b002      	add	sp, #8
 8006fde:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006fe2:	6161      	str	r1, [r4, #20]
 8006fe4:	e7e9      	b.n	8006fba <__d2b+0x56>
 8006fe6:	a801      	add	r0, sp, #4
 8006fe8:	f7ff fd5b 	bl	8006aa2 <__lo0bits>
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	6163      	str	r3, [r4, #20]
 8006ff2:	3020      	adds	r0, #32
 8006ff4:	e7e7      	b.n	8006fc6 <__d2b+0x62>
 8006ff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ffa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ffe:	6030      	str	r0, [r6, #0]
 8007000:	6918      	ldr	r0, [r3, #16]
 8007002:	f7ff fd2f 	bl	8006a64 <__hi0bits>
 8007006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800700a:	e7e4      	b.n	8006fd6 <__d2b+0x72>
 800700c:	08007d5a 	.word	0x08007d5a
 8007010:	08007d6b 	.word	0x08007d6b

08007014 <__ssputs_r>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	461f      	mov	r7, r3
 800701a:	688e      	ldr	r6, [r1, #8]
 800701c:	4682      	mov	sl, r0
 800701e:	42be      	cmp	r6, r7
 8007020:	460c      	mov	r4, r1
 8007022:	4690      	mov	r8, r2
 8007024:	680b      	ldr	r3, [r1, #0]
 8007026:	d82d      	bhi.n	8007084 <__ssputs_r+0x70>
 8007028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800702c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007030:	d026      	beq.n	8007080 <__ssputs_r+0x6c>
 8007032:	6965      	ldr	r5, [r4, #20]
 8007034:	6909      	ldr	r1, [r1, #16]
 8007036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800703a:	eba3 0901 	sub.w	r9, r3, r1
 800703e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007042:	1c7b      	adds	r3, r7, #1
 8007044:	444b      	add	r3, r9
 8007046:	106d      	asrs	r5, r5, #1
 8007048:	429d      	cmp	r5, r3
 800704a:	bf38      	it	cc
 800704c:	461d      	movcc	r5, r3
 800704e:	0553      	lsls	r3, r2, #21
 8007050:	d527      	bpl.n	80070a2 <__ssputs_r+0x8e>
 8007052:	4629      	mov	r1, r5
 8007054:	f7ff fbd2 	bl	80067fc <_malloc_r>
 8007058:	4606      	mov	r6, r0
 800705a:	b360      	cbz	r0, 80070b6 <__ssputs_r+0xa2>
 800705c:	464a      	mov	r2, r9
 800705e:	6921      	ldr	r1, [r4, #16]
 8007060:	f000 fa02 	bl	8007468 <memcpy>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800706a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	6126      	str	r6, [r4, #16]
 8007072:	444e      	add	r6, r9
 8007074:	6026      	str	r6, [r4, #0]
 8007076:	463e      	mov	r6, r7
 8007078:	6165      	str	r5, [r4, #20]
 800707a:	eba5 0509 	sub.w	r5, r5, r9
 800707e:	60a5      	str	r5, [r4, #8]
 8007080:	42be      	cmp	r6, r7
 8007082:	d900      	bls.n	8007086 <__ssputs_r+0x72>
 8007084:	463e      	mov	r6, r7
 8007086:	4632      	mov	r2, r6
 8007088:	4641      	mov	r1, r8
 800708a:	6820      	ldr	r0, [r4, #0]
 800708c:	f000 f9c2 	bl	8007414 <memmove>
 8007090:	2000      	movs	r0, #0
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	60a3      	str	r3, [r4, #8]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	4433      	add	r3, r6
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a2:	462a      	mov	r2, r5
 80070a4:	f000 fa32 	bl	800750c <_realloc_r>
 80070a8:	4606      	mov	r6, r0
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d1e0      	bne.n	8007070 <__ssputs_r+0x5c>
 80070ae:	4650      	mov	r0, sl
 80070b0:	6921      	ldr	r1, [r4, #16]
 80070b2:	f7ff fb31 	bl	8006718 <_free_r>
 80070b6:	230c      	movs	r3, #12
 80070b8:	f8ca 3000 	str.w	r3, [sl]
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f04f 30ff 	mov.w	r0, #4294967295
 80070c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	e7e9      	b.n	800709e <__ssputs_r+0x8a>
	...

080070cc <_svfiprintf_r>:
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	4698      	mov	r8, r3
 80070d2:	898b      	ldrh	r3, [r1, #12]
 80070d4:	4607      	mov	r7, r0
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	460d      	mov	r5, r1
 80070da:	4614      	mov	r4, r2
 80070dc:	b09d      	sub	sp, #116	@ 0x74
 80070de:	d510      	bpl.n	8007102 <_svfiprintf_r+0x36>
 80070e0:	690b      	ldr	r3, [r1, #16]
 80070e2:	b973      	cbnz	r3, 8007102 <_svfiprintf_r+0x36>
 80070e4:	2140      	movs	r1, #64	@ 0x40
 80070e6:	f7ff fb89 	bl	80067fc <_malloc_r>
 80070ea:	6028      	str	r0, [r5, #0]
 80070ec:	6128      	str	r0, [r5, #16]
 80070ee:	b930      	cbnz	r0, 80070fe <_svfiprintf_r+0x32>
 80070f0:	230c      	movs	r3, #12
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	b01d      	add	sp, #116	@ 0x74
 80070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fe:	2340      	movs	r3, #64	@ 0x40
 8007100:	616b      	str	r3, [r5, #20]
 8007102:	2300      	movs	r3, #0
 8007104:	9309      	str	r3, [sp, #36]	@ 0x24
 8007106:	2320      	movs	r3, #32
 8007108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800710c:	2330      	movs	r3, #48	@ 0x30
 800710e:	f04f 0901 	mov.w	r9, #1
 8007112:	f8cd 800c 	str.w	r8, [sp, #12]
 8007116:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80072b0 <_svfiprintf_r+0x1e4>
 800711a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800711e:	4623      	mov	r3, r4
 8007120:	469a      	mov	sl, r3
 8007122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007126:	b10a      	cbz	r2, 800712c <_svfiprintf_r+0x60>
 8007128:	2a25      	cmp	r2, #37	@ 0x25
 800712a:	d1f9      	bne.n	8007120 <_svfiprintf_r+0x54>
 800712c:	ebba 0b04 	subs.w	fp, sl, r4
 8007130:	d00b      	beq.n	800714a <_svfiprintf_r+0x7e>
 8007132:	465b      	mov	r3, fp
 8007134:	4622      	mov	r2, r4
 8007136:	4629      	mov	r1, r5
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff ff6b 	bl	8007014 <__ssputs_r>
 800713e:	3001      	adds	r0, #1
 8007140:	f000 80a7 	beq.w	8007292 <_svfiprintf_r+0x1c6>
 8007144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007146:	445a      	add	r2, fp
 8007148:	9209      	str	r2, [sp, #36]	@ 0x24
 800714a:	f89a 3000 	ldrb.w	r3, [sl]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 809f 	beq.w	8007292 <_svfiprintf_r+0x1c6>
 8007154:	2300      	movs	r3, #0
 8007156:	f04f 32ff 	mov.w	r2, #4294967295
 800715a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715e:	f10a 0a01 	add.w	sl, sl, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	9307      	str	r3, [sp, #28]
 8007166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800716a:	931a      	str	r3, [sp, #104]	@ 0x68
 800716c:	4654      	mov	r4, sl
 800716e:	2205      	movs	r2, #5
 8007170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007174:	484e      	ldr	r0, [pc, #312]	@ (80072b0 <_svfiprintf_r+0x1e4>)
 8007176:	f7fe fc70 	bl	8005a5a <memchr>
 800717a:	9a04      	ldr	r2, [sp, #16]
 800717c:	b9d8      	cbnz	r0, 80071b6 <_svfiprintf_r+0xea>
 800717e:	06d0      	lsls	r0, r2, #27
 8007180:	bf44      	itt	mi
 8007182:	2320      	movmi	r3, #32
 8007184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007188:	0711      	lsls	r1, r2, #28
 800718a:	bf44      	itt	mi
 800718c:	232b      	movmi	r3, #43	@ 0x2b
 800718e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007192:	f89a 3000 	ldrb.w	r3, [sl]
 8007196:	2b2a      	cmp	r3, #42	@ 0x2a
 8007198:	d015      	beq.n	80071c6 <_svfiprintf_r+0xfa>
 800719a:	4654      	mov	r4, sl
 800719c:	2000      	movs	r0, #0
 800719e:	f04f 0c0a 	mov.w	ip, #10
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	4621      	mov	r1, r4
 80071a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071aa:	3b30      	subs	r3, #48	@ 0x30
 80071ac:	2b09      	cmp	r3, #9
 80071ae:	d94b      	bls.n	8007248 <_svfiprintf_r+0x17c>
 80071b0:	b1b0      	cbz	r0, 80071e0 <_svfiprintf_r+0x114>
 80071b2:	9207      	str	r2, [sp, #28]
 80071b4:	e014      	b.n	80071e0 <_svfiprintf_r+0x114>
 80071b6:	eba0 0308 	sub.w	r3, r0, r8
 80071ba:	fa09 f303 	lsl.w	r3, r9, r3
 80071be:	4313      	orrs	r3, r2
 80071c0:	46a2      	mov	sl, r4
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	e7d2      	b.n	800716c <_svfiprintf_r+0xa0>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	9103      	str	r1, [sp, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfbb      	ittet	lt
 80071d2:	425b      	neglt	r3, r3
 80071d4:	f042 0202 	orrlt.w	r2, r2, #2
 80071d8:	9307      	strge	r3, [sp, #28]
 80071da:	9307      	strlt	r3, [sp, #28]
 80071dc:	bfb8      	it	lt
 80071de:	9204      	strlt	r2, [sp, #16]
 80071e0:	7823      	ldrb	r3, [r4, #0]
 80071e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80071e4:	d10a      	bne.n	80071fc <_svfiprintf_r+0x130>
 80071e6:	7863      	ldrb	r3, [r4, #1]
 80071e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ea:	d132      	bne.n	8007252 <_svfiprintf_r+0x186>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	3402      	adds	r4, #2
 80071f0:	1d1a      	adds	r2, r3, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	9203      	str	r2, [sp, #12]
 80071f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072b4 <_svfiprintf_r+0x1e8>
 8007200:	2203      	movs	r2, #3
 8007202:	4650      	mov	r0, sl
 8007204:	7821      	ldrb	r1, [r4, #0]
 8007206:	f7fe fc28 	bl	8005a5a <memchr>
 800720a:	b138      	cbz	r0, 800721c <_svfiprintf_r+0x150>
 800720c:	2240      	movs	r2, #64	@ 0x40
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	eba0 000a 	sub.w	r0, r0, sl
 8007214:	4082      	lsls	r2, r0
 8007216:	4313      	orrs	r3, r2
 8007218:	3401      	adds	r4, #1
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007220:	2206      	movs	r2, #6
 8007222:	4825      	ldr	r0, [pc, #148]	@ (80072b8 <_svfiprintf_r+0x1ec>)
 8007224:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007228:	f7fe fc17 	bl	8005a5a <memchr>
 800722c:	2800      	cmp	r0, #0
 800722e:	d036      	beq.n	800729e <_svfiprintf_r+0x1d2>
 8007230:	4b22      	ldr	r3, [pc, #136]	@ (80072bc <_svfiprintf_r+0x1f0>)
 8007232:	bb1b      	cbnz	r3, 800727c <_svfiprintf_r+0x1b0>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	3307      	adds	r3, #7
 8007238:	f023 0307 	bic.w	r3, r3, #7
 800723c:	3308      	adds	r3, #8
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	4433      	add	r3, r6
 8007244:	9309      	str	r3, [sp, #36]	@ 0x24
 8007246:	e76a      	b.n	800711e <_svfiprintf_r+0x52>
 8007248:	460c      	mov	r4, r1
 800724a:	2001      	movs	r0, #1
 800724c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007250:	e7a8      	b.n	80071a4 <_svfiprintf_r+0xd8>
 8007252:	2300      	movs	r3, #0
 8007254:	f04f 0c0a 	mov.w	ip, #10
 8007258:	4619      	mov	r1, r3
 800725a:	3401      	adds	r4, #1
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	4620      	mov	r0, r4
 8007260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007264:	3a30      	subs	r2, #48	@ 0x30
 8007266:	2a09      	cmp	r2, #9
 8007268:	d903      	bls.n	8007272 <_svfiprintf_r+0x1a6>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0c6      	beq.n	80071fc <_svfiprintf_r+0x130>
 800726e:	9105      	str	r1, [sp, #20]
 8007270:	e7c4      	b.n	80071fc <_svfiprintf_r+0x130>
 8007272:	4604      	mov	r4, r0
 8007274:	2301      	movs	r3, #1
 8007276:	fb0c 2101 	mla	r1, ip, r1, r2
 800727a:	e7f0      	b.n	800725e <_svfiprintf_r+0x192>
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	462a      	mov	r2, r5
 8007282:	4638      	mov	r0, r7
 8007284:	4b0e      	ldr	r3, [pc, #56]	@ (80072c0 <_svfiprintf_r+0x1f4>)
 8007286:	a904      	add	r1, sp, #16
 8007288:	f7fd fe84 	bl	8004f94 <_printf_float>
 800728c:	1c42      	adds	r2, r0, #1
 800728e:	4606      	mov	r6, r0
 8007290:	d1d6      	bne.n	8007240 <_svfiprintf_r+0x174>
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	065b      	lsls	r3, r3, #25
 8007296:	f53f af2d 	bmi.w	80070f4 <_svfiprintf_r+0x28>
 800729a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800729c:	e72c      	b.n	80070f8 <_svfiprintf_r+0x2c>
 800729e:	ab03      	add	r3, sp, #12
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	462a      	mov	r2, r5
 80072a4:	4638      	mov	r0, r7
 80072a6:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <_svfiprintf_r+0x1f4>)
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	f7fe f911 	bl	80054d0 <_printf_i>
 80072ae:	e7ed      	b.n	800728c <_svfiprintf_r+0x1c0>
 80072b0:	08007ec0 	.word	0x08007ec0
 80072b4:	08007ec6 	.word	0x08007ec6
 80072b8:	08007eca 	.word	0x08007eca
 80072bc:	08004f95 	.word	0x08004f95
 80072c0:	08007015 	.word	0x08007015

080072c4 <__sflush_r>:
 80072c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	0716      	lsls	r6, r2, #28
 80072cc:	4605      	mov	r5, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	d454      	bmi.n	800737c <__sflush_r+0xb8>
 80072d2:	684b      	ldr	r3, [r1, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dc02      	bgt.n	80072de <__sflush_r+0x1a>
 80072d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd48      	ble.n	8007370 <__sflush_r+0xac>
 80072de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	d045      	beq.n	8007370 <__sflush_r+0xac>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072ea:	682f      	ldr	r7, [r5, #0]
 80072ec:	6a21      	ldr	r1, [r4, #32]
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	d030      	beq.n	8007354 <__sflush_r+0x90>
 80072f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	0759      	lsls	r1, r3, #29
 80072f8:	d505      	bpl.n	8007306 <__sflush_r+0x42>
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	1ad2      	subs	r2, r2, r3
 80072fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007300:	b10b      	cbz	r3, 8007306 <__sflush_r+0x42>
 8007302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007304:	1ad2      	subs	r2, r2, r3
 8007306:	2300      	movs	r3, #0
 8007308:	4628      	mov	r0, r5
 800730a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800730c:	6a21      	ldr	r1, [r4, #32]
 800730e:	47b0      	blx	r6
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	d106      	bne.n	8007324 <__sflush_r+0x60>
 8007316:	6829      	ldr	r1, [r5, #0]
 8007318:	291d      	cmp	r1, #29
 800731a:	d82b      	bhi.n	8007374 <__sflush_r+0xb0>
 800731c:	4a28      	ldr	r2, [pc, #160]	@ (80073c0 <__sflush_r+0xfc>)
 800731e:	410a      	asrs	r2, r1
 8007320:	07d6      	lsls	r6, r2, #31
 8007322:	d427      	bmi.n	8007374 <__sflush_r+0xb0>
 8007324:	2200      	movs	r2, #0
 8007326:	6062      	str	r2, [r4, #4]
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	04d9      	lsls	r1, r3, #19
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	d504      	bpl.n	800733a <__sflush_r+0x76>
 8007330:	1c42      	adds	r2, r0, #1
 8007332:	d101      	bne.n	8007338 <__sflush_r+0x74>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b903      	cbnz	r3, 800733a <__sflush_r+0x76>
 8007338:	6560      	str	r0, [r4, #84]	@ 0x54
 800733a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733c:	602f      	str	r7, [r5, #0]
 800733e:	b1b9      	cbz	r1, 8007370 <__sflush_r+0xac>
 8007340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007344:	4299      	cmp	r1, r3
 8007346:	d002      	beq.n	800734e <__sflush_r+0x8a>
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff f9e5 	bl	8006718 <_free_r>
 800734e:	2300      	movs	r3, #0
 8007350:	6363      	str	r3, [r4, #52]	@ 0x34
 8007352:	e00d      	b.n	8007370 <__sflush_r+0xac>
 8007354:	2301      	movs	r3, #1
 8007356:	4628      	mov	r0, r5
 8007358:	47b0      	blx	r6
 800735a:	4602      	mov	r2, r0
 800735c:	1c50      	adds	r0, r2, #1
 800735e:	d1c9      	bne.n	80072f4 <__sflush_r+0x30>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c6      	beq.n	80072f4 <__sflush_r+0x30>
 8007366:	2b1d      	cmp	r3, #29
 8007368:	d001      	beq.n	800736e <__sflush_r+0xaa>
 800736a:	2b16      	cmp	r3, #22
 800736c:	d11d      	bne.n	80073aa <__sflush_r+0xe6>
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	2000      	movs	r0, #0
 8007372:	e021      	b.n	80073b8 <__sflush_r+0xf4>
 8007374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007378:	b21b      	sxth	r3, r3
 800737a:	e01a      	b.n	80073b2 <__sflush_r+0xee>
 800737c:	690f      	ldr	r7, [r1, #16]
 800737e:	2f00      	cmp	r7, #0
 8007380:	d0f6      	beq.n	8007370 <__sflush_r+0xac>
 8007382:	0793      	lsls	r3, r2, #30
 8007384:	bf18      	it	ne
 8007386:	2300      	movne	r3, #0
 8007388:	680e      	ldr	r6, [r1, #0]
 800738a:	bf08      	it	eq
 800738c:	694b      	ldreq	r3, [r1, #20]
 800738e:	1bf6      	subs	r6, r6, r7
 8007390:	600f      	str	r7, [r1, #0]
 8007392:	608b      	str	r3, [r1, #8]
 8007394:	2e00      	cmp	r6, #0
 8007396:	ddeb      	ble.n	8007370 <__sflush_r+0xac>
 8007398:	4633      	mov	r3, r6
 800739a:	463a      	mov	r2, r7
 800739c:	4628      	mov	r0, r5
 800739e:	6a21      	ldr	r1, [r4, #32]
 80073a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073a4:	47e0      	blx	ip
 80073a6:	2800      	cmp	r0, #0
 80073a8:	dc07      	bgt.n	80073ba <__sflush_r+0xf6>
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	81a3      	strh	r3, [r4, #12]
 80073b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ba:	4407      	add	r7, r0
 80073bc:	1a36      	subs	r6, r6, r0
 80073be:	e7e9      	b.n	8007394 <__sflush_r+0xd0>
 80073c0:	dfbffffe 	.word	0xdfbffffe

080073c4 <_fflush_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	690b      	ldr	r3, [r1, #16]
 80073c8:	4605      	mov	r5, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	b913      	cbnz	r3, 80073d4 <_fflush_r+0x10>
 80073ce:	2500      	movs	r5, #0
 80073d0:	4628      	mov	r0, r5
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	b118      	cbz	r0, 80073de <_fflush_r+0x1a>
 80073d6:	6a03      	ldr	r3, [r0, #32]
 80073d8:	b90b      	cbnz	r3, 80073de <_fflush_r+0x1a>
 80073da:	f7fe fa25 	bl	8005828 <__sinit>
 80073de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0f3      	beq.n	80073ce <_fflush_r+0xa>
 80073e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073e8:	07d0      	lsls	r0, r2, #31
 80073ea:	d404      	bmi.n	80073f6 <_fflush_r+0x32>
 80073ec:	0599      	lsls	r1, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_fflush_r+0x32>
 80073f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073f2:	f7fe fb30 	bl	8005a56 <__retarget_lock_acquire_recursive>
 80073f6:	4628      	mov	r0, r5
 80073f8:	4621      	mov	r1, r4
 80073fa:	f7ff ff63 	bl	80072c4 <__sflush_r>
 80073fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007400:	4605      	mov	r5, r0
 8007402:	07da      	lsls	r2, r3, #31
 8007404:	d4e4      	bmi.n	80073d0 <_fflush_r+0xc>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	059b      	lsls	r3, r3, #22
 800740a:	d4e1      	bmi.n	80073d0 <_fflush_r+0xc>
 800740c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800740e:	f7fe fb23 	bl	8005a58 <__retarget_lock_release_recursive>
 8007412:	e7dd      	b.n	80073d0 <_fflush_r+0xc>

08007414 <memmove>:
 8007414:	4288      	cmp	r0, r1
 8007416:	b510      	push	{r4, lr}
 8007418:	eb01 0402 	add.w	r4, r1, r2
 800741c:	d902      	bls.n	8007424 <memmove+0x10>
 800741e:	4284      	cmp	r4, r0
 8007420:	4623      	mov	r3, r4
 8007422:	d807      	bhi.n	8007434 <memmove+0x20>
 8007424:	1e43      	subs	r3, r0, #1
 8007426:	42a1      	cmp	r1, r4
 8007428:	d008      	beq.n	800743c <memmove+0x28>
 800742a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800742e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007432:	e7f8      	b.n	8007426 <memmove+0x12>
 8007434:	4601      	mov	r1, r0
 8007436:	4402      	add	r2, r0
 8007438:	428a      	cmp	r2, r1
 800743a:	d100      	bne.n	800743e <memmove+0x2a>
 800743c:	bd10      	pop	{r4, pc}
 800743e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007446:	e7f7      	b.n	8007438 <memmove+0x24>

08007448 <_sbrk_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	2300      	movs	r3, #0
 800744c:	4d05      	ldr	r5, [pc, #20]	@ (8007464 <_sbrk_r+0x1c>)
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa fc90 	bl	8001d78 <_sbrk>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_sbrk_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_sbrk_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200004b0 	.word	0x200004b0

08007468 <memcpy>:
 8007468:	440a      	add	r2, r1
 800746a:	4291      	cmp	r1, r2
 800746c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007470:	d100      	bne.n	8007474 <memcpy+0xc>
 8007472:	4770      	bx	lr
 8007474:	b510      	push	{r4, lr}
 8007476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800747a:	4291      	cmp	r1, r2
 800747c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007480:	d1f9      	bne.n	8007476 <memcpy+0xe>
 8007482:	bd10      	pop	{r4, pc}

08007484 <__assert_func>:
 8007484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007486:	4614      	mov	r4, r2
 8007488:	461a      	mov	r2, r3
 800748a:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <__assert_func+0x2c>)
 800748c:	4605      	mov	r5, r0
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68d8      	ldr	r0, [r3, #12]
 8007492:	b954      	cbnz	r4, 80074aa <__assert_func+0x26>
 8007494:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <__assert_func+0x30>)
 8007496:	461c      	mov	r4, r3
 8007498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800749c:	9100      	str	r1, [sp, #0]
 800749e:	462b      	mov	r3, r5
 80074a0:	4905      	ldr	r1, [pc, #20]	@ (80074b8 <__assert_func+0x34>)
 80074a2:	f000 f86f 	bl	8007584 <fiprintf>
 80074a6:	f000 f87f 	bl	80075a8 <abort>
 80074aa:	4b04      	ldr	r3, [pc, #16]	@ (80074bc <__assert_func+0x38>)
 80074ac:	e7f4      	b.n	8007498 <__assert_func+0x14>
 80074ae:	bf00      	nop
 80074b0:	20000018 	.word	0x20000018
 80074b4:	08007f16 	.word	0x08007f16
 80074b8:	08007ee8 	.word	0x08007ee8
 80074bc:	08007edb 	.word	0x08007edb

080074c0 <_calloc_r>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	fba1 5402 	umull	r5, r4, r1, r2
 80074c6:	b93c      	cbnz	r4, 80074d8 <_calloc_r+0x18>
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7ff f997 	bl	80067fc <_malloc_r>
 80074ce:	4606      	mov	r6, r0
 80074d0:	b928      	cbnz	r0, 80074de <_calloc_r+0x1e>
 80074d2:	2600      	movs	r6, #0
 80074d4:	4630      	mov	r0, r6
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	220c      	movs	r2, #12
 80074da:	6002      	str	r2, [r0, #0]
 80074dc:	e7f9      	b.n	80074d2 <_calloc_r+0x12>
 80074de:	462a      	mov	r2, r5
 80074e0:	4621      	mov	r1, r4
 80074e2:	f7fe fa3a 	bl	800595a <memset>
 80074e6:	e7f5      	b.n	80074d4 <_calloc_r+0x14>

080074e8 <__ascii_mbtowc>:
 80074e8:	b082      	sub	sp, #8
 80074ea:	b901      	cbnz	r1, 80074ee <__ascii_mbtowc+0x6>
 80074ec:	a901      	add	r1, sp, #4
 80074ee:	b142      	cbz	r2, 8007502 <__ascii_mbtowc+0x1a>
 80074f0:	b14b      	cbz	r3, 8007506 <__ascii_mbtowc+0x1e>
 80074f2:	7813      	ldrb	r3, [r2, #0]
 80074f4:	600b      	str	r3, [r1, #0]
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	1e10      	subs	r0, r2, #0
 80074fa:	bf18      	it	ne
 80074fc:	2001      	movne	r0, #1
 80074fe:	b002      	add	sp, #8
 8007500:	4770      	bx	lr
 8007502:	4610      	mov	r0, r2
 8007504:	e7fb      	b.n	80074fe <__ascii_mbtowc+0x16>
 8007506:	f06f 0001 	mvn.w	r0, #1
 800750a:	e7f8      	b.n	80074fe <__ascii_mbtowc+0x16>

0800750c <_realloc_r>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	4680      	mov	r8, r0
 8007512:	4615      	mov	r5, r2
 8007514:	460c      	mov	r4, r1
 8007516:	b921      	cbnz	r1, 8007522 <_realloc_r+0x16>
 8007518:	4611      	mov	r1, r2
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	f7ff b96d 	b.w	80067fc <_malloc_r>
 8007522:	b92a      	cbnz	r2, 8007530 <_realloc_r+0x24>
 8007524:	f7ff f8f8 	bl	8006718 <_free_r>
 8007528:	2400      	movs	r4, #0
 800752a:	4620      	mov	r0, r4
 800752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007530:	f000 f841 	bl	80075b6 <_malloc_usable_size_r>
 8007534:	4285      	cmp	r5, r0
 8007536:	4606      	mov	r6, r0
 8007538:	d802      	bhi.n	8007540 <_realloc_r+0x34>
 800753a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800753e:	d8f4      	bhi.n	800752a <_realloc_r+0x1e>
 8007540:	4629      	mov	r1, r5
 8007542:	4640      	mov	r0, r8
 8007544:	f7ff f95a 	bl	80067fc <_malloc_r>
 8007548:	4607      	mov	r7, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d0ec      	beq.n	8007528 <_realloc_r+0x1c>
 800754e:	42b5      	cmp	r5, r6
 8007550:	462a      	mov	r2, r5
 8007552:	4621      	mov	r1, r4
 8007554:	bf28      	it	cs
 8007556:	4632      	movcs	r2, r6
 8007558:	f7ff ff86 	bl	8007468 <memcpy>
 800755c:	4621      	mov	r1, r4
 800755e:	4640      	mov	r0, r8
 8007560:	f7ff f8da 	bl	8006718 <_free_r>
 8007564:	463c      	mov	r4, r7
 8007566:	e7e0      	b.n	800752a <_realloc_r+0x1e>

08007568 <__ascii_wctomb>:
 8007568:	4603      	mov	r3, r0
 800756a:	4608      	mov	r0, r1
 800756c:	b141      	cbz	r1, 8007580 <__ascii_wctomb+0x18>
 800756e:	2aff      	cmp	r2, #255	@ 0xff
 8007570:	d904      	bls.n	800757c <__ascii_wctomb+0x14>
 8007572:	228a      	movs	r2, #138	@ 0x8a
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	4770      	bx	lr
 800757c:	2001      	movs	r0, #1
 800757e:	700a      	strb	r2, [r1, #0]
 8007580:	4770      	bx	lr
	...

08007584 <fiprintf>:
 8007584:	b40e      	push	{r1, r2, r3}
 8007586:	b503      	push	{r0, r1, lr}
 8007588:	4601      	mov	r1, r0
 800758a:	ab03      	add	r3, sp, #12
 800758c:	4805      	ldr	r0, [pc, #20]	@ (80075a4 <fiprintf+0x20>)
 800758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007592:	6800      	ldr	r0, [r0, #0]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	f000 f83d 	bl	8007614 <_vfiprintf_r>
 800759a:	b002      	add	sp, #8
 800759c:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a0:	b003      	add	sp, #12
 80075a2:	4770      	bx	lr
 80075a4:	20000018 	.word	0x20000018

080075a8 <abort>:
 80075a8:	2006      	movs	r0, #6
 80075aa:	b508      	push	{r3, lr}
 80075ac:	f000 fa06 	bl	80079bc <raise>
 80075b0:	2001      	movs	r0, #1
 80075b2:	f7fa fb6c 	bl	8001c8e <_exit>

080075b6 <_malloc_usable_size_r>:
 80075b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ba:	1f18      	subs	r0, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfbc      	itt	lt
 80075c0:	580b      	ldrlt	r3, [r1, r0]
 80075c2:	18c0      	addlt	r0, r0, r3
 80075c4:	4770      	bx	lr

080075c6 <__sfputc_r>:
 80075c6:	6893      	ldr	r3, [r2, #8]
 80075c8:	b410      	push	{r4}
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	6093      	str	r3, [r2, #8]
 80075d0:	da07      	bge.n	80075e2 <__sfputc_r+0x1c>
 80075d2:	6994      	ldr	r4, [r2, #24]
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	db01      	blt.n	80075dc <__sfputc_r+0x16>
 80075d8:	290a      	cmp	r1, #10
 80075da:	d102      	bne.n	80075e2 <__sfputc_r+0x1c>
 80075dc:	bc10      	pop	{r4}
 80075de:	f000 b931 	b.w	8007844 <__swbuf_r>
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	1c58      	adds	r0, r3, #1
 80075e6:	6010      	str	r0, [r2, #0]
 80075e8:	7019      	strb	r1, [r3, #0]
 80075ea:	4608      	mov	r0, r1
 80075ec:	bc10      	pop	{r4}
 80075ee:	4770      	bx	lr

080075f0 <__sfputs_r>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	4606      	mov	r6, r0
 80075f4:	460f      	mov	r7, r1
 80075f6:	4614      	mov	r4, r2
 80075f8:	18d5      	adds	r5, r2, r3
 80075fa:	42ac      	cmp	r4, r5
 80075fc:	d101      	bne.n	8007602 <__sfputs_r+0x12>
 80075fe:	2000      	movs	r0, #0
 8007600:	e007      	b.n	8007612 <__sfputs_r+0x22>
 8007602:	463a      	mov	r2, r7
 8007604:	4630      	mov	r0, r6
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	f7ff ffdc 	bl	80075c6 <__sfputc_r>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	d1f3      	bne.n	80075fa <__sfputs_r+0xa>
 8007612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007614 <_vfiprintf_r>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	460d      	mov	r5, r1
 800761a:	4614      	mov	r4, r2
 800761c:	4698      	mov	r8, r3
 800761e:	4606      	mov	r6, r0
 8007620:	b09d      	sub	sp, #116	@ 0x74
 8007622:	b118      	cbz	r0, 800762c <_vfiprintf_r+0x18>
 8007624:	6a03      	ldr	r3, [r0, #32]
 8007626:	b90b      	cbnz	r3, 800762c <_vfiprintf_r+0x18>
 8007628:	f7fe f8fe 	bl	8005828 <__sinit>
 800762c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762e:	07d9      	lsls	r1, r3, #31
 8007630:	d405      	bmi.n	800763e <_vfiprintf_r+0x2a>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d402      	bmi.n	800763e <_vfiprintf_r+0x2a>
 8007638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800763a:	f7fe fa0c 	bl	8005a56 <__retarget_lock_acquire_recursive>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	071b      	lsls	r3, r3, #28
 8007642:	d501      	bpl.n	8007648 <_vfiprintf_r+0x34>
 8007644:	692b      	ldr	r3, [r5, #16]
 8007646:	b99b      	cbnz	r3, 8007670 <_vfiprintf_r+0x5c>
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f938 	bl	80078c0 <__swsetup_r>
 8007650:	b170      	cbz	r0, 8007670 <_vfiprintf_r+0x5c>
 8007652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007654:	07dc      	lsls	r4, r3, #31
 8007656:	d504      	bpl.n	8007662 <_vfiprintf_r+0x4e>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	b01d      	add	sp, #116	@ 0x74
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	0598      	lsls	r0, r3, #22
 8007666:	d4f7      	bmi.n	8007658 <_vfiprintf_r+0x44>
 8007668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800766a:	f7fe f9f5 	bl	8005a58 <__retarget_lock_release_recursive>
 800766e:	e7f3      	b.n	8007658 <_vfiprintf_r+0x44>
 8007670:	2300      	movs	r3, #0
 8007672:	9309      	str	r3, [sp, #36]	@ 0x24
 8007674:	2320      	movs	r3, #32
 8007676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800767a:	2330      	movs	r3, #48	@ 0x30
 800767c:	f04f 0901 	mov.w	r9, #1
 8007680:	f8cd 800c 	str.w	r8, [sp, #12]
 8007684:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007830 <_vfiprintf_r+0x21c>
 8007688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800768c:	4623      	mov	r3, r4
 800768e:	469a      	mov	sl, r3
 8007690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007694:	b10a      	cbz	r2, 800769a <_vfiprintf_r+0x86>
 8007696:	2a25      	cmp	r2, #37	@ 0x25
 8007698:	d1f9      	bne.n	800768e <_vfiprintf_r+0x7a>
 800769a:	ebba 0b04 	subs.w	fp, sl, r4
 800769e:	d00b      	beq.n	80076b8 <_vfiprintf_r+0xa4>
 80076a0:	465b      	mov	r3, fp
 80076a2:	4622      	mov	r2, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7ff ffa2 	bl	80075f0 <__sfputs_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	f000 80a7 	beq.w	8007800 <_vfiprintf_r+0x1ec>
 80076b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b4:	445a      	add	r2, fp
 80076b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b8:	f89a 3000 	ldrb.w	r3, [sl]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 809f 	beq.w	8007800 <_vfiprintf_r+0x1ec>
 80076c2:	2300      	movs	r3, #0
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076cc:	f10a 0a01 	add.w	sl, sl, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80076da:	4654      	mov	r4, sl
 80076dc:	2205      	movs	r2, #5
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	4853      	ldr	r0, [pc, #332]	@ (8007830 <_vfiprintf_r+0x21c>)
 80076e4:	f7fe f9b9 	bl	8005a5a <memchr>
 80076e8:	9a04      	ldr	r2, [sp, #16]
 80076ea:	b9d8      	cbnz	r0, 8007724 <_vfiprintf_r+0x110>
 80076ec:	06d1      	lsls	r1, r2, #27
 80076ee:	bf44      	itt	mi
 80076f0:	2320      	movmi	r3, #32
 80076f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f6:	0713      	lsls	r3, r2, #28
 80076f8:	bf44      	itt	mi
 80076fa:	232b      	movmi	r3, #43	@ 0x2b
 80076fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007700:	f89a 3000 	ldrb.w	r3, [sl]
 8007704:	2b2a      	cmp	r3, #42	@ 0x2a
 8007706:	d015      	beq.n	8007734 <_vfiprintf_r+0x120>
 8007708:	4654      	mov	r4, sl
 800770a:	2000      	movs	r0, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	9a07      	ldr	r2, [sp, #28]
 8007712:	4621      	mov	r1, r4
 8007714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007718:	3b30      	subs	r3, #48	@ 0x30
 800771a:	2b09      	cmp	r3, #9
 800771c:	d94b      	bls.n	80077b6 <_vfiprintf_r+0x1a2>
 800771e:	b1b0      	cbz	r0, 800774e <_vfiprintf_r+0x13a>
 8007720:	9207      	str	r2, [sp, #28]
 8007722:	e014      	b.n	800774e <_vfiprintf_r+0x13a>
 8007724:	eba0 0308 	sub.w	r3, r0, r8
 8007728:	fa09 f303 	lsl.w	r3, r9, r3
 800772c:	4313      	orrs	r3, r2
 800772e:	46a2      	mov	sl, r4
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	e7d2      	b.n	80076da <_vfiprintf_r+0xc6>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	1d19      	adds	r1, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	9103      	str	r1, [sp, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfbb      	ittet	lt
 8007740:	425b      	neglt	r3, r3
 8007742:	f042 0202 	orrlt.w	r2, r2, #2
 8007746:	9307      	strge	r3, [sp, #28]
 8007748:	9307      	strlt	r3, [sp, #28]
 800774a:	bfb8      	it	lt
 800774c:	9204      	strlt	r2, [sp, #16]
 800774e:	7823      	ldrb	r3, [r4, #0]
 8007750:	2b2e      	cmp	r3, #46	@ 0x2e
 8007752:	d10a      	bne.n	800776a <_vfiprintf_r+0x156>
 8007754:	7863      	ldrb	r3, [r4, #1]
 8007756:	2b2a      	cmp	r3, #42	@ 0x2a
 8007758:	d132      	bne.n	80077c0 <_vfiprintf_r+0x1ac>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	3402      	adds	r4, #2
 800775e:	1d1a      	adds	r2, r3, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	9203      	str	r2, [sp, #12]
 8007764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007834 <_vfiprintf_r+0x220>
 800776e:	2203      	movs	r2, #3
 8007770:	4650      	mov	r0, sl
 8007772:	7821      	ldrb	r1, [r4, #0]
 8007774:	f7fe f971 	bl	8005a5a <memchr>
 8007778:	b138      	cbz	r0, 800778a <_vfiprintf_r+0x176>
 800777a:	2240      	movs	r2, #64	@ 0x40
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	eba0 000a 	sub.w	r0, r0, sl
 8007782:	4082      	lsls	r2, r0
 8007784:	4313      	orrs	r3, r2
 8007786:	3401      	adds	r4, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	2206      	movs	r2, #6
 8007790:	4829      	ldr	r0, [pc, #164]	@ (8007838 <_vfiprintf_r+0x224>)
 8007792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007796:	f7fe f960 	bl	8005a5a <memchr>
 800779a:	2800      	cmp	r0, #0
 800779c:	d03f      	beq.n	800781e <_vfiprintf_r+0x20a>
 800779e:	4b27      	ldr	r3, [pc, #156]	@ (800783c <_vfiprintf_r+0x228>)
 80077a0:	bb1b      	cbnz	r3, 80077ea <_vfiprintf_r+0x1d6>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	3307      	adds	r3, #7
 80077a6:	f023 0307 	bic.w	r3, r3, #7
 80077aa:	3308      	adds	r3, #8
 80077ac:	9303      	str	r3, [sp, #12]
 80077ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b0:	443b      	add	r3, r7
 80077b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b4:	e76a      	b.n	800768c <_vfiprintf_r+0x78>
 80077b6:	460c      	mov	r4, r1
 80077b8:	2001      	movs	r0, #1
 80077ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80077be:	e7a8      	b.n	8007712 <_vfiprintf_r+0xfe>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f04f 0c0a 	mov.w	ip, #10
 80077c6:	4619      	mov	r1, r3
 80077c8:	3401      	adds	r4, #1
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d2:	3a30      	subs	r2, #48	@ 0x30
 80077d4:	2a09      	cmp	r2, #9
 80077d6:	d903      	bls.n	80077e0 <_vfiprintf_r+0x1cc>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0c6      	beq.n	800776a <_vfiprintf_r+0x156>
 80077dc:	9105      	str	r1, [sp, #20]
 80077de:	e7c4      	b.n	800776a <_vfiprintf_r+0x156>
 80077e0:	4604      	mov	r4, r0
 80077e2:	2301      	movs	r3, #1
 80077e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e8:	e7f0      	b.n	80077cc <_vfiprintf_r+0x1b8>
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462a      	mov	r2, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	4b13      	ldr	r3, [pc, #76]	@ (8007840 <_vfiprintf_r+0x22c>)
 80077f4:	a904      	add	r1, sp, #16
 80077f6:	f7fd fbcd 	bl	8004f94 <_printf_float>
 80077fa:	4607      	mov	r7, r0
 80077fc:	1c78      	adds	r0, r7, #1
 80077fe:	d1d6      	bne.n	80077ae <_vfiprintf_r+0x19a>
 8007800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	d405      	bmi.n	8007812 <_vfiprintf_r+0x1fe>
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	059a      	lsls	r2, r3, #22
 800780a:	d402      	bmi.n	8007812 <_vfiprintf_r+0x1fe>
 800780c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800780e:	f7fe f923 	bl	8005a58 <__retarget_lock_release_recursive>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	065b      	lsls	r3, r3, #25
 8007816:	f53f af1f 	bmi.w	8007658 <_vfiprintf_r+0x44>
 800781a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800781c:	e71e      	b.n	800765c <_vfiprintf_r+0x48>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4630      	mov	r0, r6
 8007826:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <_vfiprintf_r+0x22c>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	f7fd fe51 	bl	80054d0 <_printf_i>
 800782e:	e7e4      	b.n	80077fa <_vfiprintf_r+0x1e6>
 8007830:	08007ec0 	.word	0x08007ec0
 8007834:	08007ec6 	.word	0x08007ec6
 8007838:	08007eca 	.word	0x08007eca
 800783c:	08004f95 	.word	0x08004f95
 8007840:	080075f1 	.word	0x080075f1

08007844 <__swbuf_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	4614      	mov	r4, r2
 800784a:	4605      	mov	r5, r0
 800784c:	b118      	cbz	r0, 8007856 <__swbuf_r+0x12>
 800784e:	6a03      	ldr	r3, [r0, #32]
 8007850:	b90b      	cbnz	r3, 8007856 <__swbuf_r+0x12>
 8007852:	f7fd ffe9 	bl	8005828 <__sinit>
 8007856:	69a3      	ldr	r3, [r4, #24]
 8007858:	60a3      	str	r3, [r4, #8]
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	071a      	lsls	r2, r3, #28
 800785e:	d501      	bpl.n	8007864 <__swbuf_r+0x20>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	b943      	cbnz	r3, 8007876 <__swbuf_r+0x32>
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 f82a 	bl	80078c0 <__swsetup_r>
 800786c:	b118      	cbz	r0, 8007876 <__swbuf_r+0x32>
 800786e:	f04f 37ff 	mov.w	r7, #4294967295
 8007872:	4638      	mov	r0, r7
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	6922      	ldr	r2, [r4, #16]
 800787a:	b2f6      	uxtb	r6, r6
 800787c:	1a98      	subs	r0, r3, r2
 800787e:	6963      	ldr	r3, [r4, #20]
 8007880:	4637      	mov	r7, r6
 8007882:	4283      	cmp	r3, r0
 8007884:	dc05      	bgt.n	8007892 <__swbuf_r+0x4e>
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f7ff fd9b 	bl	80073c4 <_fflush_r>
 800788e:	2800      	cmp	r0, #0
 8007890:	d1ed      	bne.n	800786e <__swbuf_r+0x2a>
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	3b01      	subs	r3, #1
 8007896:	60a3      	str	r3, [r4, #8]
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	701e      	strb	r6, [r3, #0]
 80078a0:	6962      	ldr	r2, [r4, #20]
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d004      	beq.n	80078b2 <__swbuf_r+0x6e>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	07db      	lsls	r3, r3, #31
 80078ac:	d5e1      	bpl.n	8007872 <__swbuf_r+0x2e>
 80078ae:	2e0a      	cmp	r6, #10
 80078b0:	d1df      	bne.n	8007872 <__swbuf_r+0x2e>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fd85 	bl	80073c4 <_fflush_r>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0d9      	beq.n	8007872 <__swbuf_r+0x2e>
 80078be:	e7d6      	b.n	800786e <__swbuf_r+0x2a>

080078c0 <__swsetup_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4b29      	ldr	r3, [pc, #164]	@ (8007968 <__swsetup_r+0xa8>)
 80078c4:	4605      	mov	r5, r0
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	460c      	mov	r4, r1
 80078ca:	b118      	cbz	r0, 80078d4 <__swsetup_r+0x14>
 80078cc:	6a03      	ldr	r3, [r0, #32]
 80078ce:	b90b      	cbnz	r3, 80078d4 <__swsetup_r+0x14>
 80078d0:	f7fd ffaa 	bl	8005828 <__sinit>
 80078d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d8:	0719      	lsls	r1, r3, #28
 80078da:	d422      	bmi.n	8007922 <__swsetup_r+0x62>
 80078dc:	06da      	lsls	r2, r3, #27
 80078de:	d407      	bmi.n	80078f0 <__swsetup_r+0x30>
 80078e0:	2209      	movs	r2, #9
 80078e2:	602a      	str	r2, [r5, #0]
 80078e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	81a3      	strh	r3, [r4, #12]
 80078ee:	e033      	b.n	8007958 <__swsetup_r+0x98>
 80078f0:	0758      	lsls	r0, r3, #29
 80078f2:	d512      	bpl.n	800791a <__swsetup_r+0x5a>
 80078f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078f6:	b141      	cbz	r1, 800790a <__swsetup_r+0x4a>
 80078f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078fc:	4299      	cmp	r1, r3
 80078fe:	d002      	beq.n	8007906 <__swsetup_r+0x46>
 8007900:	4628      	mov	r0, r5
 8007902:	f7fe ff09 	bl	8006718 <_free_r>
 8007906:	2300      	movs	r3, #0
 8007908:	6363      	str	r3, [r4, #52]	@ 0x34
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	2300      	movs	r3, #0
 8007914:	6063      	str	r3, [r4, #4]
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f043 0308 	orr.w	r3, r3, #8
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	b94b      	cbnz	r3, 800793a <__swsetup_r+0x7a>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800792c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007930:	d003      	beq.n	800793a <__swsetup_r+0x7a>
 8007932:	4621      	mov	r1, r4
 8007934:	4628      	mov	r0, r5
 8007936:	f000 f882 	bl	8007a3e <__smakebuf_r>
 800793a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793e:	f013 0201 	ands.w	r2, r3, #1
 8007942:	d00a      	beq.n	800795a <__swsetup_r+0x9a>
 8007944:	2200      	movs	r2, #0
 8007946:	60a2      	str	r2, [r4, #8]
 8007948:	6962      	ldr	r2, [r4, #20]
 800794a:	4252      	negs	r2, r2
 800794c:	61a2      	str	r2, [r4, #24]
 800794e:	6922      	ldr	r2, [r4, #16]
 8007950:	b942      	cbnz	r2, 8007964 <__swsetup_r+0xa4>
 8007952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007956:	d1c5      	bne.n	80078e4 <__swsetup_r+0x24>
 8007958:	bd38      	pop	{r3, r4, r5, pc}
 800795a:	0799      	lsls	r1, r3, #30
 800795c:	bf58      	it	pl
 800795e:	6962      	ldrpl	r2, [r4, #20]
 8007960:	60a2      	str	r2, [r4, #8]
 8007962:	e7f4      	b.n	800794e <__swsetup_r+0x8e>
 8007964:	2000      	movs	r0, #0
 8007966:	e7f7      	b.n	8007958 <__swsetup_r+0x98>
 8007968:	20000018 	.word	0x20000018

0800796c <_raise_r>:
 800796c:	291f      	cmp	r1, #31
 800796e:	b538      	push	{r3, r4, r5, lr}
 8007970:	4605      	mov	r5, r0
 8007972:	460c      	mov	r4, r1
 8007974:	d904      	bls.n	8007980 <_raise_r+0x14>
 8007976:	2316      	movs	r3, #22
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007982:	b112      	cbz	r2, 800798a <_raise_r+0x1e>
 8007984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007988:	b94b      	cbnz	r3, 800799e <_raise_r+0x32>
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f830 	bl	80079f0 <_getpid_r>
 8007990:	4622      	mov	r2, r4
 8007992:	4601      	mov	r1, r0
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799a:	f000 b817 	b.w	80079cc <_kill_r>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d00a      	beq.n	80079b8 <_raise_r+0x4c>
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	d103      	bne.n	80079ae <_raise_r+0x42>
 80079a6:	2316      	movs	r3, #22
 80079a8:	6003      	str	r3, [r0, #0]
 80079aa:	2001      	movs	r0, #1
 80079ac:	e7e7      	b.n	800797e <_raise_r+0x12>
 80079ae:	2100      	movs	r1, #0
 80079b0:	4620      	mov	r0, r4
 80079b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079b6:	4798      	blx	r3
 80079b8:	2000      	movs	r0, #0
 80079ba:	e7e0      	b.n	800797e <_raise_r+0x12>

080079bc <raise>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <raise+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f7ff bfd3 	b.w	800796c <_raise_r>
 80079c6:	bf00      	nop
 80079c8:	20000018 	.word	0x20000018

080079cc <_kill_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	2300      	movs	r3, #0
 80079d0:	4d06      	ldr	r5, [pc, #24]	@ (80079ec <_kill_r+0x20>)
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	f7fa f948 	bl	8001c6e <_kill>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d102      	bne.n	80079e8 <_kill_r+0x1c>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b103      	cbz	r3, 80079e8 <_kill_r+0x1c>
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	200004b0 	.word	0x200004b0

080079f0 <_getpid_r>:
 80079f0:	f7fa b936 	b.w	8001c60 <_getpid>

080079f4 <__swhatbuf_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	460c      	mov	r4, r1
 80079f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fc:	4615      	mov	r5, r2
 80079fe:	2900      	cmp	r1, #0
 8007a00:	461e      	mov	r6, r3
 8007a02:	b096      	sub	sp, #88	@ 0x58
 8007a04:	da0c      	bge.n	8007a20 <__swhatbuf_r+0x2c>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a0e:	bf14      	ite	ne
 8007a10:	2340      	movne	r3, #64	@ 0x40
 8007a12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a16:	2000      	movs	r0, #0
 8007a18:	6031      	str	r1, [r6, #0]
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	b016      	add	sp, #88	@ 0x58
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
 8007a20:	466a      	mov	r2, sp
 8007a22:	f000 f849 	bl	8007ab8 <_fstat_r>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	dbed      	blt.n	8007a06 <__swhatbuf_r+0x12>
 8007a2a:	9901      	ldr	r1, [sp, #4]
 8007a2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a34:	4259      	negs	r1, r3
 8007a36:	4159      	adcs	r1, r3
 8007a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a3c:	e7eb      	b.n	8007a16 <__swhatbuf_r+0x22>

08007a3e <__smakebuf_r>:
 8007a3e:	898b      	ldrh	r3, [r1, #12]
 8007a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a42:	079d      	lsls	r5, r3, #30
 8007a44:	4606      	mov	r6, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	d507      	bpl.n	8007a5a <__smakebuf_r+0x1c>
 8007a4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	2301      	movs	r3, #1
 8007a54:	6163      	str	r3, [r4, #20]
 8007a56:	b003      	add	sp, #12
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	ab01      	add	r3, sp, #4
 8007a5e:	f7ff ffc9 	bl	80079f4 <__swhatbuf_r>
 8007a62:	9f00      	ldr	r7, [sp, #0]
 8007a64:	4605      	mov	r5, r0
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7fe fec7 	bl	80067fc <_malloc_r>
 8007a6e:	b948      	cbnz	r0, 8007a84 <__smakebuf_r+0x46>
 8007a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a74:	059a      	lsls	r2, r3, #22
 8007a76:	d4ee      	bmi.n	8007a56 <__smakebuf_r+0x18>
 8007a78:	f023 0303 	bic.w	r3, r3, #3
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e7e2      	b.n	8007a4a <__smakebuf_r+0xc>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	6020      	str	r0, [r4, #0]
 8007a94:	b15b      	cbz	r3, 8007aae <__smakebuf_r+0x70>
 8007a96:	4630      	mov	r0, r6
 8007a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9c:	f000 f81e 	bl	8007adc <_isatty_r>
 8007aa0:	b128      	cbz	r0, 8007aae <__smakebuf_r+0x70>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	431d      	orrs	r5, r3
 8007ab2:	81a5      	strh	r5, [r4, #12]
 8007ab4:	e7cf      	b.n	8007a56 <__smakebuf_r+0x18>
	...

08007ab8 <_fstat_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	2300      	movs	r3, #0
 8007abc:	4d06      	ldr	r5, [pc, #24]	@ (8007ad8 <_fstat_r+0x20>)
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	f7fa f931 	bl	8001d2c <_fstat>
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	d102      	bne.n	8007ad4 <_fstat_r+0x1c>
 8007ace:	682b      	ldr	r3, [r5, #0]
 8007ad0:	b103      	cbz	r3, 8007ad4 <_fstat_r+0x1c>
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	bd38      	pop	{r3, r4, r5, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200004b0 	.word	0x200004b0

08007adc <_isatty_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4d05      	ldr	r5, [pc, #20]	@ (8007af8 <_isatty_r+0x1c>)
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7fa f92f 	bl	8001d4a <_isatty>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_isatty_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_isatty_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	200004b0 	.word	0x200004b0

08007afc <_init>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr

08007b08 <_fini>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr
